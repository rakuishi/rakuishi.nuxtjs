{
  "categories": [
    "CSS"
  ],
  "date": "2015-01-24T04:00:00.000Z",
  "draft": false,
  "slug": "critical",
  "title": "Critical を使用して、レンダリングブロック CSS を排除する",
  "bodyContent": "WordPress から Hugo に移行して、ブログのテーマがある程度出来たので、Google のウェブパフォーマンスツール [PageSpeed Insights](http://developers.google.com/speed/pagespeed/insights/) にかけたら 73 でした。ちなみに、ページのパフォーマンスが高いとされる数値は 85 以上。\n\n「スクロールせずに見えるコンテンツのレンダリングをブロックしている JavaScript/CSS を排除する」項目で大幅に減点されているから、今回は CSS を修正していきます。\n\n## レンダリングブロック CSS とは\n\n> ブラウザではコンテンツを画面に描画する前に外部 CSS ファイルをブロックします。これによって、余分なネットワーク遅延が生じ、コンテンツを画面に表示するのにかかる時間が増えます。\n>\n> [CSS の配信を最適化する](https://developers.google.com/speed/docs/insights/OptimizeCSSDelivery)\n\n## ページを表示する手順を考えてみる\n\nブラウザが html ページを表示する際の手順は、以下になります。\n\n1. index.html を読み込む\n1. 外部に記述された CSS ファイル style.css を読み込む（レンダリングブロック発生）\n1. 描画\n\nこのレンダリングブロックを取り除くために、index.html の head 内に、CSS 初学時のように、style を直接記述（インライン化）してみます。\n\n1. index.html を読み込む\n1. 描画\n\nすると、一度の読み込み処理で描画まで持っていけますが、幾つかの理由で膨れ上がる CSS を html に記述するのは好ましくないようです。\n\nCSS を外部ファイルで記述した場合、CSS ファイルをブラウザがキャッシュすることができるし、最初の通信で送れる情報は 14KB までだからです。参考：[PageSpeed Insights でのモバイル解析 - 最初のレンダリングまでの往復数は最小限に抑える](https://developers.google.com/speed/docs/insights/mobile?hl=ja)\n\nだから、index.html にすべて詰め込んだとして、14KB を超えていては、複数回の通信が必要になり、結局 style.css を読み込むのと同じじゃん、みたいになる。ちなみに、気合の入った記事を書くとだいたい 10KB になり、CSS ファイルが 4KB 程度なので、14KB は調整し甲斐のある数値だったりする。\n\nそこで、index.html に必要な sytle を直接記述するけれど、必要のない style は外部ファイルとして後から非同期で読み込むという手法を考えてみます。\n\n1. index.html を読み込む\n2. 描画（この段階でユーザーには、CSS が適用されたページが表示されている）\n3. style.css を読み込む\n4. 描画\n\nここで言う、必要な style ですが、ユーザーのファーストビューで見える範囲をカバーする CSS を指しています。全体を記述している CSS は、後から非同期で読み込むという訳です。これで最初のレンダリングは、早く実行されることになり、パフォーマンスが良いと評価されます。\n\n## Critical & Gulp\n\nここでは、[Critical](https://github.com/addyosmani/critical) と、ビルドツール gulp を使用して、自動化します。まずは、Critical をインストールします。\n\n\t$ npm install --save critical\n\n[gulpfile.js](https://github.com/rakuishi/rakuishi.com/blob/master/gulpfile.js) に以下を記述します。していることは、public フォルダ以下の index.html とその中に記述されている外部スタイルシートを、横幅 320px 縦幅 480px のデバイスで見た時で解析します。そして、インライン化した index.html を htmlTarget で記述されている html に保存しています。\n\n\tvar critical = require('critical');\n\n\tgulp.task('critical', function () {\n\t  critical.generateInline({\n\t      base: 'public/',\n\t      src: 'index.html',\n\t      htmlTarget: 'index.html',\n\t      width: 320,\n\t      height: 480,\n\t      minify: true\n\t    });\n\t});\n\n`gulp critical` すれば、レンダリングブロック CSS が排除されます。このブログでは、サイトトップの index.html を対象に `gulp critical` を実行するようにしました。\n\n## 結果\n\n95 になりました。\n\n![pagespeed](/images/2015/01/pagespeed.jpg)",
  "bodyHtml": "<p>WordPress から Hugo に移行して、ブログのテーマがある程度出来たので、Google のウェブパフォーマンスツール <a href=\"http://developers.google.com/speed/pagespeed/insights/\">PageSpeed Insights</a> にかけたら 73 でした。ちなみに、ページのパフォーマンスが高いとされる数値は 85 以上。</p>\n<p>「スクロールせずに見えるコンテンツのレンダリングをブロックしている JavaScript/CSS を排除する」項目で大幅に減点されているから、今回は CSS を修正していきます。</p>\n<h2>レンダリングブロック CSS とは</h2>\n<blockquote>\n<p>ブラウザではコンテンツを画面に描画する前に外部 CSS ファイルをブロックします。これによって、余分なネットワーク遅延が生じ、コンテンツを画面に表示するのにかかる時間が増えます。</p>\n<p><a href=\"https://developers.google.com/speed/docs/insights/OptimizeCSSDelivery\">CSS の配信を最適化する</a></p>\n</blockquote>\n<h2>ページを表示する手順を考えてみる</h2>\n<p>ブラウザが html ページを表示する際の手順は、以下になります。</p>\n<ol>\n<li>index.html を読み込む</li>\n<li>外部に記述された CSS ファイル style.css を読み込む（レンダリングブロック発生）</li>\n<li>描画</li>\n</ol>\n<p>このレンダリングブロックを取り除くために、index.html の head 内に、CSS 初学時のように、style を直接記述（インライン化）してみます。</p>\n<ol>\n<li>index.html を読み込む</li>\n<li>描画</li>\n</ol>\n<p>すると、一度の読み込み処理で描画まで持っていけますが、幾つかの理由で膨れ上がる CSS を html に記述するのは好ましくないようです。</p>\n<p>CSS を外部ファイルで記述した場合、CSS ファイルをブラウザがキャッシュすることができるし、最初の通信で送れる情報は 14KB までだからです。参考：<a href=\"https://developers.google.com/speed/docs/insights/mobile?hl=ja\">PageSpeed Insights でのモバイル解析 - 最初のレンダリングまでの往復数は最小限に抑える</a></p>\n<p>だから、index.html にすべて詰め込んだとして、14KB を超えていては、複数回の通信が必要になり、結局 style.css を読み込むのと同じじゃん、みたいになる。ちなみに、気合の入った記事を書くとだいたい 10KB になり、CSS ファイルが 4KB 程度なので、14KB は調整し甲斐のある数値だったりする。</p>\n<p>そこで、index.html に必要な sytle を直接記述するけれど、必要のない style は外部ファイルとして後から非同期で読み込むという手法を考えてみます。</p>\n<ol>\n<li>index.html を読み込む</li>\n<li>描画（この段階でユーザーには、CSS が適用されたページが表示されている）</li>\n<li>style.css を読み込む</li>\n<li>描画</li>\n</ol>\n<p>ここで言う、必要な style ですが、ユーザーのファーストビューで見える範囲をカバーする CSS を指しています。全体を記述している CSS は、後から非同期で読み込むという訳です。これで最初のレンダリングは、早く実行されることになり、パフォーマンスが良いと評価されます。</p>\n<h2>Critical &amp; Gulp</h2>\n<p>ここでは、<a href=\"https://github.com/addyosmani/critical\">Critical</a> と、ビルドツール gulp を使用して、自動化します。まずは、Critical をインストールします。</p>\n<pre><code>$ npm install --save critical\n</code></pre>\n<p><a href=\"https://github.com/rakuishi/rakuishi.com/blob/master/gulpfile.js\">gulpfile.js</a> に以下を記述します。していることは、public フォルダ以下の index.html とその中に記述されている外部スタイルシートを、横幅 320px 縦幅 480px のデバイスで見た時で解析します。そして、インライン化した index.html を htmlTarget で記述されている html に保存しています。</p>\n<pre><code>var critical = require('critical');\n\ngulp.task('critical', function () {\n  critical.generateInline({\n      base: 'public/',\n      src: 'index.html',\n      htmlTarget: 'index.html',\n      width: 320,\n      height: 480,\n      minify: true\n    });\n});\n</code></pre>\n<p><code>gulp critical</code> すれば、レンダリングブロック CSS が排除されます。このブログでは、サイトトップの index.html を対象に <code>gulp critical</code> を実行するようにしました。</p>\n<h2>結果</h2>\n<p>95 になりました。</p>\n<p><img src=\"/images/2015/01/pagespeed.jpg\" alt=\"pagespeed\"></p>\n",
  "dir": "static/content/archives",
  "base": "2015-01-24-critical.json",
  "ext": ".json",
  "sourceBase": "2015-01-24-critical.md",
  "sourceExt": ".md"
}