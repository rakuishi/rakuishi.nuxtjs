{
  "categories": [
    "iOS"
  ],
  "date": "2012-06-03T06:20:22.000Z",
  "draft": false,
  "slug": 3922,
  "title": "[iOS SDK][Core Data] 表示するデータの並び順・セクション名・フィルタを設定する方法",
  "bodyContent": "CoreData で、アトリビュート（属性）の値によって、表示するデータの並び順を変更、セクション名を設定、フィルタリングする方法を紹介します。\n\nベースは、「Master-Detail Application」で「Use Core Data」を選択したものとなっています。また、ARC を使用しています。\n\n乱暴な書き方になってしまうかも知れませんが、メモとして残しておきます。\n\n## 表示するデータの並び順を変更する\n\nascending:YES で昇順（ABC...）に設定。\n\nselector:@selector(caseInsensitiveCompare:) で大文字小文字の区別をしないように設定。\n\n```\n- (NSFetchedResultsController *)fetchedResultsController\n{\n\n    // ...\n    \n    NSSortDescriptor *sortDescriptor = [[NSSortDescriptor alloc] initWithKey:@\"name\" ascending:YES selector:@selector(caseInsensitiveCompare:)];\n    NSArray *sortDescriptors = [NSArray arrayWithObjects:sortDescriptor, nil];\n    [fetchRequest setSortDescriptors:sortDescriptors];\n\n    // ...\n    \n    return __fetchedResultsController;\n}\n```\n\n## 表示するデータのセクション名を設定する\n\nUITableView に表示する際、アトリビュート \"name_index\" に入っているデータを section 名にする。\n\n```\n- (NSFetchedResultsController *)fetchedResultsController\n{\n\n    // ...\n        \n    NSFetchedResultsController *aFetchedResultsController = [[NSFetchedResultsController alloc] initWithFetchRequest:fetchRequest managedObjectContext:self.managedObjectContext sectionNameKeyPath:@\"name_index\" cacheName:nil];\n    aFetchedResultsController.delegate = self;\n    self.fetchedResultsController = aFetchedResultsController;\n    \n    // ...\n        \n    return __fetchedResultsController;\n}\n```\n\n## 表示するデータにフィルタをかける\n\nアトリビュート \"check\" が 1 未満のレコードを表示。\n\n```\n- (NSFetchedResultsController *)fetchedResultsController\n{\n    \n    // ...\n        \n    NSPredicate *predicate = [NSPredicate predicateWithFormat:@\"check < 1\"];\n    [fetchRequest setPredicate:predicate];\n    \n    // ...\n    \n    return __fetchedResultsController;        \n}\n```",
  "bodyHtml": "<p>CoreData で、アトリビュート（属性）の値によって、表示するデータの並び順を変更、セクション名を設定、フィルタリングする方法を紹介します。</p>\n<p>ベースは、「Master-Detail Application」で「Use Core Data」を選択したものとなっています。また、ARC を使用しています。</p>\n<p>乱暴な書き方になってしまうかも知れませんが、メモとして残しておきます。</p>\n<h2>表示するデータの並び順を変更する</h2>\n<p>ascending:YES で昇順（ABC...）に設定。</p>\n<p>selector:@selector(caseInsensitiveCompare:) で大文字小文字の区別をしないように設定。</p>\n<pre><code>- (NSFetchedResultsController *)fetchedResultsController\n{\n\n    // ...\n    \n    NSSortDescriptor *sortDescriptor = [[NSSortDescriptor alloc] initWithKey:@&quot;name&quot; ascending:YES selector:@selector(caseInsensitiveCompare:)];\n    NSArray *sortDescriptors = [NSArray arrayWithObjects:sortDescriptor, nil];\n    [fetchRequest setSortDescriptors:sortDescriptors];\n\n    // ...\n    \n    return __fetchedResultsController;\n}\n</code></pre>\n<h2>表示するデータのセクション名を設定する</h2>\n<p>UITableView に表示する際、アトリビュート &quot;name_index&quot; に入っているデータを section 名にする。</p>\n<pre><code>- (NSFetchedResultsController *)fetchedResultsController\n{\n\n    // ...\n        \n    NSFetchedResultsController *aFetchedResultsController = [[NSFetchedResultsController alloc] initWithFetchRequest:fetchRequest managedObjectContext:self.managedObjectContext sectionNameKeyPath:@&quot;name_index&quot; cacheName:nil];\n    aFetchedResultsController.delegate = self;\n    self.fetchedResultsController = aFetchedResultsController;\n    \n    // ...\n        \n    return __fetchedResultsController;\n}\n</code></pre>\n<h2>表示するデータにフィルタをかける</h2>\n<p>アトリビュート &quot;check&quot; が 1 未満のレコードを表示。</p>\n<pre><code>- (NSFetchedResultsController *)fetchedResultsController\n{\n    \n    // ...\n        \n    NSPredicate *predicate = [NSPredicate predicateWithFormat:@&quot;check &lt; 1&quot;];\n    [fetchRequest setPredicate:predicate];\n    \n    // ...\n    \n    return __fetchedResultsController;        \n}\n</code></pre>\n",
  "dir": "static/content/archives",
  "base": "2012-06-03-3922.json",
  "ext": ".json",
  "sourceBase": "2012-06-03-3922.md",
  "sourceExt": ".md"
}