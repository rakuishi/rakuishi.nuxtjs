{
  "categories": [
    "Hugo"
  ],
  "date": "2015-01-20T13:08:00.000Z",
  "draft": false,
  "slug": "wordpress-to-hugo",
  "title": "WordPress から Hugo に乗り換えました",
  "bodyContent": "2011年8月25日から数えて3年と半年、このブログは WordPress で運営してきたのですが、この記事から [Hugo](http://gohugo.io/) という静的サイトジェネレータで運用します。\n\n当初は WordPress も PHP も分からない微生物専攻の大学生だったのが、最近では WordPress テーマ／プラグイン作成をする仕事をしていて、時間の流れは不思議だと感じるこの頃。そして、WordPress のことが大まかに掴めたからこそ、他のブログツールを勉強したいなと思いました。\n\n調べてみたらフロントエンドエンジニア界隈で、Go 言語で作られた Hugo という静的サイトジェネレータがなんか流行りっぽいので、それに移行しました。\n\n- [OctopressからHugoへ移行した | SOTA](http://deeeet.com/writing/2014/12/25/hugo/)\n- [Jekyllが許されるのは小学生までだよね - MOL](http://t32k.me/mol/log/hugo/)\n\n## WordPress からの移行方法\n\nまだ、公式に WordPress から Hugo に移行する方法がないのですが、以下の手順でだいたい出来ました。\n\n### Hugo 導入\n\n`go get` して Hugo を導入して、新規サイトを作成。\n\n\t$ export GOPATH=$HOME/go\n\t$ go get -v github.com/spf13/hugo\n\t$ hugo new site rakuishi.com\n\n参考：[Hugo Quickstart Guide](http://gohugo.io/overview/quickstart/)\n\n### 記事\n\n- WordPress の記事情報 xml を取得する（管理画面 → Export → All content → Download Export file）\n- WordPress の記事を Hugo 仕様に変換する。→ [wp-xml-hugo-import.rb](https://gist.github.com/rakuishi/3163f6e8c5a496329bc7)\n- 作成した markdown（記事記述部分は、html のままだが）を content/ 以下の任意の場所に置く。このブログの場合は、content/archives/*.md\n\n### 画像\n\n- WordPress /wp-contents/uploads フォルダを FTP とかからローカルに落としておく\n- uploads 内サムネイル用画像は、もう使わないから削除する。`find uploads -name \"*-150x150.*\" | xargs rm`\n- uploads を images に名前を変えて static/images に配置\n\n### テーマファイル\n\nlayouts にオリジナルテーマを書くか、テーマをクローンしてくる。テーマは、あまり揃っていないので、自作するのが吉。\n\n\t$ git clone --recursive https://github.com/spf13/hugoThemes themes\n\n### .htaccess にリダイレクトを追加する\n\nWordPress は /feed に、Hugo は /index.xml にフィードを吐き出しているからリダイレクト処理を static/.htaccess に書く。\n\n\tRedirectMatch 301 /feed /index.xml\n\n### ローカル環境\n\nローカル環境を起動できます。`--buildDrafts` は、ドラフト記事も生成。`--watch` は、記事を保存した時に、ブラウザが自動リロードされる。http://localhost:1313/ からローカル環境が見えます。\n約 420 記事あるこのブログの生成時間は、400ms ぐらいでした。\n\n\t$ hugo server --buildDrafts --watch\n\t$ hugo server --theme=redlounge --buildDrafts --watch\n\n### サーバーとデータをシンクする\n\n`rsync` コマンドで同期させている。以下のようなシェルスクリプトを書いた。\n\n\t#!/bin/sh\n\thugo\n\trsync -auv --delete ~/Dropbox/Private/rakuishi.com/public/ rakuishi@rakuishi.sakura.ne.jp:/home/rakuishi/www/\n\n## 雑感\n\n静的サイトジェネレータだから、WordPress のようにブラウザで記事を書くのではなくて、ローカルに記事を書く。記事はマークダウン形式で書けて、それを html ファイル形式で出力する。それをサーバーにシンクして完了、という流れになります。\n\nまだ、関連記事やページネーションを導入するのが難しい成長途中のジェネレータですが、細かいところを拘らなければ特に問題ない。そういう細かいところは、これから実装されるみたい。→ [Hugo Roadmap](http://gohugo.io/meta/roadmap/)\n\nそれより WordPress のセキュリティとか、データベースとか、バックアップとか、PHP の記述をミスって画面が白くなる、というストレスから開放されるのが良いと思いました。静的サイトジェネレータだから、当然ですが、記事の読み込みが早くなった。\n\nそれと、ブログを GitHub で管理できるようになりました。\n\n* [rakuishi/rakuishi.com](https://github.com/rakuishi/rakuishi.com)",
  "bodyHtml": "<p>2011年8月25日から数えて3年と半年、このブログは WordPress で運営してきたのですが、この記事から <a href=\"http://gohugo.io/\">Hugo</a> という静的サイトジェネレータで運用します。</p>\n<p>当初は WordPress も PHP も分からない微生物専攻の大学生だったのが、最近では WordPress テーマ／プラグイン作成をする仕事をしていて、時間の流れは不思議だと感じるこの頃。そして、WordPress のことが大まかに掴めたからこそ、他のブログツールを勉強したいなと思いました。</p>\n<p>調べてみたらフロントエンドエンジニア界隈で、Go 言語で作られた Hugo という静的サイトジェネレータがなんか流行りっぽいので、それに移行しました。</p>\n<ul>\n<li><a href=\"http://deeeet.com/writing/2014/12/25/hugo/\">OctopressからHugoへ移行した | SOTA</a></li>\n<li><a href=\"http://t32k.me/mol/log/hugo/\">Jekyllが許されるのは小学生までだよね - MOL</a></li>\n</ul>\n<h2>WordPress からの移行方法</h2>\n<p>まだ、公式に WordPress から Hugo に移行する方法がないのですが、以下の手順でだいたい出来ました。</p>\n<h3>Hugo 導入</h3>\n<p><code>go get</code> して Hugo を導入して、新規サイトを作成。</p>\n<pre><code>$ export GOPATH=$HOME/go\n$ go get -v github.com/spf13/hugo\n$ hugo new site rakuishi.com\n</code></pre>\n<p>参考：<a href=\"http://gohugo.io/overview/quickstart/\">Hugo Quickstart Guide</a></p>\n<h3>記事</h3>\n<ul>\n<li>WordPress の記事情報 xml を取得する（管理画面 → Export → All content → Download Export file）</li>\n<li>WordPress の記事を Hugo 仕様に変換する。→ <a href=\"https://gist.github.com/rakuishi/3163f6e8c5a496329bc7\">wp-xml-hugo-import.rb</a></li>\n<li>作成した markdown（記事記述部分は、html のままだが）を content/ 以下の任意の場所に置く。このブログの場合は、content/archives/*.md</li>\n</ul>\n<h3>画像</h3>\n<ul>\n<li>WordPress /wp-contents/uploads フォルダを FTP とかからローカルに落としておく</li>\n<li>uploads 内サムネイル用画像は、もう使わないから削除する。<code>find uploads -name &quot;*-150x150.*&quot; | xargs rm</code></li>\n<li>uploads を images に名前を変えて static/images に配置</li>\n</ul>\n<h3>テーマファイル</h3>\n<p>layouts にオリジナルテーマを書くか、テーマをクローンしてくる。テーマは、あまり揃っていないので、自作するのが吉。</p>\n<pre><code>$ git clone --recursive https://github.com/spf13/hugoThemes themes\n</code></pre>\n<h3>.htaccess にリダイレクトを追加する</h3>\n<p>WordPress は /feed に、Hugo は /index.xml にフィードを吐き出しているからリダイレクト処理を static/.htaccess に書く。</p>\n<pre><code>RedirectMatch 301 /feed /index.xml\n</code></pre>\n<h3>ローカル環境</h3>\n<p>ローカル環境を起動できます。<code>--buildDrafts</code> は、ドラフト記事も生成。<code>--watch</code> は、記事を保存した時に、ブラウザが自動リロードされる。http://localhost:1313/ からローカル環境が見えます。\n約 420 記事あるこのブログの生成時間は、400ms ぐらいでした。</p>\n<pre><code>$ hugo server --buildDrafts --watch\n$ hugo server --theme=redlounge --buildDrafts --watch\n</code></pre>\n<h3>サーバーとデータをシンクする</h3>\n<p><code>rsync</code> コマンドで同期させている。以下のようなシェルスクリプトを書いた。</p>\n<pre><code>#!/bin/sh\nhugo\nrsync -auv --delete ~/Dropbox/Private/rakuishi.com/public/ rakuishi@rakuishi.sakura.ne.jp:/home/rakuishi/www/\n</code></pre>\n<h2>雑感</h2>\n<p>静的サイトジェネレータだから、WordPress のようにブラウザで記事を書くのではなくて、ローカルに記事を書く。記事はマークダウン形式で書けて、それを html ファイル形式で出力する。それをサーバーにシンクして完了、という流れになります。</p>\n<p>まだ、関連記事やページネーションを導入するのが難しい成長途中のジェネレータですが、細かいところを拘らなければ特に問題ない。そういう細かいところは、これから実装されるみたい。→ <a href=\"http://gohugo.io/meta/roadmap/\">Hugo Roadmap</a></p>\n<p>それより WordPress のセキュリティとか、データベースとか、バックアップとか、PHP の記述をミスって画面が白くなる、というストレスから開放されるのが良いと思いました。静的サイトジェネレータだから、当然ですが、記事の読み込みが早くなった。</p>\n<p>それと、ブログを GitHub で管理できるようになりました。</p>\n<ul>\n<li><a href=\"https://github.com/rakuishi/rakuishi.com\">rakuishi/rakuishi.com</a></li>\n</ul>\n",
  "dir": "static/content/archives",
  "base": "2015-01-20-wordpress-to-hugo.json",
  "ext": ".json",
  "sourceBase": "2015-01-20-wordpress-to-hugo.md",
  "sourceExt": ".md"
}