{
  "categories": [
    "SQLite"
  ],
  "date": "2012-10-14T13:51:35.000Z",
  "draft": false,
  "slug": 4535,
  "title": "SQLite3 をターミナルから操作する。データベースの作成から CSV ファイルのインポートまで",
  "bodyContent": "小さくて動作の早い SQLite というデータベースが iOS アプリでよく使われています。データベースを使用するアプリを書いてみたいので、SQLite3 を勉強することにしました。\n\nこの記事では、SQLite3 を動作させる手順について書いていきます。\n\n## 事前準備\n\nMac のターミナルには、デフォルトで SQLite がインストールされているので、特別にソフトをインストールする必要はないです。\n\n## コマンドラインプログラムの起動と終了\n\nデスクトップにある sqlite フォルダに移動。test.sqlite という名前の新規データベースファイルを指定して起動（フォルダに存在していれば、そのファイルを扱う）。コマンドラインの終了。\n\n```\n$ cd Desktop/sqlite\n$ sqlite3 test.sqlite\nsqlite> .exit\n```\n\n上記のコマンドでデータベースファイルがフォルダの中に作成されると思ったのですが、コマンドが入力されるまでデータベースファイルは作成されない模様。\n\n例えば、現在使用中のデータベースファイルを表示する「.database」命令を実行すれば、データベースファイルが作成されます。\n\n```\nsqlite> .database\nseq  name             file                                                      \n---  ---------------  ----------------------------------------------------------\n0    main             /Users/***/Desktop/sqlite/test.sqlite \n```\n\n## テーブルを作成してデータを入力する\n\nSQL 文を入力する時は、末尾にセミコロンを入力します。\n\nhoge というテーブルを作成し、id と name という名前の2つのカラムを作成。データを入力して、表示。\n\n```\nsqlite> create table hoge (id integer, name varchar(16));\nsqlite> insert into hoge values(1, \"rakuishi\");\nsqlite> select * from hoge;\n1|rakuishi\n```\n\n## CSV ファイルからデータを追加する\n\n次のようなデータを入力した「test.csv」ファイル（UTF-8, LF）を作成して、同じ sqlite フォルダに保存します。\n\n**test.csv**\n```\n2,rakuiso\n3,rakutaro\n```\n\nこのファイルを作成したデータベースにインポートします。CSV ファイルは、カンマ区切りなのでデータの区切り記号を「,」に設定。test.csv ファイルを hoge テーブルにインポートしています。\n\n```\nsqlite> .separator ,\nsqlite> .import ./test.csv hoge\nsqlite> select * from hoge;\n1,rakuishi\n2,rakuiso\n3,rakutaro\n```\n\n{{<amazon id=\"4797354739\" title=\"新標準SQLite (オープンソースRDBMSシリーズ)\" src=\"https://images-na.ssl-images-amazon.com/images/I/51w28k89iJL._SL160_.jpg\">}}",
  "bodyHtml": "<p>小さくて動作の早い SQLite というデータベースが iOS アプリでよく使われています。データベースを使用するアプリを書いてみたいので、SQLite3 を勉強することにしました。</p>\n<p>この記事では、SQLite3 を動作させる手順について書いていきます。</p>\n<h2>事前準備</h2>\n<p>Mac のターミナルには、デフォルトで SQLite がインストールされているので、特別にソフトをインストールする必要はないです。</p>\n<h2>コマンドラインプログラムの起動と終了</h2>\n<p>デスクトップにある sqlite フォルダに移動。test.sqlite という名前の新規データベースファイルを指定して起動（フォルダに存在していれば、そのファイルを扱う）。コマンドラインの終了。</p>\n<pre><code>$ cd Desktop/sqlite\n$ sqlite3 test.sqlite\nsqlite&gt; .exit\n</code></pre>\n<p>上記のコマンドでデータベースファイルがフォルダの中に作成されると思ったのですが、コマンドが入力されるまでデータベースファイルは作成されない模様。</p>\n<p>例えば、現在使用中のデータベースファイルを表示する「.database」命令を実行すれば、データベースファイルが作成されます。</p>\n<pre><code>sqlite&gt; .database\nseq  name             file                                                      \n---  ---------------  ----------------------------------------------------------\n0    main             /Users/***/Desktop/sqlite/test.sqlite \n</code></pre>\n<h2>テーブルを作成してデータを入力する</h2>\n<p>SQL 文を入力する時は、末尾にセミコロンを入力します。</p>\n<p>hoge というテーブルを作成し、id と name という名前の2つのカラムを作成。データを入力して、表示。</p>\n<pre><code>sqlite&gt; create table hoge (id integer, name varchar(16));\nsqlite&gt; insert into hoge values(1, &quot;rakuishi&quot;);\nsqlite&gt; select * from hoge;\n1|rakuishi\n</code></pre>\n<h2>CSV ファイルからデータを追加する</h2>\n<p>次のようなデータを入力した「test.csv」ファイル（UTF-8, LF）を作成して、同じ sqlite フォルダに保存します。</p>\n<p><strong>test.csv</strong></p>\n<pre><code>2,rakuiso\n3,rakutaro\n</code></pre>\n<p>このファイルを作成したデータベースにインポートします。CSV ファイルは、カンマ区切りなのでデータの区切り記号を「,」に設定。test.csv ファイルを hoge テーブルにインポートしています。</p>\n<pre><code>sqlite&gt; .separator ,\nsqlite&gt; .import ./test.csv hoge\nsqlite&gt; select * from hoge;\n1,rakuishi\n2,rakuiso\n3,rakutaro\n</code></pre>\n<p>{{&lt;amazon id=&quot;4797354739&quot; title=&quot;新標準SQLite (オープンソースRDBMSシリーズ)&quot; src=&quot;https://images-na.ssl-images-amazon.com/images/I/51w28k89iJL.<em>SL160</em>.jpg&quot;&gt;}}</p>\n",
  "dir": "static/content/archives",
  "base": "2012-10-14-4535.json",
  "ext": ".json",
  "sourceBase": "2012-10-14-4535.md",
  "sourceExt": ".md"
}