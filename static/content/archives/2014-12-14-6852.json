{
  "categories": [
    "Android"
  ],
  "date": "2014-12-14T06:02:44.000Z",
  "draft": false,
  "slug": 6852,
  "title": "[Android] ButterKnife で findViewById, setOnClickListener をシンプルに書く",
  "bodyContent": "レイアウト XML に書いた id を `findViewById` で紐付けたり、ボタンが押されたアクションを使う時に `setOnClickListener` すると、割とコードがごちゃごちゃしてしまう。\n\nそんな時、ビューインジェクションライブラリ [Butter Knife](http://jakewharton.github.io/butterknife/) を使うとシンプルに書けます。この記事では、Butter Knife で出来ることをさくっと紹介します。\n\n## findViewById\n\n以下のように、`@InjectView` して、`onCreate()` 内にて、`ButterKnife.inject()` をすれば、mButton が紐付いた状態になります。`onCreate()` 内で紐付けるよりもぱっと見わかりやすいです。\n\n```\npublic class MainActivity extends Activity {\n\n    @InjectView(R.id.main_button) Button mButton;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        ButterKnife.inject(this);\n    }\n}\n```\n\nFragment で使う場合は、LayoutInflater から View を作る時に、`ButterKnife.inject()` すれば OK です。\n\n```\npublic class MainFragment extends Fragment {\n\n    @InjectView(R.id.main_button) Button mButton;\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View parentView = inflater.inflate(R.layout.fragment_main, container, false);\n        ButterKnife.inject(this, parentView);\n        return parentView;\n    }\n}\n```\n\n## Listener\n\n`setOnClickListener` する時は、以下のように書けます。`findViewById(R.id.button)` してからリスナーを紐付ける面倒な手順を踏む必要はありません。\n\n```\n@OnClick(R.id.button)\nvoid onClickButton(Button button) {\n    // ...\n}\n```\n\n複数のボタンに同じアクションを紐付ける時は、配列形式で宣言できます。このボタン類を `getId()` して処理を分岐する時に使えます。\n\n```\n@OnClick({R.id.button_1, R.id.button_2, R.id.button_3})\nvoid onClickButton(Button button) {\n    // ...\n}\n```\n\nListView が選択された時のリスナーは、次のように書けます。\n\n```\n@OnItemClick(R.id.listview)\nvoid itemClick(AdapterView<?> adapter, View view, int pos, long id) {\n    // ...\n}\n```\n\n## ViewHolder\n\nListView で使う ViewHolder パターンも、Butter Knife を使えば効率的に書けます。\n\n```\npublic class MyAdapter extends BaseAdapter {\n\n    @Override\n    public View getView(int position, View convertView, ViewGroup parent) {\n\n        ViewHolder holder;\n        if (convertView == null) {\n            convertView = mInflater.inflate(R.layout.list_item, parent, false);\n            holder = new ViewHolder(convertView);\n            convertView.setTag(holder);\n        } else {\n            holder = (ViewHolder)convertView.getTag();\n        }\n\n        // ...\n\n        return convertView;\n    }\n\n    static class ViewHolder {\n        @InjectView(R.id.list_item_title)     TextView titleView;\n        @InjectView(R.id.list_item_thumbnail) ImageView thumbnailView;\n\n        public ViewHolder(View view) {\n            ButterKnife.inject(this, view);\n        }\n    }\n}\n```\n\n## Butter Knife の導入方法\n\nAndroid Studio を使っていれば、build.gradle ファイルに一行追加するだけです。\n\n```\ndependencies {\n    compile 'com.jakewharton:butterknife:6.0.0'\n}\n```\n\n## Android Annotation と比べて\n\n以前は、Butter Knife よりも機能が豊富な Android Annotation を使っていたのですが、以下の理由で Butter Knife に乗り換えました。\n\n* 久しぶりに Android Studio で起動したプロジェクトをビルドするときに、高確率でビルドに失敗し、Sync Project with Gradle Files する必要がある。\n* SampleFragment を SampleFragment_ と書く必要がある。\n* Android Annotation が動作する環境を作るのがだるい。→[【Android】ソースコードダイエットのためにAndroidAnnotationsを使おう！導入編](http://blog.yohei.org/android-androidannotations-01/)",
  "bodyHtml": "<p>レイアウト XML に書いた id を <code>findViewById</code> で紐付けたり、ボタンが押されたアクションを使う時に <code>setOnClickListener</code> すると、割とコードがごちゃごちゃしてしまう。</p>\n<p>そんな時、ビューインジェクションライブラリ <a href=\"http://jakewharton.github.io/butterknife/\">Butter Knife</a> を使うとシンプルに書けます。この記事では、Butter Knife で出来ることをさくっと紹介します。</p>\n<h2>findViewById</h2>\n<p>以下のように、<code>@InjectView</code> して、<code>onCreate()</code> 内にて、<code>ButterKnife.inject()</code> をすれば、mButton が紐付いた状態になります。<code>onCreate()</code> 内で紐付けるよりもぱっと見わかりやすいです。</p>\n<pre><code>public class MainActivity extends Activity {\n\n    @InjectView(R.id.main_button) Button mButton;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        ButterKnife.inject(this);\n    }\n}\n</code></pre>\n<p>Fragment で使う場合は、LayoutInflater から View を作る時に、<code>ButterKnife.inject()</code> すれば OK です。</p>\n<pre><code>public class MainFragment extends Fragment {\n\n    @InjectView(R.id.main_button) Button mButton;\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View parentView = inflater.inflate(R.layout.fragment_main, container, false);\n        ButterKnife.inject(this, parentView);\n        return parentView;\n    }\n}\n</code></pre>\n<h2>Listener</h2>\n<p><code>setOnClickListener</code> する時は、以下のように書けます。<code>findViewById(R.id.button)</code> してからリスナーを紐付ける面倒な手順を踏む必要はありません。</p>\n<pre><code>@OnClick(R.id.button)\nvoid onClickButton(Button button) {\n    // ...\n}\n</code></pre>\n<p>複数のボタンに同じアクションを紐付ける時は、配列形式で宣言できます。このボタン類を <code>getId()</code> して処理を分岐する時に使えます。</p>\n<pre><code>@OnClick({R.id.button_1, R.id.button_2, R.id.button_3})\nvoid onClickButton(Button button) {\n    // ...\n}\n</code></pre>\n<p>ListView が選択された時のリスナーは、次のように書けます。</p>\n<pre><code>@OnItemClick(R.id.listview)\nvoid itemClick(AdapterView&lt;?&gt; adapter, View view, int pos, long id) {\n    // ...\n}\n</code></pre>\n<h2>ViewHolder</h2>\n<p>ListView で使う ViewHolder パターンも、Butter Knife を使えば効率的に書けます。</p>\n<pre><code>public class MyAdapter extends BaseAdapter {\n\n    @Override\n    public View getView(int position, View convertView, ViewGroup parent) {\n\n        ViewHolder holder;\n        if (convertView == null) {\n            convertView = mInflater.inflate(R.layout.list_item, parent, false);\n            holder = new ViewHolder(convertView);\n            convertView.setTag(holder);\n        } else {\n            holder = (ViewHolder)convertView.getTag();\n        }\n\n        // ...\n\n        return convertView;\n    }\n\n    static class ViewHolder {\n        @InjectView(R.id.list_item_title)     TextView titleView;\n        @InjectView(R.id.list_item_thumbnail) ImageView thumbnailView;\n\n        public ViewHolder(View view) {\n            ButterKnife.inject(this, view);\n        }\n    }\n}\n</code></pre>\n<h2>Butter Knife の導入方法</h2>\n<p>Android Studio を使っていれば、build.gradle ファイルに一行追加するだけです。</p>\n<pre><code>dependencies {\n    compile 'com.jakewharton:butterknife:6.0.0'\n}\n</code></pre>\n<h2>Android Annotation と比べて</h2>\n<p>以前は、Butter Knife よりも機能が豊富な Android Annotation を使っていたのですが、以下の理由で Butter Knife に乗り換えました。</p>\n<ul>\n<li>久しぶりに Android Studio で起動したプロジェクトをビルドするときに、高確率でビルドに失敗し、Sync Project with Gradle Files する必要がある。</li>\n<li>SampleFragment を SampleFragment_ と書く必要がある。</li>\n<li>Android Annotation が動作する環境を作るのがだるい。→<a href=\"http://blog.yohei.org/android-androidannotations-01/\">【Android】ソースコードダイエットのためにAndroidAnnotationsを使おう！導入編</a></li>\n</ul>\n",
  "dir": "static/content/archives",
  "base": "2014-12-14-6852.json",
  "ext": ".json",
  "sourceBase": "2014-12-14-6852.md",
  "sourceExt": ".md"
}