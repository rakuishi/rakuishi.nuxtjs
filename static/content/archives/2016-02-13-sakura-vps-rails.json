{
  "categories": [
    "Web Service"
  ],
  "date": "2016-02-12T15:23:58.000Z",
  "draft": false,
  "slug": "sakura-vps-rails",
  "title": "さくらの VPS：WEBrick と Unicorn + Nginx で Ruby on Rails の表示まで",
  "bodyContent": "さくらの VPS に Ruby on Rails の環境を導入するまでの手順をまとめました。まずは、Ruby 付属の Web サーバー WEBrick による動作を確認し、その後に Unicorn + Nginx による動作を確認します。\n\n## Create user account\n\nルートユーザーで ssh ログインします。\n\n```bash\n$ ssh root@${id_address}\n```\n\n一般ユーザー apps を追加します。\n\n```bash\n# useradd apps\n# passwd apps\n```\n\n一般ユーザー apps がルート権限で作業できるようにします。\n\n```bash\n# usermod -G wheel apps\n# visudo\n```\n\nコメントアウトされている部分を解除します。`visudo` コマンドを経由して、/etc/sudoers を編集しています。\n\n```sh\n## Allows people in group wheel to run all commands\n%wheel  ALL=(ALL) ALL\n```\n\nルートユーザーでログインできないようにします。\n\n```bash\n# cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bk\n# vim /etc/ssh/sshd_config\n```\n\nコメントアウトされている部分を解除して、`yes` → `no` に変更します。\n\n```sh\nPermitRootLogin no\n```\n\n記述を確認してから `sshd` を再起動します。\n\n```bash\n# /usr/sbin/sshd -t\n# service sshd restart\n```\n\n以降、すべての作業は一般ユーザーでログインした状態のホームディレクトリ /home/apps で作業を行います。\n\n```bash\n# exit\n$ ssh apps@${id_address}\n```\n\nホームディレクトリのパーミッションを 701 に変更します。また、パスワードから鍵認証に切り替えます。鍵を置く場所を作って、作業マシンに戻ります。\n\n```bash\n$ chmod 701 /home/apps/\n$ mkdir .ssh\n$ chmod 700 .ssh/\n$ exit\n```\n\n作業用マシンの公開鍵を送ります。パスワードなしで apps ユーザーでログインできるようになります。\n\n```bash\n$ scp ~/.ssh/id_rsa.pub apps@${id_address}:~/.ssh/authorized_keys\n$ ssh apps@${id_address}\n```\n\n## Installation Firewall\n\n公開するポートを設定します。ssh: 20, http: 80, https: 443, Rails: 3000 を開けています。\n\n```bash\n$ sudo vim /etc/sysconfig/iptables\n```\n\n```sh\n*filter\n:INPUT          DROP    [0:0]\n:FORWARD        DROP    [0:0]\n:OUTPUT         ACCEPT  [0:0]\n:SERVICES       -       [0:0]\n-A INPUT -i lo -j ACCEPT\n-A INPUT -p icmp --icmp-type echo-request -m limit --limit 1/s --limit-burst 4 -j ACCEPT\n-A INPUT -p tcp -m state --state ESTABLISHED,RELATED -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -j SERVICES\n-A INPUT -p udp --sport 53 -j ACCEPT\n-A INPUT -p udp --sport 123 --dport 123 -j ACCEPT\n-A SERVICES -p tcp --dport 22 -j ACCEPT\n-A SERVICES -p tcp --dport 80 -j ACCEPT\n-A SERVICES -p tcp --dport 443 -j ACCEPT\n-A SERVICES -p tcp --dport 3000 -j ACCEPT\nCOMMIT\n```\n\n```bash\n$ sudo service iptables start\n```\n\n## Add deploy key to GitHub repo\n\nGitHub に公開鍵を登録して、レポジトリをクローンします。\n\n```bash\n$ ssh-keygen -t rsa -b 4096 -C \"rakuishi@gmail.com\"\n$ cat .ssh/id_rsa.pub\n$ git clone git@github.com:rakuishi/sakura-vps-rails.git rails\n```\n\nこのサンプルレポジトリには、Unicorn の設定ファイル [config/unicorn.rb](https://github.com/rakuishi/sakura-vps-rails/blob/master/config/unicorn.rb) が含まれています。\n\n```ruby\nAPP_PATH = \"/home/apps/rails\"\n\nworker_processes 4\nworking_directory APP_PATH\nlisten \"/var/run/unicorn/unicorn.socket\"\npid APP_PATH + \"/tmp/pids/unicorn.pid\"\nstderr_path APP_PATH + \"/log/unicorn.log\"\nstdout_path APP_PATH + \"/log/unicorn.log\"\n\npreload_app true\n\nbefore_fork do |server, worker|\n  ActiveRecord::Base.connection.disconnect!\n\n  old_pid = \"#{server.config[:pid]}.oldbin\"\n  if old_pid != server.pid\n    begin\n      sig = (worker.nr + 1) >= server.worker_processes ? :QUIT : :TTOU\n      Process.kill(sig, File.read(old_pid).to_i)\n    rescue Errno::ENOENT, Errno::ESRCH\n    end\n  end\nend\n\nafter_fork do |server, worker|\n  ActiveRecord::Base.establish_connection\nend\n```\n\nlisten で指定している /var/run/unicorn/ を作ります。ちなみに、APP_PATH + /tmp/sockets/ に指定したかったのですが、権限の問題なのかうまく動作しませんでした（要調査）。\n\n```bash\n$ sudo mkdir /var/run/unicorn\n$ sudo chmod 777 /var/run/unicorn/\n```\n\n## Installation Ruby with RVM\n\nRuby, Ruby on Rails に必要なパッケージをインストールします。必要に応じて間引いてください。\n\n```bash\n$ sudo yum clean all\n$ sudo yum install gcc gcc-c++ autoconf make wget git zlib-devel openssl-devel libyaml-devel readline-devel libxml2-devel libxslt-devel libffi-devel sqlite-devel mysql-devel\n```\n\nRuby Version Manager（RVM）をインストールし、RVM を使用するユーザーを rvm グループに追加して、反映するために一度ログアウトします。\n\n```bash\n$ sudo gpg2 --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3\n$ \\curl -L https://get.rvm.io | sudo bash -s stable\n$ sudo usermod -a -G rvm apps\n$ exit\n```\n\nrvm.sh によってパスを通した後に、Ruby 2.2.1 をインストールします。\n\n```bash\n$ source /etc/profile.d/rvm.sh\n$ rvm install 2.2.1\n```\n\nドキュメントをインストールしないように設定します。\n\n```bash\n$ echo \"gem: --no-ri --no-rdoc\" >> ~/.gemrc\n```\n\n`bundle install` し、データベースのマイグレーションを行います。開発環境は development を指定しています。\n\n```bash\n$ cd rails\n$ ./bin/bundle install --path vendor/bundle\n$ ./bin/rake db:migrate RAILS_ENV=development\n$ ./bin/rake db:seed RAILS_ENV=development\n```\n\nRuby on Rails を付属の WEBrick で動かします。http://${id_address}:3000/ から起動が確認できます。\n\n```bash\n$ ./bin/rails s -b 0.0.0.0 -p 3000 -e development\n```\n\n## Unicorn\n\nUnicorn がプロセスとして動作することを確認します。\n\n```bash\n$ gem install unicorn-rails\n$ unicorn_rails -c /home/apps/rails/config/unicorn.rb -E development -D\n$ ps aux | grep unicorn\n```\n\n## Nginx\n\nNginx をインストールして起動し、サーバーが再起動した時に自動で Nginx が立ち上がるように設定します。http://${id_address}/ から Nginx の起動が確認できます。\n\n```bash\n$ sudo yum install nginx\n$ sudo service nginx start\n$ sudo chkconfig nginx on\n```\n\n次に実行されている `unicorn_rails` プロセスを見るように Nginx の設定を変えます。\n\n```bash\n$ sudo mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bk\n$ sudo vim /etc/nginx/conf.d/default.conf\n```\n\n```sh\nupstream unicorn {\n  server unix:/var/run/unicorn/unicorn.socket fail_timeout=0;\n}\n\nserver {\n  listen 80;\n  server_name localhost;\n\n  root /home/apps/rails/public;\n  access_log /var/log/nginx/access.log;\n  error_log /var/log/nginx/error.log;\n  error_page 404 /404.html;\n  error_page 500 502 503 504 /500.html;\n  client_max_body_size 10M;\n\n  try_files $uri $uri/index.html $uri.html @unicorn;\n\n  location @unicorn {\n    proxy_read_timeout 300;\n    proxy_connect_timeout 300;\n    proxy_redirect off;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header Host $http_host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_pass http://unicorn;\n  }\n}\n```\n\n```bash\n$ sudo /etc/init.d/nginx configtest\n$ sudo service nginx reload\n```\n\nhttp://${id_address}/ から Ruby on Rails の起動が確認できます。\n\n## Create init.d script\n\nこの状態だとサーバーを再起動 `sudo reboot` した時に、`unicorn_rails` プロセスが自動で起動されません。自動で起動するように、スクリプトを作成します。\n\n```bash\n$ sudo vim /etc/init.d/unicorn\n```\n\n```sh\n#!/bin/sh\n#\n# unicorn - this script starts and stops the unicorn\n#\n# chkconfig:   3456 85 35\n# description: unicorn\n# processname: unicorn\n\nRAILS_ENV=\"development\"\nUSER=\"apps\"\nAPP_PATH=\"/home/apps/rails\"\nPID=\"${APP_PATH}/tmp/pids/unicorn.pid\"\n\nstart()\n{\n  sudo -u ${USER} bash -login -c \"cd ${APP_PATH} && unicorn_rails -c ${APP_PATH}/config/unicorn.rb -E ${RAILS_ENV} -D\"\n  return 0\n}\n\nstop()\n{\n  if [ ! -e $PID ]; then\n    return 0\n  fi\n  kill -QUIT `cat ${PID}`\n  rm -f $PID\n  return 0\n}\n\ncase \"$1\" in\n  start)\n    start\n    ;;\n  stop)\n    stop\n    ;;\n  restart)\n    stop\n    start\n    ;;\n  *)\n    echo $\"Usage: $0 {start|stop|restart}\"\n    exit 2\nesac\n```\n\n```bash\n$ sudo chmod 755 /etc/init.d/unicorn\n$ sudo chkconfig unicorn on\n```\n\n起動スクリプトから一般ユーザー apps が、`unicorn_rails` プロセスを立ち上げる都合上、root ユーザーは tty 無しの `sudo` を許可するようにします。\n\n```bash\n$ sudo visudo\n```\n\n`Defaults:root !requiretty` を書き換えます。\n\n```sh\n#\n# Disable \"ssh hostname sudo <cmd>\", because it will show the password in clear.\n#         You have to run \"ssh -t hostname sudo <cmd>\".\n#\nDefaults    requiretty\nDefaults:root !requiretty\n```\n\n再起動して Ruby on Rails の起動を確認します。\n\n```bash\nsudo reboot\n```\n\n表示されていたら成功です。",
  "bodyHtml": "<p>さくらの VPS に Ruby on Rails の環境を導入するまでの手順をまとめました。まずは、Ruby 付属の Web サーバー WEBrick による動作を確認し、その後に Unicorn + Nginx による動作を確認します。</p>\n<h2>Create user account</h2>\n<p>ルートユーザーで ssh ログインします。</p>\n<pre><code class=\"hljs\">$ ssh root@<span class=\"hljs-variable\">${id_address}</span></code></pre><p>一般ユーザー apps を追加します。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\"># useradd apps</span>\n<span class=\"hljs-comment\"># passwd apps</span></code></pre><p>一般ユーザー apps がルート権限で作業できるようにします。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\"># usermod -G wheel apps</span>\n<span class=\"hljs-comment\"># visudo</span></code></pre><p>コメントアウトされている部分を解除します。<code>visudo</code> コマンドを経由して、/etc/sudoers を編集しています。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">## Allows people in group wheel to run all commands</span>\n%wheel  ALL=(ALL) ALL</code></pre><p>ルートユーザーでログインできないようにします。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\"># cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bk</span>\n<span class=\"hljs-comment\"># vim /etc/ssh/sshd_config</span></code></pre><p>コメントアウトされている部分を解除して、<code>yes</code> → <code>no</code> に変更します。</p>\n<pre><code class=\"hljs\">PermitRootLogin no</code></pre><p>記述を確認してから <code>sshd</code> を再起動します。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\"># /usr/sbin/sshd -t</span>\n<span class=\"hljs-comment\"># service sshd restart</span></code></pre><p>以降、すべての作業は一般ユーザーでログインした状態のホームディレクトリ /home/apps で作業を行います。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\"># exit</span>\n$ ssh apps@<span class=\"hljs-variable\">${id_address}</span></code></pre><p>ホームディレクトリのパーミッションを 701 に変更します。また、パスワードから鍵認証に切り替えます。鍵を置く場所を作って、作業マシンに戻ります。</p>\n<pre><code class=\"hljs\">$ chmod 701 /home/apps/\n$ mkdir .ssh\n$ chmod 700 .ssh/\n$ <span class=\"hljs-built_in\">exit</span></code></pre><p>作業用マシンの公開鍵を送ります。パスワードなしで apps ユーザーでログインできるようになります。</p>\n<pre><code class=\"hljs\">$ scp ~/.ssh/id_rsa.pub apps@<span class=\"hljs-variable\">${id_address}</span>:~/.ssh/authorized_keys\n$ ssh apps@<span class=\"hljs-variable\">${id_address}</span></code></pre><h2>Installation Firewall</h2>\n<p>公開するポートを設定します。ssh: 20, http: 80, https: 443, Rails: 3000 を開けています。</p>\n<pre><code class=\"hljs\">$ sudo vim /etc/sysconfig/iptables</code></pre><pre><code class=\"hljs\">*filter\n:INPUT          DROP    [0:0]\n:FORWARD        DROP    [0:0]\n:OUTPUT         ACCEPT  [0:0]\n:SERVICES       -       [0:0]\n-A INPUT -i lo -j ACCEPT\n-A INPUT -p icmp --icmp-type <span class=\"hljs-built_in\">echo</span>-request -m <span class=\"hljs-built_in\">limit</span> --<span class=\"hljs-built_in\">limit</span> 1/s --<span class=\"hljs-built_in\">limit</span>-burst 4 -j ACCEPT\n-A INPUT -p tcp -m state --state ESTABLISHED,RELATED -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -j SERVICES\n-A INPUT -p udp --sport 53 -j ACCEPT\n-A INPUT -p udp --sport 123 --dport 123 -j ACCEPT\n-A SERVICES -p tcp --dport 22 -j ACCEPT\n-A SERVICES -p tcp --dport 80 -j ACCEPT\n-A SERVICES -p tcp --dport 443 -j ACCEPT\n-A SERVICES -p tcp --dport 3000 -j ACCEPT\nCOMMIT</code></pre><pre><code class=\"hljs\">$ sudo service iptables start</code></pre><h2>Add deploy key to GitHub repo</h2>\n<p>GitHub に公開鍵を登録して、レポジトリをクローンします。</p>\n<pre><code class=\"hljs\">$ ssh-keygen -t rsa -b 4096 -C <span class=\"hljs-string\">\"rakuishi@gmail.com\"</span>\n$ cat .ssh/id_rsa.pub\n$ git <span class=\"hljs-built_in\">clone</span> git@github.com:rakuishi/sakura-vps-rails.git rails</code></pre><p>このサンプルレポジトリには、Unicorn の設定ファイル <a href=\"https://github.com/rakuishi/sakura-vps-rails/blob/master/config/unicorn.rb\">config/unicorn.rb</a> が含まれています。</p>\n<pre><code class=\"hljs\">APP_PATH = <span class=\"hljs-string\">\"/home/apps/rails\"</span>\n\nworker_processes <span class=\"hljs-number\">4</span>\nworking_directory APP_PATH\nlisten <span class=\"hljs-string\">\"/var/run/unicorn/unicorn.socket\"</span>\npid APP_PATH + <span class=\"hljs-string\">\"/tmp/pids/unicorn.pid\"</span>\nstderr_path APP_PATH + <span class=\"hljs-string\">\"/log/unicorn.log\"</span>\nstdout_path APP_PATH + <span class=\"hljs-string\">\"/log/unicorn.log\"</span>\n\npreload_app <span class=\"hljs-literal\">true</span>\n\nbefore_fork <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|server, worker|</span>\n  ActiveRecord::Base.connection.disconnect!\n\n  old_pid = <span class=\"hljs-string\">\"<span class=\"hljs-subst\">#{server.config[<span class=\"hljs-symbol\">:pid</span>]}</span>.oldbin\"</span>\n  <span class=\"hljs-keyword\">if</span> old_pid != server.pid\n    <span class=\"hljs-keyword\">begin</span>\n      sig = (worker.nr + <span class=\"hljs-number\">1</span>) &gt;= server.worker_processes ? <span class=\"hljs-symbol\">:QUIT</span> : <span class=\"hljs-symbol\">:TTOU</span>\n      Process.kill(sig, File.read(old_pid).to_i)\n    <span class=\"hljs-keyword\">rescue</span> Errno::ENOENT, Errno::ESRCH\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\nafter_fork <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|server, worker|</span>\n  ActiveRecord::Base.establish_connection\n<span class=\"hljs-keyword\">end</span></code></pre><p>listen で指定している /var/run/unicorn/ を作ります。ちなみに、APP_PATH + /tmp/sockets/ に指定したかったのですが、権限の問題なのかうまく動作しませんでした（要調査）。</p>\n<pre><code class=\"hljs\">$ sudo mkdir /var/run/unicorn\n$ sudo chmod 777 /var/run/unicorn/</code></pre><h2>Installation Ruby with RVM</h2>\n<p>Ruby, Ruby on Rails に必要なパッケージをインストールします。必要に応じて間引いてください。</p>\n<pre><code class=\"hljs\">$ sudo yum clean all\n$ sudo yum install gcc gcc-c++ autoconf make wget git zlib-devel openssl-devel libyaml-devel readline-devel libxml2-devel libxslt-devel libffi-devel sqlite-devel mysql-devel</code></pre><p>Ruby Version Manager（RVM）をインストールし、RVM を使用するユーザーを rvm グループに追加して、反映するために一度ログアウトします。</p>\n<pre><code class=\"hljs\">$ sudo gpg2 --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3\n$ \\curl -L https://get.rvm.io | sudo bash -s stable\n$ sudo usermod -a -G rvm apps\n$ <span class=\"hljs-built_in\">exit</span></code></pre><p>rvm.sh によってパスを通した後に、Ruby 2.2.1 をインストールします。</p>\n<pre><code class=\"hljs\">$ <span class=\"hljs-built_in\">source</span> /etc/profile.d/rvm.sh\n$ rvm install 2.2.1</code></pre><p>ドキュメントをインストールしないように設定します。</p>\n<pre><code class=\"hljs\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"gem: --no-ri --no-rdoc\"</span> &gt;&gt; ~/.gemrc</code></pre><p><code>bundle install</code> し、データベースのマイグレーションを行います。開発環境は development を指定しています。</p>\n<pre><code class=\"hljs\">$ <span class=\"hljs-built_in\">cd</span> rails\n$ ./bin/bundle install --path vendor/bundle\n$ ./bin/rake db:migrate RAILS_ENV=development\n$ ./bin/rake db:seed RAILS_ENV=development</code></pre><p>Ruby on Rails を付属の WEBrick で動かします。http://${id_address}:3000/ から起動が確認できます。</p>\n<pre><code class=\"hljs\">$ ./bin/rails s -b 0.0.0.0 -p 3000 -e development</code></pre><h2>Unicorn</h2>\n<p>Unicorn がプロセスとして動作することを確認します。</p>\n<pre><code class=\"hljs\">$ gem install unicorn-rails\n$ unicorn_rails -c /home/apps/rails/config/unicorn.rb -E development -D\n$ ps aux | grep unicorn</code></pre><h2>Nginx</h2>\n<p>Nginx をインストールして起動し、サーバーが再起動した時に自動で Nginx が立ち上がるように設定します。http://${id_address}/ から Nginx の起動が確認できます。</p>\n<pre><code class=\"hljs\">$ sudo yum install nginx\n$ sudo service nginx start\n$ sudo chkconfig nginx on</code></pre><p>次に実行されている <code>unicorn_rails</code> プロセスを見るように Nginx の設定を変えます。</p>\n<pre><code class=\"hljs\">$ sudo mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bk\n$ sudo vim /etc/nginx/conf.d/default.conf</code></pre><pre><code class=\"hljs\">upstream unicorn {\n  server unix:/var/run/unicorn/unicorn.socket fail_timeout=0;\n}\n\nserver {\n  listen 80;\n  server_name localhost;\n\n  root /home/apps/rails/public;\n  access_log /var/<span class=\"hljs-built_in\">log</span>/nginx/access.log;\n  error_log /var/<span class=\"hljs-built_in\">log</span>/nginx/error.log;\n  error_page 404 /404.html;\n  error_page 500 502 503 504 /500.html;\n  client_max_body_size 10M;\n\n  try_files <span class=\"hljs-variable\">$uri</span> <span class=\"hljs-variable\">$uri</span>/index.html <span class=\"hljs-variable\">$uri</span>.html @unicorn;\n\n  location @unicorn {\n    proxy_read_timeout 300;\n    proxy_connect_timeout 300;\n    proxy_redirect off;\n    proxy_set_header X-Forwarded-Proto <span class=\"hljs-variable\">$scheme</span>;\n    proxy_set_header X-Forwarded-For <span class=\"hljs-variable\">$proxy_add_x_forwarded_for</span>;\n    proxy_set_header Host <span class=\"hljs-variable\">$http_host</span>;\n    proxy_set_header X-Real-IP <span class=\"hljs-variable\">$remote_addr</span>;\n    proxy_pass http://unicorn;\n  }\n}</code></pre><pre><code class=\"hljs\">$ sudo /etc/init.d/nginx configtest\n$ sudo service nginx reload</code></pre><p>http://${id_address}/ から Ruby on Rails の起動が確認できます。</p>\n<h2>Create init.d script</h2>\n<p>この状態だとサーバーを再起動 <code>sudo reboot</code> した時に、<code>unicorn_rails</code> プロセスが自動で起動されません。自動で起動するように、スクリプトを作成します。</p>\n<pre><code class=\"hljs\">$ sudo vim /etc/init.d/unicorn</code></pre><pre><code class=\"hljs\"><span class=\"hljs-meta\">#!/bin/sh</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># unicorn - this script starts and stops the unicorn</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># chkconfig:   3456 85 35</span>\n<span class=\"hljs-comment\"># description: unicorn</span>\n<span class=\"hljs-comment\"># processname: unicorn</span>\n\nRAILS_ENV=<span class=\"hljs-string\">\"development\"</span>\nUSER=<span class=\"hljs-string\">\"apps\"</span>\nAPP_PATH=<span class=\"hljs-string\">\"/home/apps/rails\"</span>\nPID=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${APP_PATH}</span>/tmp/pids/unicorn.pid\"</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">start</span></span>()\n{\n  sudo -u <span class=\"hljs-variable\">${USER}</span> bash -login -c <span class=\"hljs-string\">\"cd <span class=\"hljs-variable\">${APP_PATH}</span> &amp;&amp; unicorn_rails -c <span class=\"hljs-variable\">${APP_PATH}</span>/config/unicorn.rb -E <span class=\"hljs-variable\">${RAILS_ENV}</span> -D\"</span>\n  <span class=\"hljs-built_in\">return</span> 0\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">stop</span></span>()\n{\n  <span class=\"hljs-keyword\">if</span> [ ! -e <span class=\"hljs-variable\">$PID</span> ]; <span class=\"hljs-keyword\">then</span>\n    <span class=\"hljs-built_in\">return</span> 0\n  <span class=\"hljs-keyword\">fi</span>\n  <span class=\"hljs-built_in\">kill</span> -QUIT `cat <span class=\"hljs-variable\">${PID}</span>`\n  rm -f <span class=\"hljs-variable\">$PID</span>\n  <span class=\"hljs-built_in\">return</span> 0\n}\n\n<span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>\"</span> <span class=\"hljs-keyword\">in</span>\n  start)\n    start\n    ;;\n  stop)\n    stop\n    ;;\n  restart)\n    stop\n    start\n    ;;\n  *)\n    <span class=\"hljs-built_in\">echo</span> $<span class=\"hljs-string\">\"Usage: <span class=\"hljs-variable\">$0</span> {start|stop|restart}\"</span>\n    <span class=\"hljs-built_in\">exit</span> 2\n<span class=\"hljs-keyword\">esac</span></code></pre><pre><code class=\"hljs\">$ sudo chmod 755 /etc/init.d/unicorn\n$ sudo chkconfig unicorn on</code></pre><p>起動スクリプトから一般ユーザー apps が、<code>unicorn_rails</code> プロセスを立ち上げる都合上、root ユーザーは tty 無しの <code>sudo</code> を許可するようにします。</p>\n<pre><code class=\"hljs\">$ sudo visudo</code></pre><p><code>Defaults:root !requiretty</code> を書き換えます。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Disable \"ssh hostname sudo &lt;cmd&gt;\", because it will show the password in clear.</span>\n<span class=\"hljs-comment\">#         You have to run \"ssh -t hostname sudo &lt;cmd&gt;\".</span>\n<span class=\"hljs-comment\">#</span>\nDefaults    requiretty\nDefaults:root !requiretty</code></pre><p>再起動して Ruby on Rails の起動を確認します。</p>\n<pre><code class=\"hljs\">sudo reboot</code></pre><p>表示されていたら成功です。</p>\n",
  "dir": "static/content/archives",
  "base": "2016-02-13-sakura-vps-rails.json",
  "ext": ".json",
  "sourceBase": "2016-02-13-sakura-vps-rails.md",
  "sourceExt": ".md"
}