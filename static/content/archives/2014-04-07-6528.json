{
  "categories": [
    "CSS"
  ],
  "date": "2014-04-07T13:47:23.000Z",
  "draft": false,
  "slug": 6528,
  "title": "Compass を使用して CSS スプライトを作成する",
  "bodyContent": "HTTP リクエストを減らすポピュラーな方法として CSS スプライトがあります。個別の画像をひとつの画像にまとめて、座標を指定することで個別の画像として見せる手法です。\n\n小さい画像を複数読み込むより、ひとつの大きな画像を読み込むほうが、すべての画像を表示するまでのスピードが圧倒的に早くなります。これは、たくさんの画像を読み込む時の通信の待ち時間が馬鹿にならないことに起因しています。\n\nそのように CSS スプライトは優れた方法ですが、実際に手作業で CSS スプライトをすると大変です（ボタンの通常時／ハイライト時ぐらいなら簡単ですが）。そこで Compass を使用して手軽にスプライトを行ってみます。\n\n## Compass を使用してスプライトを行う\n\nSass と Compass がインストールされていることを前提にお話します。インストール方法は、[前回の記事](http://rakuishi.com/archives/6519)に書きました。\n\nCSS スプライトを作成する手順は、以下となります。\n\n1. スプライト化する画像をまとめたフォルダを適当な場所に置く\n1. スプライトするように Compass に指示する\n1. コンパイルする\n\n## 1. スプライト化する画像を置く\n\nまずは、`compass create プロジェクト名` で新しくプロジェクトを作成します。\n\nsass, stylesheets フォルダと同時に作成された config.rb を確認して、プロジェクトの画像フォルダ名を確認します。初期設定では、次のように images が指定されています。素直にこの名前を使うことにします。\n\n```\nimages_dir = \"images\"\n```\n\nimages フォルダを作成し、そこに新しく icon フォルダを作成して、ここに CSS スプライトに使用したい PNG ファイルを置きます。\n\n![](/images/2014/04/6528_1.png)\n\n## 2. スプライトするように指示する\n\nsass/screen.scss を開いて次の内容を記述します。2行目と3行目に登場する `icon` は、先程作成したフォルダ名となります。フォルダ名と一致するように気を使う必要があります。\n\n```\n@import \"compass/utilities/sprites\";\n@import \"icon/*.png\";\n@include all-icon-sprites;\n```\n\n## 3. コンパイルする\n\n`compass compile` すれば、次のように画像が生成されます。これがスプライト化された画像になります。\n\n```\n   create images/icon-s10dc22d201.png\n```\n\nこのスプライト画像を利用するには、stylesheets/screen.css に生成されたクラスを見るのがわかりやすいです。\n\n```\n.icon-sprite, .icon-about, .icon-appicon-postalcode, .icon-appicon-quicka2, .icon-facebook, .icon-logo, .icon-quicka2, .icon-twitter {\n  background: url('/images/icon-s10dc22d201.png') no-repeat;\n}\n\n.icon-about {\n  background-position: 0 0;\n}\n\n/* 省略 */\n```\n\n実際に、作業環境のルートディレクトリに index.html を作成して次のように書けば、CSS スプライトを利用できます。\n\n```\n<!DOCTYPE>\n<html lang=\"ja\">\n<head>\n<meta charset=\"utf-8\">\n<title></title>\n<link href=\"stylesheets/screen.css\" rel=\"stylesheet\" type=\"text/css\" />\n</head>\n<body>\n<div class=\"icon-about\" style=\"width: 48px; height: 48px;\"></div>\n</body>\n</html>\n```\n\nただし、2点注意しておく必要があります。\n\n1. screen.css で指定された画像フォルダの位置が異なる\n1. 画像ファイルの縦横を指定する必要がある\n\n1 は、config.rb でコメントアウトされている以下の記述を有効にしてコンパイルすれば OK です。相対パスで出力されるようになります。\n\n```\nrelative_assets = true\n```\n\n2 は、この場合は、index.html から画像ファイルの持っている縦横を指定していますが、もちろん好ましくありません。これを回避出来るように、Compass では、画像名を受け取ってその画像の縦横を計算してくれる仕組みがあります。その仕組みを次の記事で書けたらと思います。後、retina 画像にも対応させたいです（切実）。\n\n## 参考\n\n{{<amazon id=\"4798132446\" title=\"Sass&Compass徹底入門 CSSのベストプラクティスを効率よく実現するために (DESIGN & WEB TECHNOLOGY)\" src=\"https://images-na.ssl-images-amazon.com/images/I/51aeeQBbfhL._SL160_.jpg\">}}",
  "bodyHtml": "<p>HTTP リクエストを減らすポピュラーな方法として CSS スプライトがあります。個別の画像をひとつの画像にまとめて、座標を指定することで個別の画像として見せる手法です。</p>\n<p>小さい画像を複数読み込むより、ひとつの大きな画像を読み込むほうが、すべての画像を表示するまでのスピードが圧倒的に早くなります。これは、たくさんの画像を読み込む時の通信の待ち時間が馬鹿にならないことに起因しています。</p>\n<p>そのように CSS スプライトは優れた方法ですが、実際に手作業で CSS スプライトをすると大変です（ボタンの通常時／ハイライト時ぐらいなら簡単ですが）。そこで Compass を使用して手軽にスプライトを行ってみます。</p>\n<h2>Compass を使用してスプライトを行う</h2>\n<p>Sass と Compass がインストールされていることを前提にお話します。インストール方法は、<a href=\"http://rakuishi.com/archives/6519\">前回の記事</a>に書きました。</p>\n<p>CSS スプライトを作成する手順は、以下となります。</p>\n<ol>\n<li>スプライト化する画像をまとめたフォルダを適当な場所に置く</li>\n<li>スプライトするように Compass に指示する</li>\n<li>コンパイルする</li>\n</ol>\n<h2>1. スプライト化する画像を置く</h2>\n<p>まずは、<code>compass create プロジェクト名</code> で新しくプロジェクトを作成します。</p>\n<p>sass, stylesheets フォルダと同時に作成された config.rb を確認して、プロジェクトの画像フォルダ名を確認します。初期設定では、次のように images が指定されています。素直にこの名前を使うことにします。</p>\n<pre><code>images_dir = &quot;images&quot;\n</code></pre>\n<p>images フォルダを作成し、そこに新しく icon フォルダを作成して、ここに CSS スプライトに使用したい PNG ファイルを置きます。</p>\n<p><img src=\"/images/2014/04/6528_1.png\" alt=\"\"></p>\n<h2>2. スプライトするように指示する</h2>\n<p>sass/screen.scss を開いて次の内容を記述します。2行目と3行目に登場する <code>icon</code> は、先程作成したフォルダ名となります。フォルダ名と一致するように気を使う必要があります。</p>\n<pre><code>@import &quot;compass/utilities/sprites&quot;;\n@import &quot;icon/*.png&quot;;\n@include all-icon-sprites;\n</code></pre>\n<h2>3. コンパイルする</h2>\n<p><code>compass compile</code> すれば、次のように画像が生成されます。これがスプライト化された画像になります。</p>\n<pre><code>   create images/icon-s10dc22d201.png\n</code></pre>\n<p>このスプライト画像を利用するには、stylesheets/screen.css に生成されたクラスを見るのがわかりやすいです。</p>\n<pre><code>.icon-sprite, .icon-about, .icon-appicon-postalcode, .icon-appicon-quicka2, .icon-facebook, .icon-logo, .icon-quicka2, .icon-twitter {\n  background: url('/images/icon-s10dc22d201.png') no-repeat;\n}\n\n.icon-about {\n  background-position: 0 0;\n}\n\n/* 省略 */\n</code></pre>\n<p>実際に、作業環境のルートディレクトリに index.html を作成して次のように書けば、CSS スプライトを利用できます。</p>\n<pre><code>&lt;!DOCTYPE&gt;\n&lt;html lang=&quot;ja&quot;&gt;\n&lt;head&gt;\n&lt;meta charset=&quot;utf-8&quot;&gt;\n&lt;title&gt;&lt;/title&gt;\n&lt;link href=&quot;stylesheets/screen.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class=&quot;icon-about&quot; style=&quot;width: 48px; height: 48px;&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>ただし、2点注意しておく必要があります。</p>\n<ol>\n<li>screen.css で指定された画像フォルダの位置が異なる</li>\n<li>画像ファイルの縦横を指定する必要がある</li>\n</ol>\n<p>1 は、config.rb でコメントアウトされている以下の記述を有効にしてコンパイルすれば OK です。相対パスで出力されるようになります。</p>\n<pre><code>relative_assets = true\n</code></pre>\n<p>2 は、この場合は、index.html から画像ファイルの持っている縦横を指定していますが、もちろん好ましくありません。これを回避出来るように、Compass では、画像名を受け取ってその画像の縦横を計算してくれる仕組みがあります。その仕組みを次の記事で書けたらと思います。後、retina 画像にも対応させたいです（切実）。</p>\n<h2>参考</h2>\n<p>{{&lt;amazon id=&quot;4798132446&quot; title=&quot;Sass&amp;Compass徹底入門 CSSのベストプラクティスを効率よく実現するために (DESIGN &amp; WEB TECHNOLOGY)&quot; src=&quot;https://images-na.ssl-images-amazon.com/images/I/51aeeQBbfhL.<em>SL160</em>.jpg&quot;&gt;}}</p>\n",
  "dir": "static/content/archives",
  "base": "2014-04-07-6528.json",
  "ext": ".json",
  "sourceBase": "2014-04-07-6528.md",
  "sourceExt": ".md"
}