{
  "categories": [
    "Android"
  ],
  "date": "2014-06-22T00:54:38.000Z",
  "draft": false,
  "slug": 6676,
  "title": "[Android] GridView を使って要素をグリッドで表示する",
  "bodyContent": "`GridView` は、その名の通り、要素をグリッド（タイル）で表示するコンポーネントです。iOS でいう `UICollectionView` に当たります。基本的な使い方は、`ListView` と同じで `Adapter` をセットして使います。\n\n今回は、`GridView` をポートレイト/ランドスケープのどちらでも綺麗に配置する方法を紹介します。\n\n## GridView\n\n### activity_main.xml\n\n`GridView` の設定をレイアウトファイルに書いていきます。\n\n`numColumns=\"auto_fit\"` とすれば、端末の横幅に応じてグリッド数が可変します。こちらが意識することなく、ポートレイト/ランドスケープのどちらでも勝手にグリッド数を計算してくれます。また、`stretchMode=\"columnWidth\"` は、デバイス横幅 - グリッド横幅 x グリッド数で余ったスペースをいい感じに取り扱ってくれます：\n\n```\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  xmlns:tools=\"http://schemas.android.com/tools\"\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  android:paddingTop=\"8dp\"\n  android:orientation=\"vertical\"\n  tools:context=\"com.rakuishi.gridview.MainActivity\">\n\n  <GridView\n    android:id=\"@+id/gridview\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:columnWidth=\"100dp\"\n    android:minHeight=\"100dp\"\n    android:numColumns=\"auto_fit\"\n    android:verticalSpacing=\"8dp\"\n    android:horizontalSpacing=\"8dp\"\n    android:stretchMode=\"columnWidth\"\n    android:gravity=\"center\"/>\n\n</LinearLayout>\n```\n\n### MainActivity.java\n\n`GridView` を探し、それに `Adapter` をセットしています：\n\n```\npackage com.rakuishi.gridview;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.widget.GridView;\n\npublic class MainActivity extends Activity {\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\n    GridView gridView = (GridView)findViewById(R.id.gridview);\n    gridView.setAdapter(new HueAdapter(this));\n  }\n}\n```\n\n### grid_item_hue.xml\n\n`GridView` で表示する個々のグリッドを記述します。今回は、`ImageView` と `TextView` にそれぞれ `id` を紐付けて縦に並べました：\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  android:layout_width=\"100dp\"\n  android:layout_height=\"100dp\">\n\n  <ImageView\n    android:id=\"@+id/hue_imageview\"\n    android:layout_width=\"80dp\"\n    android:layout_height=\"80dp\"\n    android:layout_centerHorizontal=\"true\"\n    android:layout_marginBottom=\"4dp\"\n    android:background=\"#000000\"/>\n\n  <TextView\n    android:id=\"@+id/hue_textview\"\n    android:layout_width=\"80dp\"\n    android:layout_height=\"16dp\"\n    android:text=\"000000\"\n    android:textSize=\"14dp\"\n    android:gravity=\"center_horizontal\"\n    android:layout_below=\"@id/hue_imageview\"\n    android:layout_centerHorizontal=\"true\"/>\n\n</RelativeLayout>\n```\n\n### HueAdapter.java\n\n`BaseAdapter` の必須メソッドを記述し、`getView()` でグリッドの中身（grid_item_hue）を紐付けます。`ListView` での `Adapter` の取り扱いと同じです：\n\n```\npackage com.rakuishi.gridview;\n\nimport android.content.Context;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.BaseAdapter;\nimport android.widget.ImageView;\nimport android.widget.TextView;\n\n/**\n * Created by rakuishi on 6/22/14.\n */\npublic class HueAdapter extends BaseAdapter {\n\n  private Context mContext;\n  private LayoutInflater mLayoutInflater;\n  private String[] mHueArray = {\n    \"FF4040\", \"FFCF40\", \"9FFF40\", \"40FF6F\",\n    \"40FFFF\", \"406FFF\", \"9F40FF\", \"FF40CF\"\n  };\n  private Integer[] mHueIdArray = {\n    R.drawable.hue_ff4040,\n    R.drawable.hue_ffcf40,\n    R.drawable.hue_9fff40,\n    R.drawable.hue_40ff6f,\n    R.drawable.hue_40ffff,\n    R.drawable.hue_406fff,\n    R.drawable.hue_9f40ff,\n    R.drawable.hue_ff40cf,\n  };\n  private static class ViewHolder {\n    public ImageView hueImageView;\n    public TextView  hueTextView;\n  }\n\n  public HueAdapter(Context context) {\n    mContext = context;\n    mLayoutInflater = LayoutInflater.from(context);\n  }\n\n  public int getCount() {\n    return mHueArray.length;\n  }\n\n  public Object getItem(int position) {\n    return mHueArray[position];\n  }\n\n  public long getItemId(int position) {\n    return position;\n  }\n\n  public View getView(int position, View convertView, ViewGroup parent) {\n\n    ViewHolder holder;\n    if (convertView == null) {\n      convertView = mLayoutInflater.inflate(R.layout.grid_item_hue, null);\n      holder = new ViewHolder();\n      holder.hueImageView = (ImageView)convertView.findViewById(R.id.hue_imageview);\n      holder.hueTextView = (TextView)convertView.findViewById(R.id.hue_textview);\n      convertView.setTag(holder);\n    } else {\n      holder = (ViewHolder)convertView.getTag();\n    }\n\n    holder.hueImageView.setImageResource(mHueIdArray[position]);\n    holder.hueTextView.setText(mHueArray[position]);\n\n    return convertView;\n  }\n}\n```\n\n## 実行結果\n\nポートレイト/ランドスケープそれぞれ最大で配置できるグリッド数が配置されているのが分かります。\n\n![](/images/2014/06/6676_1.png)\n\n![](/images/2014/06/6676_2.png)",
  "bodyHtml": "<p><code>GridView</code> は、その名の通り、要素をグリッド（タイル）で表示するコンポーネントです。iOS でいう <code>UICollectionView</code> に当たります。基本的な使い方は、<code>ListView</code> と同じで <code>Adapter</code> をセットして使います。</p>\n<p>今回は、<code>GridView</code> をポートレイト/ランドスケープのどちらでも綺麗に配置する方法を紹介します。</p>\n<h2>GridView</h2>\n<h3>activity_main.xml</h3>\n<p><code>GridView</code> の設定をレイアウトファイルに書いていきます。</p>\n<p><code>numColumns=&quot;auto_fit&quot;</code> とすれば、端末の横幅に応じてグリッド数が可変します。こちらが意識することなく、ポートレイト/ランドスケープのどちらでも勝手にグリッド数を計算してくれます。また、<code>stretchMode=&quot;columnWidth&quot;</code> は、デバイス横幅 - グリッド横幅 x グリッド数で余ったスペースをいい感じに取り扱ってくれます：</p>\n<pre><code>&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n  xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n  android:layout_width=&quot;match_parent&quot;\n  android:layout_height=&quot;match_parent&quot;\n  android:paddingTop=&quot;8dp&quot;\n  android:orientation=&quot;vertical&quot;\n  tools:context=&quot;com.rakuishi.gridview.MainActivity&quot;&gt;\n\n  &lt;GridView\n    android:id=&quot;@+id/gridview&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    android:columnWidth=&quot;100dp&quot;\n    android:minHeight=&quot;100dp&quot;\n    android:numColumns=&quot;auto_fit&quot;\n    android:verticalSpacing=&quot;8dp&quot;\n    android:horizontalSpacing=&quot;8dp&quot;\n    android:stretchMode=&quot;columnWidth&quot;\n    android:gravity=&quot;center&quot;/&gt;\n\n&lt;/LinearLayout&gt;\n</code></pre>\n<h3>MainActivity.java</h3>\n<p><code>GridView</code> を探し、それに <code>Adapter</code> をセットしています：</p>\n<pre><code>package com.rakuishi.gridview;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.widget.GridView;\n\npublic class MainActivity extends Activity {\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\n    GridView gridView = (GridView)findViewById(R.id.gridview);\n    gridView.setAdapter(new HueAdapter(this));\n  }\n}\n</code></pre>\n<h3>grid_item_hue.xml</h3>\n<p><code>GridView</code> で表示する個々のグリッドを記述します。今回は、<code>ImageView</code> と <code>TextView</code> にそれぞれ <code>id</code> を紐付けて縦に並べました：</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n  android:layout_width=&quot;100dp&quot;\n  android:layout_height=&quot;100dp&quot;&gt;\n\n  &lt;ImageView\n    android:id=&quot;@+id/hue_imageview&quot;\n    android:layout_width=&quot;80dp&quot;\n    android:layout_height=&quot;80dp&quot;\n    android:layout_centerHorizontal=&quot;true&quot;\n    android:layout_marginBottom=&quot;4dp&quot;\n    android:background=&quot;#000000&quot;/&gt;\n\n  &lt;TextView\n    android:id=&quot;@+id/hue_textview&quot;\n    android:layout_width=&quot;80dp&quot;\n    android:layout_height=&quot;16dp&quot;\n    android:text=&quot;000000&quot;\n    android:textSize=&quot;14dp&quot;\n    android:gravity=&quot;center_horizontal&quot;\n    android:layout_below=&quot;@id/hue_imageview&quot;\n    android:layout_centerHorizontal=&quot;true&quot;/&gt;\n\n&lt;/RelativeLayout&gt;\n</code></pre>\n<h3>HueAdapter.java</h3>\n<p><code>BaseAdapter</code> の必須メソッドを記述し、<code>getView()</code> でグリッドの中身（grid_item_hue）を紐付けます。<code>ListView</code> での <code>Adapter</code> の取り扱いと同じです：</p>\n<pre><code>package com.rakuishi.gridview;\n\nimport android.content.Context;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.BaseAdapter;\nimport android.widget.ImageView;\nimport android.widget.TextView;\n\n/**\n * Created by rakuishi on 6/22/14.\n */\npublic class HueAdapter extends BaseAdapter {\n\n  private Context mContext;\n  private LayoutInflater mLayoutInflater;\n  private String[] mHueArray = {\n    &quot;FF4040&quot;, &quot;FFCF40&quot;, &quot;9FFF40&quot;, &quot;40FF6F&quot;,\n    &quot;40FFFF&quot;, &quot;406FFF&quot;, &quot;9F40FF&quot;, &quot;FF40CF&quot;\n  };\n  private Integer[] mHueIdArray = {\n    R.drawable.hue_ff4040,\n    R.drawable.hue_ffcf40,\n    R.drawable.hue_9fff40,\n    R.drawable.hue_40ff6f,\n    R.drawable.hue_40ffff,\n    R.drawable.hue_406fff,\n    R.drawable.hue_9f40ff,\n    R.drawable.hue_ff40cf,\n  };\n  private static class ViewHolder {\n    public ImageView hueImageView;\n    public TextView  hueTextView;\n  }\n\n  public HueAdapter(Context context) {\n    mContext = context;\n    mLayoutInflater = LayoutInflater.from(context);\n  }\n\n  public int getCount() {\n    return mHueArray.length;\n  }\n\n  public Object getItem(int position) {\n    return mHueArray[position];\n  }\n\n  public long getItemId(int position) {\n    return position;\n  }\n\n  public View getView(int position, View convertView, ViewGroup parent) {\n\n    ViewHolder holder;\n    if (convertView == null) {\n      convertView = mLayoutInflater.inflate(R.layout.grid_item_hue, null);\n      holder = new ViewHolder();\n      holder.hueImageView = (ImageView)convertView.findViewById(R.id.hue_imageview);\n      holder.hueTextView = (TextView)convertView.findViewById(R.id.hue_textview);\n      convertView.setTag(holder);\n    } else {\n      holder = (ViewHolder)convertView.getTag();\n    }\n\n    holder.hueImageView.setImageResource(mHueIdArray[position]);\n    holder.hueTextView.setText(mHueArray[position]);\n\n    return convertView;\n  }\n}\n</code></pre>\n<h2>実行結果</h2>\n<p>ポートレイト/ランドスケープそれぞれ最大で配置できるグリッド数が配置されているのが分かります。</p>\n<p><img src=\"/images/2014/06/6676_1.png\" alt=\"\"></p>\n<p><img src=\"/images/2014/06/6676_2.png\" alt=\"\"></p>\n",
  "dir": "static/content/archives",
  "base": "2014-06-22-6676.json",
  "ext": ".json",
  "sourceBase": "2014-06-22-6676.md",
  "sourceExt": ".md"
}