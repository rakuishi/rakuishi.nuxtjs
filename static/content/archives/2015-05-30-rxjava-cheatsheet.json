{
  "categories": [
    "Android"
  ],
  "date": "2015-05-30T02:40:00.000Z",
  "draft": false,
  "slug": "rxjava-cheatsheet",
  "title": "RxJava Operators 私的チートシート",
  "bodyContent": "RxJava には、それを扱うための数多くの関数（オペレーター）が用意されているが、頻繁に使うのは極一部だったから、今までに使ったオペレーターとその使用例をまとめてみた。\n\n## Observable を作る - [just](http://reactivex.io/documentation/operators/just.html)\n\nRx では、データを `Observable<T>` の形で取り扱うが、これを一番簡単に作れるのが `just` である。以下の例では、`Observable<String>` を作成している。\n\n    public Observable<String> doSampleJust() {\n        return Observable.just(\"RxJava\");\n    }\n\n## Observable を作る - [create](http://reactivex.io/documentation/operators/create.html)\n\nObservable を自作する時に使える。例外が発生するような処理を取り扱いたい場合に使っている。処理中に `onNext`, `onError`, `onCompleted` を呼べるから、通信処理をここで書くのが良いと思っている。\n\n    public Observable<String> doSampleCreate() {\n        return Observable.create(new Observable.OnSubscribe<String>() {\n            @Override\n            public void call(Subscriber<? super String> subscriber) {\n                try {\n                    // 例外が発生するような処理\n                    doSomething();\n                    subscriber.onNext(\"RxJava\");\n                    subscriber.onCompleted();\n                } catch (Exception e) {\n                    subscriber.onError(e);\n                }\n            }\n        });\n    }\n\n## 値の加工 - [map](http://reactivex.io/documentation/operators/map.html)\n\n`map` は、値の加工を行う時に使用する。ここでは、`Observable<String>` を `Observable<Integer>` に変換している。ちなみに、変換用の関数を切り分けて用意しておくと、可読性が上がる。\n\n    public Observable<Integer> doSampleMap() {\n        return Observable.just(\"RxJava\")\n                .map(convertStringToInteger());\n    }\n    \n    public Func1<String, Integer> convertStringToInteger() {\n        return new Func1<String, Integer>() {\n            @Override\n            public Integer call(String s) {\n                return s.length();\n            }\n        };\n    }\n\n## 値の選別 - [filter](http://reactivex.io/documentation/operators/filter.html)\n\n`filter` は、流れてくるデータの状態をチェックし、true/false によってフィルタリングを行える。よく例として、配列に突っ込まれた値を間引いたりするのを見るが、以下のように値が想定とは違う場合に例外を投げるのもなかなか使い勝手が良いと思った。\n\n    public Observable<String> doSampleFilter() {\n        return Observable.just(\"RxJava\").filter(new Func1<String, Boolean>() {\n            @Override\n            public Boolean call(String s) {\n                if (s.equals(\"RxJava\")) {\n                    return true;\n                } else {\n                    throw new IllegalStateException(\"Error\");\n                    // 普通にフィルタリングする場合は、false\n                    // return false;\n                }\n            }\n        });\n    }\n\n## 流れの途中で値を利用する - doOnNext\n\n流れてきた値を変える必要はないが、その値を保存したい時などは `doOnNext` が使える。\n\n    public Observable<String> doSampleDoOnNext() {\n        return Observable.just(\"RxJava\").doOnNext(new Action1<String>() {\n            @Override\n            public void call(String s) {\n                // 値の保存など\n                doSomething(s);\n            }\n        });\n    }\n\n似たようなオペレーターに、`doOnEach`, `doOnCompleted`, `doOnError` がある。\n\n## 参考\n\n* [ReactiveX/RxJava](https://github.com/ReactiveX/RxJava)\n* [REACTIVE EXTENSIONS 学習ノート](http://wilfrem.github.io/learn_rx/operators.html)",
  "bodyHtml": "<p>RxJava には、それを扱うための数多くの関数（オペレーター）が用意されているが、頻繁に使うのは極一部だったから、今までに使ったオペレーターとその使用例をまとめてみた。</p>\n<h2>Observable を作る - <a href=\"http://reactivex.io/documentation/operators/just.html\">just</a></h2>\n<p>Rx では、データを <code>Observable&lt;T&gt;</code> の形で取り扱うが、これを一番簡単に作れるのが <code>just</code> である。以下の例では、<code>Observable&lt;String&gt;</code> を作成している。</p>\n<pre><code>public Observable&lt;String&gt; doSampleJust() {\n    return Observable.just(&quot;RxJava&quot;);\n}\n</code></pre>\n<h2>Observable を作る - <a href=\"http://reactivex.io/documentation/operators/create.html\">create</a></h2>\n<p>Observable を自作する時に使える。例外が発生するような処理を取り扱いたい場合に使っている。処理中に <code>onNext</code>, <code>onError</code>, <code>onCompleted</code> を呼べるから、通信処理をここで書くのが良いと思っている。</p>\n<pre><code>public Observable&lt;String&gt; doSampleCreate() {\n    return Observable.create(new Observable.OnSubscribe&lt;String&gt;() {\n        @Override\n        public void call(Subscriber&lt;? super String&gt; subscriber) {\n            try {\n                // 例外が発生するような処理\n                doSomething();\n                subscriber.onNext(&quot;RxJava&quot;);\n                subscriber.onCompleted();\n            } catch (Exception e) {\n                subscriber.onError(e);\n            }\n        }\n    });\n}\n</code></pre>\n<h2>値の加工 - <a href=\"http://reactivex.io/documentation/operators/map.html\">map</a></h2>\n<p><code>map</code> は、値の加工を行う時に使用する。ここでは、<code>Observable&lt;String&gt;</code> を <code>Observable&lt;Integer&gt;</code> に変換している。ちなみに、変換用の関数を切り分けて用意しておくと、可読性が上がる。</p>\n<pre><code>public Observable&lt;Integer&gt; doSampleMap() {\n    return Observable.just(&quot;RxJava&quot;)\n            .map(convertStringToInteger());\n}\n\npublic Func1&lt;String, Integer&gt; convertStringToInteger() {\n    return new Func1&lt;String, Integer&gt;() {\n        @Override\n        public Integer call(String s) {\n            return s.length();\n        }\n    };\n}\n</code></pre>\n<h2>値の選別 - <a href=\"http://reactivex.io/documentation/operators/filter.html\">filter</a></h2>\n<p><code>filter</code> は、流れてくるデータの状態をチェックし、true/false によってフィルタリングを行える。よく例として、配列に突っ込まれた値を間引いたりするのを見るが、以下のように値が想定とは違う場合に例外を投げるのもなかなか使い勝手が良いと思った。</p>\n<pre><code>public Observable&lt;String&gt; doSampleFilter() {\n    return Observable.just(&quot;RxJava&quot;).filter(new Func1&lt;String, Boolean&gt;() {\n        @Override\n        public Boolean call(String s) {\n            if (s.equals(&quot;RxJava&quot;)) {\n                return true;\n            } else {\n                throw new IllegalStateException(&quot;Error&quot;);\n                // 普通にフィルタリングする場合は、false\n                // return false;\n            }\n        }\n    });\n}\n</code></pre>\n<h2>流れの途中で値を利用する - doOnNext</h2>\n<p>流れてきた値を変える必要はないが、その値を保存したい時などは <code>doOnNext</code> が使える。</p>\n<pre><code>public Observable&lt;String&gt; doSampleDoOnNext() {\n    return Observable.just(&quot;RxJava&quot;).doOnNext(new Action1&lt;String&gt;() {\n        @Override\n        public void call(String s) {\n            // 値の保存など\n            doSomething(s);\n        }\n    });\n}\n</code></pre>\n<p>似たようなオペレーターに、<code>doOnEach</code>, <code>doOnCompleted</code>, <code>doOnError</code> がある。</p>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://github.com/ReactiveX/RxJava\">ReactiveX/RxJava</a></li>\n<li><a href=\"http://wilfrem.github.io/learn_rx/operators.html\">REACTIVE EXTENSIONS 学習ノート</a></li>\n</ul>\n",
  "dir": "static/content/archives",
  "base": "2015-05-30-rxjava-cheatsheet.json",
  "ext": ".json",
  "sourceBase": "2015-05-30-rxjava-cheatsheet.md",
  "sourceExt": ".md"
}