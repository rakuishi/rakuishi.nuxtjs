{
  "categories": [
    "WordPress"
  ],
  "date": "2014-01-08T14:10:33.000Z",
  "draft": false,
  "slug": 6424,
  "title": "[WordPress] デザインの邪魔になる p タグを取り除いた固定ページのテンプレートを作る",
  "bodyContent": "ある固定ページの記事内だけ特別なデザイン（スタイル）を適用したい時があります。この場合、記事内にスタイルを適用するテキストを書くことになります。ですが、WordPress は公開されるテキストに p タグを自動付加するため、こちらの意図しないところに空白が出来、デザインの邪魔になることがあります。\n\nある特定の固定ページは p タグ自動付加を許さず、しかし他の固定ページは従来通りに運用するために、ページテンプレートの仕組みを利用してみました。\n\n## ページテンプレートを作成する\n\n普通の WordPress の固定ページのテンプレートはひとつしか用意されていません。ですが、テンプレートはいくつも増やすことが出来、さらに複数の固定ページにそれぞれ別のテンプレートを適用することが出来ます。\n\n参考：[Page Templates « WordPress Codex](http://codex.wordpress.org/Page_Templates)\n\nでは、固定ページ page.php を元にしたページテンプレートを作成します。当ブログの page.php を例に説明します。\n\n```\n<? get_header() ?>\n\n<div id=\"entry\">\n  <? if (have_posts()): while (have_posts()): the_post(); ?>\n    <h1><? the_title() ?></h1>\n    <div class=\"meta\"><? echo get_the_date('Y/m/d H:i') ?> <?php the_category(' '); ?> <?php the_tags(' '); ?> <?php edit_post_link('編集', ''); ?></div>\n    <?php the_content(); ?>\n  <? endwhile; endif; ?>\n</div>\n\n<? get_footer() ?>\n```\n\n上記 page.php を複製して、名前を変更した remove-p-tag-page.php を用意します。場所は同じ階層です。そのファイルを編集し、ページテンプレートであることを宣言するコメントアウト文を書きます。Template Name は必須ですが、Description は必須ではありません。\n\n```\n<?php\n/*\nTemplate Name: デザインテンプレート\nDescription: WordPress により自動付加される p タグを取り除いたページテンプレート\n*/\n?>\n\n<? get_header() ?>\n\n<div id=\"entry\">\n  <? if (have_posts()): while (have_posts()): the_post(); ?>\n    <h1><? the_title() ?></h1>\n    <div class=\"meta\"><? echo get_the_date('Y/m/d H:i') ?> <?php the_category(' '); ?> <?php the_tags(' '); ?> <?php edit_post_link('編集', ''); ?></div>\n    <?php the_content(); ?>\n  <? endwhile; endif; ?>\n</div>\n\n<? get_footer() ?>\n```\n\n## p タグを自動付加されないようにする\n\np タグを自動付加されないようにするために、記事を出力する the_content() 関数の前に、remove_filter('the_content', 'wpautop') を追加します。\n\nremove-p-tag-page.php に書き加えます。\n\n```\n<?php\n/*\nTemplate Name: デザインテンプレート\nDescription: WordPress により自動付加される p タグを取り除いたページテンプレート\n*/\n?>\n\n<? get_header() ?>\n\n<div id=\"entry\">\n  <? if (have_posts()): while (have_posts()): the_post(); ?>\n    <h1><? the_title() ?></h1>\n    <div class=\"meta\"><? echo get_the_date('Y/m/d H:i') ?> <?php the_category(' '); ?> <?php the_tags(' '); ?> <?php edit_post_link('編集', ''); ?></div>\n    <?php remove_filter('the_content', 'wpautop'); ?>\n    <?php the_content(); ?>\n  <? endwhile; endif; ?>\n</div>\n\n<? get_footer() ?>\n```\n\nこれでこのページテンプレートでは、記事の内容に p タグが自動付加されなくなります。次は、このテンプレートを固定ページに適用します。\n\n参考：[WordPressで自動挿入されてしまう「p」タグを削除する方法 | GLOSSY](http://www.gl0ssy.net/wordpress-p-delete/)\n\n## 投稿画面からページテンプレートを選択する\n\n管理画面から p タグを取り除く固定ページに移動します。[ページ属性] → [テンプレート] から、先ほど作成したデザインテンプレートを選択します。\n\n![](/images/2014/01/6424_1.png)\n\nデザインテンプレートを適用し、記事を保存すれば、その固定ページは p タグが自動付加されなくなります。また、他の固定ページは従来通りに p タグが自動付加されます。\n\nこのように WordPress のページテンプレート機能を使用すれば、同じ固定ページでもデザイン（スタイル）を変えることが出来ます。",
  "bodyHtml": "<p>ある固定ページの記事内だけ特別なデザイン（スタイル）を適用したい時があります。この場合、記事内にスタイルを適用するテキストを書くことになります。ですが、WordPress は公開されるテキストに p タグを自動付加するため、こちらの意図しないところに空白が出来、デザインの邪魔になることがあります。</p>\n<p>ある特定の固定ページは p タグ自動付加を許さず、しかし他の固定ページは従来通りに運用するために、ページテンプレートの仕組みを利用してみました。</p>\n<h2>ページテンプレートを作成する</h2>\n<p>普通の WordPress の固定ページのテンプレートはひとつしか用意されていません。ですが、テンプレートはいくつも増やすことが出来、さらに複数の固定ページにそれぞれ別のテンプレートを適用することが出来ます。</p>\n<p>参考：<a href=\"http://codex.wordpress.org/Page_Templates\">Page Templates « WordPress Codex</a></p>\n<p>では、固定ページ page.php を元にしたページテンプレートを作成します。当ブログの page.php を例に説明します。</p>\n<pre><code>&lt;? get_header() ?&gt;\n\n&lt;div id=&quot;entry&quot;&gt;\n  &lt;? if (have_posts()): while (have_posts()): the_post(); ?&gt;\n    &lt;h1&gt;&lt;? the_title() ?&gt;&lt;/h1&gt;\n    &lt;div class=&quot;meta&quot;&gt;&lt;? echo get_the_date('Y/m/d H:i') ?&gt; &lt;?php the_category(' '); ?&gt; &lt;?php the_tags(' '); ?&gt; &lt;?php edit_post_link('編集', ''); ?&gt;&lt;/div&gt;\n    &lt;?php the_content(); ?&gt;\n  &lt;? endwhile; endif; ?&gt;\n&lt;/div&gt;\n\n&lt;? get_footer() ?&gt;\n</code></pre>\n<p>上記 page.php を複製して、名前を変更した remove-p-tag-page.php を用意します。場所は同じ階層です。そのファイルを編集し、ページテンプレートであることを宣言するコメントアウト文を書きます。Template Name は必須ですが、Description は必須ではありません。</p>\n<pre><code>&lt;?php\n/*\nTemplate Name: デザインテンプレート\nDescription: WordPress により自動付加される p タグを取り除いたページテンプレート\n*/\n?&gt;\n\n&lt;? get_header() ?&gt;\n\n&lt;div id=&quot;entry&quot;&gt;\n  &lt;? if (have_posts()): while (have_posts()): the_post(); ?&gt;\n    &lt;h1&gt;&lt;? the_title() ?&gt;&lt;/h1&gt;\n    &lt;div class=&quot;meta&quot;&gt;&lt;? echo get_the_date('Y/m/d H:i') ?&gt; &lt;?php the_category(' '); ?&gt; &lt;?php the_tags(' '); ?&gt; &lt;?php edit_post_link('編集', ''); ?&gt;&lt;/div&gt;\n    &lt;?php the_content(); ?&gt;\n  &lt;? endwhile; endif; ?&gt;\n&lt;/div&gt;\n\n&lt;? get_footer() ?&gt;\n</code></pre>\n<h2>p タグを自動付加されないようにする</h2>\n<p>p タグを自動付加されないようにするために、記事を出力する the_content() 関数の前に、remove_filter('the_content', 'wpautop') を追加します。</p>\n<p>remove-p-tag-page.php に書き加えます。</p>\n<pre><code>&lt;?php\n/*\nTemplate Name: デザインテンプレート\nDescription: WordPress により自動付加される p タグを取り除いたページテンプレート\n*/\n?&gt;\n\n&lt;? get_header() ?&gt;\n\n&lt;div id=&quot;entry&quot;&gt;\n  &lt;? if (have_posts()): while (have_posts()): the_post(); ?&gt;\n    &lt;h1&gt;&lt;? the_title() ?&gt;&lt;/h1&gt;\n    &lt;div class=&quot;meta&quot;&gt;&lt;? echo get_the_date('Y/m/d H:i') ?&gt; &lt;?php the_category(' '); ?&gt; &lt;?php the_tags(' '); ?&gt; &lt;?php edit_post_link('編集', ''); ?&gt;&lt;/div&gt;\n    &lt;?php remove_filter('the_content', 'wpautop'); ?&gt;\n    &lt;?php the_content(); ?&gt;\n  &lt;? endwhile; endif; ?&gt;\n&lt;/div&gt;\n\n&lt;? get_footer() ?&gt;\n</code></pre>\n<p>これでこのページテンプレートでは、記事の内容に p タグが自動付加されなくなります。次は、このテンプレートを固定ページに適用します。</p>\n<p>参考：<a href=\"http://www.gl0ssy.net/wordpress-p-delete/\">WordPressで自動挿入されてしまう「p」タグを削除する方法 | GLOSSY</a></p>\n<h2>投稿画面からページテンプレートを選択する</h2>\n<p>管理画面から p タグを取り除く固定ページに移動します。[ページ属性] → [テンプレート] から、先ほど作成したデザインテンプレートを選択します。</p>\n<p><img src=\"/images/2014/01/6424_1.png\" alt=\"\"></p>\n<p>デザインテンプレートを適用し、記事を保存すれば、その固定ページは p タグが自動付加されなくなります。また、他の固定ページは従来通りに p タグが自動付加されます。</p>\n<p>このように WordPress のページテンプレート機能を使用すれば、同じ固定ページでもデザイン（スタイル）を変えることが出来ます。</p>\n",
  "dir": "static/content/archives",
  "base": "2014-01-08-6424.json",
  "ext": ".json",
  "sourceBase": "2014-01-08-6424.md",
  "sourceExt": ".md"
}