{
  "categories": [
    "cocos2d-x"
  ],
  "date": "2013-08-03T00:22:37.000Z",
  "draft": false,
  "slug": 5810,
  "title": "cocos2d-x でクロスプラットフォーム（iPhone, Android）開発環境の構築",
  "bodyContent": "マルチプラットフォーム開発が可能な 2D ゲームフレームワークである cocos2d-x の環境を Mac で構築します。この記事では、iOS（開発ツール：Xcode）及び Android（開発ツール：Eclipse）のアプリを実行するまでを紹介します。\n\n## 手順\n\n1. 各種インストール（cocos2d-x, Eclipse, Android SDK, Android NDK, Xcode）\n1. プロジェクトの作成\n1. iOS（Xcode）でアプリを実行\n1. Android（Eclipse）でアプリを実行\n\n## 1. 各種インストール（cocos2d-x, Eclipse + Android SDK, Android NDK, Xcode）\n\n## cocos2d-x のインストール\n\n[http://www.cocos2d-x.org/projects/cocos2d-x/wiki/Download](http://www.cocos2d-x.org/projects/cocos2d-x/wiki/Download)\n\ncocos2d-x 公式サイトダウンロードページから、cocos2d-x をダウンロードします。「cocos2d-x-2.1.4.zip @ June.18, 2013」を使用しました。展開後、【/Applications】に置きました。\n\n## Eclipse および Android SDK のインストール\n\n[http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html)\n\nAndroid アプリの開発には、Eclipse と Android SDK で行われます。それらの環境をまとめた状態で導入できる ADT Bundle for Mac を上記リンクよりダウンロードします。展開後、「android-sdk」とリネームし、【/Applications】に置きました\n\n最近、それらの環境をまとめた Android Studio という開発ツールが登場しましたが、Android Studio は Android NDK にまだ対応していないため C++ のビルドを行うことができません（cocos2d-x は、C++ で記述する）。そのため、Eclipse + Android SDK で環境を構築していきます。\n\n## Android NDK\n\n[http://developer.android.com/tools/sdk/ndk/index.html](http://developer.android.com/tools/sdk/ndk/index.html)\n\n上記、リンクより Android NDK をダウンロードします。「android-ndk-r9-darwin-x86_64.tar.bz2」をダウンロードしました。展開後、「android-ndk」とリネームし、【/Applications】に置きました。\n\nAndroid アプリは、通常 Java で開発されますが、Android NDK を導入することで C や C++ で記述できるようになります。Android からは JNI（Java Native Interface）により、C や C++ のプログラムを動作することが可能になります。\n\n## Xcode のインストール\n\n[https://itunes.apple.com/jp/app/xcode/id497799835?mt=12](https://itunes.apple.com/jp/app/xcode/id497799835?mt=12)\n\nApp Store より、iOS アプリ開発に使用する Xcode（v4.6.3）をダウンロードします。\n\n## プロジェクトの作成\n\nプロジェクトの作成に cocos2d-x にあるプロジェクト作成ツールを利用します。作成ツールでプロジェクトを作成することで、マルチプラットフォーム（iOS, Android）開発環境を準備することができます。\n\nプロジェクト作成ツールは、python で書かれています。Mac に標準でインストールされている Terminal は、python を実行できるので、特に意識する必要はありません。Terminal を起動して、以下のコマンドを打ち込みます。\n\n```\n$ cd /Applications/cocos2d-x-2.1.4/tools/project-creator \n$ ./create_project.py -project MyProject -package com.rakuishi.myproject -language cpp\nproj.ios\t\t: Done!\nproj.android\t\t: Done!\nproj.win32\t\t: Done!\nproj.mac\t\t: Done!\nproj.blackberry\t\t: Done!\nproj.linux\t\t: Done!\nproj.marmalade\t\t: Done!\nNew project has been created in this path: /Applications/cocos2d-x-2.1.4/projects/MyProject\nHave Fun!\n```\n\nここでは、プロジェクト名：MyProject、パッケージ名：com.rakuishi.myproject としました。正常に処理されると、以下のディレクトリにプロジェクトが作成されています。\n\n/Applications/cocos2d-x-2.1.4/projects/MyProject\n\nこちらに、iOS 向けのプロジェクト（proj.ios）や Android 向けのプロジェクト（proj.android）が配置されています。基本的に、異なるプラットフォームで同じコードを共有します。Classes フォルダにヘッダーファイルとソースファイルに置き、Resources フォルダに画像などを置くのが、まもりたいルールとしてあるようです。\n\n## 3. iOS（Xcode）でアプリを実行\n\nでは、iOS アプリとして実行していきます。以下のプロジェクトファイルを Xcode で起動します。起動後、Run（command + R）すれば、iOS Simulator に cocos2d-x が動作します。\n\n/Applications/cocos2d-x-2.1.4/projects/MyProject/proj.ios/MyProject.xcodeproj\n\n## 4. Android（Eclipse）でアプリを実行\n\niOS アプリのビルドはとても簡単でしたが、Android アプリのビルドはたくさん設定が必要になります。大変です。Eclipse を起動して、以下の設定を行います。\n\n/Applications/android-sdk/eclipse/Eclipse.app\n\n## Linked Resources の設定\n\n[ADT] → [環境設定…] → [General] → [Workspace] → [Linked Resources] → [New]\n\nName: COCOS2DX  \nLocation: /Applications/cocos2d-x-2.1.4\n\n## Environment の設定\n\n[ADT] → [環境設定…] → [C/C++] → [Build] → [Environment] → [Add]\n\nName: NDK_ROOT  \nValue: /Applications/android-ndk\n\n## Code Analytsis の設定\n\n[ADT] → [環境設定…] → [C/C++] → [Code Analysis] → [▼Syntax and Semantic Errros] のチェックを外す。\n\n## ライブラリプロジェクト（libcocos2dx）を読み込む\n\n[File] → [New] → [Project…] から New Project を立ち上げる。[Android] から [Android Project from Existing Code] を選択し、[Next >] を選択する。\n\n[Browse…] から Root Directory にプロジェクトの場所を教えて、[Finish] を選択する。Eclipse の左カラムに libcocos2dx が追加される。\n\nRoot Directory: /Applications/cocos2d-x-2.1.4/cocos2dx/platform/android/java\n\n## プロジェクトを読み込む\n\n上と同様の手順で、MyProject プロジェクトを読み込む。読み込み終わった後、ビルドが開始されます。\n\nRoot Directory: /Applications/cocos2d-x-2.1.4/projects/MyProject/proj.android\n\n## Android アプリを実行\n\nここまでくれば、後はアプリを実行するだけですが、標準生成されたプロジェクトを Eclipse で起動しようとすると以下のエラーが発生しました。\n\n```\nformat not a string literal and no format arguments [-Werror=format-security]\n```\n\nLog 出力周りのフォーマット指定を MyProject/jni/Android.mk に記述すると修正されると思うのですが、よく分からなかったので以下のエラー部分をコメントアウトして対処しました。良い方法があったら、教えて頂けるとと嬉しいです。\n\n```\n/Applications/cocos2d-x-2.1.4/platform/android/CCCommon.cpp line: 44\n/Applications/cocos2d-x-2.1.4/platform/android/CCCommon.cpp line: 54\n/Applications/cocos2d-x-2.1.4/CocosDenshion/android/SimpleAudioEngine.cpp line: 77\n/Applications/cocos2d-x-2.1.4/CocosDenshion/android/opensl/OpenSLEngine.cpp line: 334\n/Applications/cocos2d-x-2.1.4/CocosDenshion/android/opensl/SimpleAudioEngineOpenSL.cpp line: 41\n```\n\n上記を修正後、Android の実機で cocos2d-x が動作します。Android Emulator での動作は、未確認です。",
  "bodyHtml": "<p>マルチプラットフォーム開発が可能な 2D ゲームフレームワークである cocos2d-x の環境を Mac で構築します。この記事では、iOS（開発ツール：Xcode）及び Android（開発ツール：Eclipse）のアプリを実行するまでを紹介します。</p>\n<h2>手順</h2>\n<ol>\n<li>各種インストール（cocos2d-x, Eclipse, Android SDK, Android NDK, Xcode）</li>\n<li>プロジェクトの作成</li>\n<li>iOS（Xcode）でアプリを実行</li>\n<li>Android（Eclipse）でアプリを実行</li>\n</ol>\n<h2>1. 各種インストール（cocos2d-x, Eclipse + Android SDK, Android NDK, Xcode）</h2>\n<h2>cocos2d-x のインストール</h2>\n<p><a href=\"http://www.cocos2d-x.org/projects/cocos2d-x/wiki/Download\">http://www.cocos2d-x.org/projects/cocos2d-x/wiki/Download</a></p>\n<p>cocos2d-x 公式サイトダウンロードページから、cocos2d-x をダウンロードします。「cocos2d-x-2.1.4.zip @ June.18, 2013」を使用しました。展開後、【/Applications】に置きました。</p>\n<h2>Eclipse および Android SDK のインストール</h2>\n<p><a href=\"http://developer.android.com/sdk/index.html\">http://developer.android.com/sdk/index.html</a></p>\n<p>Android アプリの開発には、Eclipse と Android SDK で行われます。それらの環境をまとめた状態で導入できる ADT Bundle for Mac を上記リンクよりダウンロードします。展開後、「android-sdk」とリネームし、【/Applications】に置きました</p>\n<p>最近、それらの環境をまとめた Android Studio という開発ツールが登場しましたが、Android Studio は Android NDK にまだ対応していないため C++ のビルドを行うことができません（cocos2d-x は、C++ で記述する）。そのため、Eclipse + Android SDK で環境を構築していきます。</p>\n<h2>Android NDK</h2>\n<p><a href=\"http://developer.android.com/tools/sdk/ndk/index.html\">http://developer.android.com/tools/sdk/ndk/index.html</a></p>\n<p>上記、リンクより Android NDK をダウンロードします。「android-ndk-r9-darwin-x86_64.tar.bz2」をダウンロードしました。展開後、「android-ndk」とリネームし、【/Applications】に置きました。</p>\n<p>Android アプリは、通常 Java で開発されますが、Android NDK を導入することで C や C++ で記述できるようになります。Android からは JNI（Java Native Interface）により、C や C++ のプログラムを動作することが可能になります。</p>\n<h2>Xcode のインストール</h2>\n<p><a href=\"https://itunes.apple.com/jp/app/xcode/id497799835?mt=12\">https://itunes.apple.com/jp/app/xcode/id497799835?mt=12</a></p>\n<p>App Store より、iOS アプリ開発に使用する Xcode（v4.6.3）をダウンロードします。</p>\n<h2>プロジェクトの作成</h2>\n<p>プロジェクトの作成に cocos2d-x にあるプロジェクト作成ツールを利用します。作成ツールでプロジェクトを作成することで、マルチプラットフォーム（iOS, Android）開発環境を準備することができます。</p>\n<p>プロジェクト作成ツールは、python で書かれています。Mac に標準でインストールされている Terminal は、python を実行できるので、特に意識する必要はありません。Terminal を起動して、以下のコマンドを打ち込みます。</p>\n<pre><code>$ cd /Applications/cocos2d-x-2.1.4/tools/project-creator \n$ ./create_project.py -project MyProject -package com.rakuishi.myproject -language cpp\nproj.ios\t\t: Done!\nproj.android\t\t: Done!\nproj.win32\t\t: Done!\nproj.mac\t\t: Done!\nproj.blackberry\t\t: Done!\nproj.linux\t\t: Done!\nproj.marmalade\t\t: Done!\nNew project has been created in this path: /Applications/cocos2d-x-2.1.4/projects/MyProject\nHave Fun!\n</code></pre>\n<p>ここでは、プロジェクト名：MyProject、パッケージ名：com.rakuishi.myproject としました。正常に処理されると、以下のディレクトリにプロジェクトが作成されています。</p>\n<p>/Applications/cocos2d-x-2.1.4/projects/MyProject</p>\n<p>こちらに、iOS 向けのプロジェクト（proj.ios）や Android 向けのプロジェクト（proj.android）が配置されています。基本的に、異なるプラットフォームで同じコードを共有します。Classes フォルダにヘッダーファイルとソースファイルに置き、Resources フォルダに画像などを置くのが、まもりたいルールとしてあるようです。</p>\n<h2>3. iOS（Xcode）でアプリを実行</h2>\n<p>では、iOS アプリとして実行していきます。以下のプロジェクトファイルを Xcode で起動します。起動後、Run（command + R）すれば、iOS Simulator に cocos2d-x が動作します。</p>\n<p>/Applications/cocos2d-x-2.1.4/projects/MyProject/proj.ios/MyProject.xcodeproj</p>\n<h2>4. Android（Eclipse）でアプリを実行</h2>\n<p>iOS アプリのビルドはとても簡単でしたが、Android アプリのビルドはたくさん設定が必要になります。大変です。Eclipse を起動して、以下の設定を行います。</p>\n<p>/Applications/android-sdk/eclipse/Eclipse.app</p>\n<h2>Linked Resources の設定</h2>\n<p>[ADT] → [環境設定…] → [General] → [Workspace] → [Linked Resources] → [New]</p>\n<p>Name: COCOS2DX<br>\nLocation: /Applications/cocos2d-x-2.1.4</p>\n<h2>Environment の設定</h2>\n<p>[ADT] → [環境設定…] → [C/C++] → [Build] → [Environment] → [Add]</p>\n<p>Name: NDK_ROOT<br>\nValue: /Applications/android-ndk</p>\n<h2>Code Analytsis の設定</h2>\n<p>[ADT] → [環境設定…] → [C/C++] → [Code Analysis] → [▼Syntax and Semantic Errros] のチェックを外す。</p>\n<h2>ライブラリプロジェクト（libcocos2dx）を読み込む</h2>\n<p>[File] → [New] → [Project…] から New Project を立ち上げる。[Android] から [Android Project from Existing Code] を選択し、[Next &gt;] を選択する。</p>\n<p>[Browse…] から Root Directory にプロジェクトの場所を教えて、[Finish] を選択する。Eclipse の左カラムに libcocos2dx が追加される。</p>\n<p>Root Directory: /Applications/cocos2d-x-2.1.4/cocos2dx/platform/android/java</p>\n<h2>プロジェクトを読み込む</h2>\n<p>上と同様の手順で、MyProject プロジェクトを読み込む。読み込み終わった後、ビルドが開始されます。</p>\n<p>Root Directory: /Applications/cocos2d-x-2.1.4/projects/MyProject/proj.android</p>\n<h2>Android アプリを実行</h2>\n<p>ここまでくれば、後はアプリを実行するだけですが、標準生成されたプロジェクトを Eclipse で起動しようとすると以下のエラーが発生しました。</p>\n<pre><code>format not a string literal and no format arguments [-Werror=format-security]\n</code></pre>\n<p>Log 出力周りのフォーマット指定を MyProject/jni/Android.mk に記述すると修正されると思うのですが、よく分からなかったので以下のエラー部分をコメントアウトして対処しました。良い方法があったら、教えて頂けるとと嬉しいです。</p>\n<pre><code>/Applications/cocos2d-x-2.1.4/platform/android/CCCommon.cpp line: 44\n/Applications/cocos2d-x-2.1.4/platform/android/CCCommon.cpp line: 54\n/Applications/cocos2d-x-2.1.4/CocosDenshion/android/SimpleAudioEngine.cpp line: 77\n/Applications/cocos2d-x-2.1.4/CocosDenshion/android/opensl/OpenSLEngine.cpp line: 334\n/Applications/cocos2d-x-2.1.4/CocosDenshion/android/opensl/SimpleAudioEngineOpenSL.cpp line: 41\n</code></pre>\n<p>上記を修正後、Android の実機で cocos2d-x が動作します。Android Emulator での動作は、未確認です。</p>\n",
  "dir": "static/content/archives",
  "base": "2013-08-03-5810.json",
  "ext": ".json",
  "sourceBase": "2013-08-03-5810.md",
  "sourceExt": ".md"
}