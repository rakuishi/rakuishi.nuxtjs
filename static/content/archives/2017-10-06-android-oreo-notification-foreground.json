{
  "categories": [
    "Android"
  ],
  "date": "2017-10-06T12:59:23.000Z",
  "draft": false,
  "slug": "android-oreo-notification-foreground",
  "title": "Android Oreo: 通知とサービスのフォアグラウンド実行",
  "bodyContent": "Android Oreo (API Level 26) を compileSdkVersion, targetSdkVersion とするアプリは、通知と、サービスのフォアグラウンド実行に対して新しく制限が加えられました。従来の SdkVersion を指定してビルドしたアプリを Android Oreo 上で動かす場合は、影響はありません。\n\nOreo 以降では、通知ごとにチャンネルを紐付ける必要があります。例えば、Twitter アプリでは、メンションとダイレクトメッセージを異なるチャンネルで取り扱っており、ユーザーが通知チャンネルごとに、音声と画面表示のオン／オフを切り替えることができます。\n\nこれにより、ユーザーは手ずから行儀の悪い通知を管理できるようになるのですが、行儀の良いデベロッパーにとっては実装が面倒になった印象しかありません。\n\nサービスのフォアグラウンド実行では、サービスを起動する際に、`Context.startForegroundService()` を使用します。その方法で起動したサービスは 5 秒以内に、サービス内で `Service.startForeground()` を呼ぶことになりました。\n\n最低限の実装とともに、その詳細を見ていきます。\n\n## 通知\n\n[googlesamples/android-NotificationChannels](https://github.com/googlesamples/android-NotificationChannels) を参考に最低限の実装にまとめました。従来の通知から変わったのは、あらかじめ NotificationChannel を設定しておく、個々の Notification にチャンネルを設定することです。今回の実装では、ひとつの通知チャンネルしか作成していませんが、通知の種類ごとに発行するのが通知チャンネルの思想です。\n\n```\npublic class NotificationHelper extends ContextWrapper {\n\n  private static final String CHANNEL_GENERAL_ID = \"general\";\n  private NotificationManager manager;\n\n  public NotificationHelper(Context base) {\n    super(base);\n\n    if (isOreoOrLater()) {\n      NotificationChannel channel = new NotificationChannel(CHANNEL_GENERAL_ID, \"General Notifications\", NotificationManager.IMPORTANCE_LOW);\n      getManager().createNotificationChannel(channel);\n    }\n  }\n\n  public Notification.Builder getNotification() {\n    Notification.Builder builder = isOreoOrLater()\n        ? new Notification.Builder(this, CHANNEL_GENERAL_ID)\n        : new Notification.Builder(this);\n\n    return builder.setContentTitle(getString(R.string.app_name))\n        .setContentText(\"Hello World!\")\n        .setSmallIcon(R.mipmap.ic_launcher);\n  }\n\n  public void notify(int id, Notification.Builder builder) {\n    getManager().notify(id, builder.build());\n  }\n\n  private NotificationManager getManager() {\n    if (manager == null) {\n      manager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n    }\n    return manager;\n  }\n\n  private boolean isOreoOrLater() {\n    return android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O;\n  }\n}\n```\n\n後は、Activity 内で次のように使用すれば OK です。今回は NotificationHelper のインスタンス作成時に、チャンネルの登録を行っていますが、出来れば `Application.onCreate()` 内で行ったほうが良いと思います。アプリを起動すれば、ユーザーがそのアプリの全通知チャンネルを確認できるからです。\n\n```\nNotificationHelper notificationHelper = new NotificationHelper(context);\nNotification.Builder builder = notificationHelper.getNotification();\nnotificationHelper.notify(1, builder);\n```\n\n通知チャンネルに登録した重要度は以下のように設定されており、これがデフォルト値です。設定 → アプリと通知 → アプリ情報 → アプリ名 → アプリの通知 → カテゴリからユーザーは自由に設定できます。`IMPORTANCE_LOW` は Low ではなく Medium なのが、ややこしいです。\n\n重要度 | 音／画面表示の有無\n--- | ---\n`IMPORTANCE_HIGH`, `IMPORTANCE_MAX` | Urgent: Make sound and pop on screen\n`IMPORTANCE_DEFAULT` | High: Make sound\n`IMPORTANCE_LOW` | Medium: No sound\n`IMPORTANCE_MIN` | Low: No sound or visual interruption\n\nまた、通知チャンネルは、ユーザーが目に触れる単語では、カテゴリ（Categories）です。\n\n## サービスのフォアグラウンド実行\n\nAndroid Oreo よりも前のバージョンでは、バックグラウンドサービスを作成してから、そのサービス内で `Service.startForeground()` を呼べば、フォアグラウンド実行に昇格していましたが、Android Oreo ではそれに一手間加える必要があります。\n\n- Service の起動には `Context.startForegroundService()` を使用する\n- 起動後、5 秒以内に `Service.startForeground()` を呼ぶ\n\n5 秒以内に呼ばないとクラッシュするため、Service の `onCreate()` の一番最初に `Service.startForeground()` を呼ぶのが好ましいと言えます。ちなみに、`Service.startForeground()` する前に、`Service.stopSelf()` などでサービスの終了を行った場合もクラッシュします。\n\n```\npublic class ForegroundService extends Service {\n\n  public static void start(@NonNull Context context) {\n    Intent intent = new Intent(context, ForegroundService.class);\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n      context.startForegroundService(intent);\n    } else {\n      context.startService(intent);\n    }\n  }\n\n  @Override\n  public void onCreate() {\n    super.onCreate();\n\n    NotificationHelper notificationHelper = new NotificationHelper(this);\n    Notification.Builder builder = notificationHelper.getNotification();\n    startForeground(2, builder.build());\n  }\n\n  @Nullable\n  @Override\n  public IBinder onBind(Intent intent) {\n    return null;\n  }\n}\n```\n\n後は、Activity 内で次のように使用すれば OK です。\n\n```\nForegroundService.start(this);\n```\n\nちなみに、5 秒以内に呼ばなかった場合は RemoteServiceException を吐いてクラッシュします。\n\n```\nandroid.app.RemoteServiceException: Context.startForegroundService() did not then call Service.startForeground()\n```\n\n## 参考\n\n- [googlesamples/android-NotificationChannels](https://github.com/googlesamples/android-NotificationChannels)\n- [バックグラウンド実行制限 | Android Developers](https://developer.android.com/about/versions/oreo/background.html)",
  "bodyHtml": "<p>Android Oreo (API Level 26) を compileSdkVersion, targetSdkVersion とするアプリは、通知と、サービスのフォアグラウンド実行に対して新しく制限が加えられました。従来の SdkVersion を指定してビルドしたアプリを Android Oreo 上で動かす場合は、影響はありません。</p>\n<p>Oreo 以降では、通知ごとにチャンネルを紐付ける必要があります。例えば、Twitter アプリでは、メンションとダイレクトメッセージを異なるチャンネルで取り扱っており、ユーザーが通知チャンネルごとに、音声と画面表示のオン／オフを切り替えることができます。</p>\n<p>これにより、ユーザーは手ずから行儀の悪い通知を管理できるようになるのですが、行儀の良いデベロッパーにとっては実装が面倒になった印象しかありません。</p>\n<p>サービスのフォアグラウンド実行では、サービスを起動する際に、<code>Context.startForegroundService()</code> を使用します。その方法で起動したサービスは 5 秒以内に、サービス内で <code>Service.startForeground()</code> を呼ぶことになりました。</p>\n<p>最低限の実装とともに、その詳細を見ていきます。</p>\n<h2>通知</h2>\n<p><a href=\"https://github.com/googlesamples/android-NotificationChannels\">googlesamples/android-NotificationChannels</a> を参考に最低限の実装にまとめました。従来の通知から変わったのは、あらかじめ NotificationChannel を設定しておく、個々の Notification にチャンネルを設定することです。今回の実装では、ひとつの通知チャンネルしか作成していませんが、通知の種類ごとに発行するのが通知チャンネルの思想です。</p>\n<pre><code>public class NotificationHelper extends ContextWrapper {\n\n  private static final String CHANNEL_GENERAL_ID = &quot;general&quot;;\n  private NotificationManager manager;\n\n  public NotificationHelper(Context base) {\n    super(base);\n\n    if (isOreoOrLater()) {\n      NotificationChannel channel = new NotificationChannel(CHANNEL_GENERAL_ID, &quot;General Notifications&quot;, NotificationManager.IMPORTANCE_LOW);\n      getManager().createNotificationChannel(channel);\n    }\n  }\n\n  public Notification.Builder getNotification() {\n    Notification.Builder builder = isOreoOrLater()\n        ? new Notification.Builder(this, CHANNEL_GENERAL_ID)\n        : new Notification.Builder(this);\n\n    return builder.setContentTitle(getString(R.string.app_name))\n        .setContentText(&quot;Hello World!&quot;)\n        .setSmallIcon(R.mipmap.ic_launcher);\n  }\n\n  public void notify(int id, Notification.Builder builder) {\n    getManager().notify(id, builder.build());\n  }\n\n  private NotificationManager getManager() {\n    if (manager == null) {\n      manager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n    }\n    return manager;\n  }\n\n  private boolean isOreoOrLater() {\n    return android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.O;\n  }\n}\n</code></pre>\n<p>後は、Activity 内で次のように使用すれば OK です。今回は NotificationHelper のインスタンス作成時に、チャンネルの登録を行っていますが、出来れば <code>Application.onCreate()</code> 内で行ったほうが良いと思います。アプリを起動すれば、ユーザーがそのアプリの全通知チャンネルを確認できるからです。</p>\n<pre><code>NotificationHelper notificationHelper = new NotificationHelper(context);\nNotification.Builder builder = notificationHelper.getNotification();\nnotificationHelper.notify(1, builder);\n</code></pre>\n<p>通知チャンネルに登録した重要度は以下のように設定されており、これがデフォルト値です。設定 → アプリと通知 → アプリ情報 → アプリ名 → アプリの通知 → カテゴリからユーザーは自由に設定できます。<code>IMPORTANCE_LOW</code> は Low ではなく Medium なのが、ややこしいです。</p>\n<table>\n<thead>\n<tr>\n<th>重要度</th>\n<th>音／画面表示の有無</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>IMPORTANCE_HIGH</code>, <code>IMPORTANCE_MAX</code></td>\n<td>Urgent: Make sound and pop on screen</td>\n</tr>\n<tr>\n<td><code>IMPORTANCE_DEFAULT</code></td>\n<td>High: Make sound</td>\n</tr>\n<tr>\n<td><code>IMPORTANCE_LOW</code></td>\n<td>Medium: No sound</td>\n</tr>\n<tr>\n<td><code>IMPORTANCE_MIN</code></td>\n<td>Low: No sound or visual interruption</td>\n</tr>\n</tbody>\n</table>\n<p>また、通知チャンネルは、ユーザーが目に触れる単語では、カテゴリ（Categories）です。</p>\n<h2>サービスのフォアグラウンド実行</h2>\n<p>Android Oreo よりも前のバージョンでは、バックグラウンドサービスを作成してから、そのサービス内で <code>Service.startForeground()</code> を呼べば、フォアグラウンド実行に昇格していましたが、Android Oreo ではそれに一手間加える必要があります。</p>\n<ul>\n<li>Service の起動には <code>Context.startForegroundService()</code> を使用する</li>\n<li>起動後、5 秒以内に <code>Service.startForeground()</code> を呼ぶ</li>\n</ul>\n<p>5 秒以内に呼ばないとクラッシュするため、Service の <code>onCreate()</code> の一番最初に <code>Service.startForeground()</code> を呼ぶのが好ましいと言えます。ちなみに、<code>Service.startForeground()</code> する前に、<code>Service.stopSelf()</code> などでサービスの終了を行った場合もクラッシュします。</p>\n<pre><code>public class ForegroundService extends Service {\n\n  public static void start(@NonNull Context context) {\n    Intent intent = new Intent(context, ForegroundService.class);\n    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {\n      context.startForegroundService(intent);\n    } else {\n      context.startService(intent);\n    }\n  }\n\n  @Override\n  public void onCreate() {\n    super.onCreate();\n\n    NotificationHelper notificationHelper = new NotificationHelper(this);\n    Notification.Builder builder = notificationHelper.getNotification();\n    startForeground(2, builder.build());\n  }\n\n  @Nullable\n  @Override\n  public IBinder onBind(Intent intent) {\n    return null;\n  }\n}\n</code></pre>\n<p>後は、Activity 内で次のように使用すれば OK です。</p>\n<pre><code>ForegroundService.start(this);\n</code></pre>\n<p>ちなみに、5 秒以内に呼ばなかった場合は RemoteServiceException を吐いてクラッシュします。</p>\n<pre><code>android.app.RemoteServiceException: Context.startForegroundService() did not then call Service.startForeground()\n</code></pre>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://github.com/googlesamples/android-NotificationChannels\">googlesamples/android-NotificationChannels</a></li>\n<li><a href=\"https://developer.android.com/about/versions/oreo/background.html\">バックグラウンド実行制限 | Android Developers</a></li>\n</ul>\n",
  "dir": "static/content/archives",
  "base": "2017-10-06-android-oreo-notification-foreground.json",
  "ext": ".json",
  "sourceBase": "2017-10-06-android-oreo-notification-foreground.md",
  "sourceExt": ".md"
}