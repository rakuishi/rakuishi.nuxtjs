{
  "categories": [
    "AWS"
  ],
  "date": "2016-04-06T13:16:34.000Z",
  "draft": false,
  "slug": "hosting-on-s3",
  "title": "Amazon S3 にサイトのホスティング先を移行した",
  "bodyContent": "このブログは静的サイトジェネレータ Hugo によって生成された静的ファイルをアップロードして作られています。今回、ホスティング先を Sakura Internet から Amazon S3 (Simple Storage Service) に変更しました。\n\nこの記事では、導入する際に行った Amazon S3 の静的サイト設定、Route53 によるドメイン管理についてメモします。\n\n## Amazon S3\n\nhttps://aws.amazon.com/jp/s3/\n\nクレジットカード番号の登録、電話番号認証を行って、アカウントを作成しました。[ストレージ & コンテンツ配信] → [S3] → [バケットの作成] からバケット名 `rakuishi.com` を作成しました。\n\nちなみに、アカウント作成直後では「反映まで最大24時間かかることがあります」と言われ、設定できませんでしたが、寝て起きたら使えるようになっていました。\n\n### アクセス許可\n\n初期設定では、ホスティングしたファイルへのアクセスが制限されています。見れるように、[プロパティ] → [アクセス許可] → [バケットポリシーの編集] から以下のルールを追加します。この `Version` は、作成日などではなくて `2012-10-17` を指定する必要があります。\n\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [{\n    \"Sid\": \"PublicReadForGetBucketObjects\",\n    \"Effect\": \"Allow\",\n    \"Principal\": \"*\",\n    \"Action\": [\"s3:GetObject\"],\n    \"Resource\": [\"arn:aws:s3:::rakuishi.com/*\"]\n  }]\n}\n```\n\n### 静的ウェブサイトホスティング\n\n[プロパティ] → [静的ウェブサイトホスティング] → [ウェブサイトのホスティングを有効にする] から、インデックスドキュメント index.html を設定します。また、リダイレクトルールを以下のように設定しました。\n\n```\n<RoutingRules>\n  <RoutingRule>\n    <Condition>\n      <HttpErrorCodeReturnedEquals>404</HttpErrorCodeReturnedEquals>\n    </Condition>\n    <Redirect>\n      <ReplaceKeyWith>404.html</ReplaceKeyWith>\n    </Redirect>\n  </RoutingRule>\n  <RoutingRule>\n    <Condition>\n      <KeyPrefixEquals>feed/</KeyPrefixEquals>\n    </Condition>\n    <Redirect>\n      <ReplaceKeyWith>index.xml</ReplaceKeyWith>\n      <HttpRedirectCode>301</HttpRedirectCode>\n    </Redirect>\n  </RoutingRule>\n</RoutingRules>\n```\n\nこれで静的サイトとしての設定は終わりました。\n\n## AWS CLI\n\n### ユーザー作成\n\nメニュー右上にある [ユーザー名] → [認証情報] → [IAM ユーザーの使用開始] を選択します。ユーザーを作成して、`Access Key Id` と `Secret Access Key` を保存します。\n\n作成したユーザーを選択し、[アクセス許可] → [ポリシーのアタッチ] から `AmazonS3FullAccess` を付与します。\n\n### Install AWS CLI\n\nPython パッケージ管理ツール pip をインストールし、pip から AWS CLI をインストールします。 OS X El Capitan 以降では、3行目のインストール方法を試すと、エラーが出ることなく AWS CLI をインストールできました。\n\n```\n$ sudo easy_install pip\n$ sudo pip install awscli\n$ sudo -H pip install awscli --upgrade --ignore-installed six\n```\n\n次に認証情報を登録していきます。対話的に入力していきます。登録内容は ~/.aws/ に格納されます。\n\n```\n$ aws configure\nAWS Access Key ID [None]: XXXXXXXXXXXXXXXXXXXX\nAWS Secret Access Key [None]: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nDefault region name [None]: ap-northeast-1\nDefault output format [None]: text\n```\n\n今回、デプロイのための転送コマンドは以下のように書きました。これで一括で流し込めて、割り当てられたドメインにファイルが設置されていることを確認できました。\n\n```\naws s3 sync --delete ./public s3://rakuishi.com\n```\n\n## 独自ドメインの設定\n\nネイキッドドメイン（www.rakuishi.com ではなく rakuishi.com）を使用するには、DNS サーバーを Route 53 に設定する必要があります。ドメインは、お名前.com のDNSサーバーを使用しているのでそこから移行する必要がありました。\n\nまずは、Route 53 での作業を行います。\n\n[Route53] → [DNS management] → [Create Hosted Zone] から、Hosted Zone を作成する。\n\n* Domain Name: rakuishi.com\n* Type: Public Hosted Zone\n\n[Create Record Set] を選択し、rakuishi.com を作成した S3 のバケットに向ける。\n\n* Name: 空白\n* Type: A – IPv4 Address\n* Alias: Yes\n* Alias Target: S3 website endpoints から選択できる\n* Routing Policy: Simple\n* Evaluate Target Health: No\n\n今回は、以下の NS レコードが生成されました。これをお名前.com に登録します。お名前.com 管理画面 → [ネームサーバーの変更] → [他のネームサーバーを利用] から、ネームサーバーの情報を登録します。\n\n* 1 プライマリネームサーバー(必須): ns-1571.awsdns-04.co.uk\n* 2 セカンダリネームサーバー(必須): ns-907.awsdns-49.net\n* 3: ns-391.awsdns-48.com\n* 4: ns-1368.awsdns-43.org\n\n確認は、`nslookup` コマンドを使用しました。浸透すれば、`server` を設定する必要なく `nslookup rakuishi.com` だけで返ってきます。\n\n```\nrakuishi:rakuishi.com rakuishi$ nslookup\n> server ns-1571.awsdns-04.co.uk\nDefault server: ns-1571.awsdns-04.co.uk\nAddress: 205.251.198.35#53\n> rakuishi.com\nServer:   ns-1571.awsdns-04.co.uk\nAddress:  205.251.198.35#53\n```\n\n## 料金\n\n現在このサイトは 30,000PV あり、ストレージ容量は 100MB 程度。ストレージ容量は大したことがないから、基本的に GET リクエスト数によって月々の料金が前後するはずです。リクエスト数はページで使用する画像やスタイルシートを読み込む関係上、PV よりも大きくなることはわかっていましたが、3 日間運用してみて、月間推定 180,000 GET Request が発生するようでした。\n\nよりリクエスト数を抑えるために、インライン画像、CSS Sprite などの小賢しいテクニックを使用し、月間推定 100,000 GET Request に抑えました。ですので、現状は以下のコストで運用できる予定です（S3 のストレージ容量、Route 53 のクエリ課金は無視）。\n\n* S3  \n100,000 (GET Request) / 10,000 x 0.0037 ($/10,0000 GET Request) = 0.037 ($)\n* Route 53  \n1 HostedZone = 0.5 ($)\n* 計  \n($0.037 + $0.5) x 110 (yen/$) = 59 (yen)\n\nSakura Internet スタンダードプラン 515 円で運用していたから、それよりも安くなりそうです。浮いた分を最近はまっている甘酒代にしようと思います。\n\n## 参考\n\n* [ブログをHugoとAmazon S3に移行しました - As a Futurist...](https://blog.riywo.com/2015/09/migrate-to-huge-and-s3/)\n* [[AWS]S3×Route53×お名前.comでルートドメインな静的Webサイトホスティングする | 遊び場](http://www30304u.sakura.ne.jp/blog/?p=3154)\n* [【初心者向け】MacユーザがAWS CLIを最速で試す方法 ｜ Developers.IO](http://dev.classmethod.jp/cloud/aws/mac-aws-cli/)\n* [s3 — AWS CLI 1.10.18 Command Reference](http://docs.aws.amazon.com/cli/latest/reference/s3/index.html)\n* [Fail to install aws-cli via sudo pip install awscli · Issue #1522 · aws/aws-cli](https://github.com/aws/aws-cli/issues/1522)",
  "bodyHtml": "<p>このブログは静的サイトジェネレータ Hugo によって生成された静的ファイルをアップロードして作られています。今回、ホスティング先を Sakura Internet から Amazon S3 (Simple Storage Service) に変更しました。</p>\n<p>この記事では、導入する際に行った Amazon S3 の静的サイト設定、Route53 によるドメイン管理についてメモします。</p>\n<h2>Amazon S3</h2>\n<p>https://aws.amazon.com/jp/s3/</p>\n<p>クレジットカード番号の登録、電話番号認証を行って、アカウントを作成しました。[ストレージ &amp; コンテンツ配信] → [S3] → [バケットの作成] からバケット名 <code>rakuishi.com</code> を作成しました。</p>\n<p>ちなみに、アカウント作成直後では「反映まで最大24時間かかることがあります」と言われ、設定できませんでしたが、寝て起きたら使えるようになっていました。</p>\n<h3>アクセス許可</h3>\n<p>初期設定では、ホスティングしたファイルへのアクセスが制限されています。見れるように、[プロパティ] → [アクセス許可] → [バケットポリシーの編集] から以下のルールを追加します。この <code>Version</code> は、作成日などではなくて <code>2012-10-17</code> を指定する必要があります。</p>\n<pre><code>{\n  &quot;Version&quot;: &quot;2012-10-17&quot;,\n  &quot;Statement&quot;: [{\n    &quot;Sid&quot;: &quot;PublicReadForGetBucketObjects&quot;,\n    &quot;Effect&quot;: &quot;Allow&quot;,\n    &quot;Principal&quot;: &quot;*&quot;,\n    &quot;Action&quot;: [&quot;s3:GetObject&quot;],\n    &quot;Resource&quot;: [&quot;arn:aws:s3:::rakuishi.com/*&quot;]\n  }]\n}\n</code></pre>\n<h3>静的ウェブサイトホスティング</h3>\n<p>[プロパティ] → [静的ウェブサイトホスティング] → [ウェブサイトのホスティングを有効にする] から、インデックスドキュメント index.html を設定します。また、リダイレクトルールを以下のように設定しました。</p>\n<pre><code>&lt;RoutingRules&gt;\n  &lt;RoutingRule&gt;\n    &lt;Condition&gt;\n      &lt;HttpErrorCodeReturnedEquals&gt;404&lt;/HttpErrorCodeReturnedEquals&gt;\n    &lt;/Condition&gt;\n    &lt;Redirect&gt;\n      &lt;ReplaceKeyWith&gt;404.html&lt;/ReplaceKeyWith&gt;\n    &lt;/Redirect&gt;\n  &lt;/RoutingRule&gt;\n  &lt;RoutingRule&gt;\n    &lt;Condition&gt;\n      &lt;KeyPrefixEquals&gt;feed/&lt;/KeyPrefixEquals&gt;\n    &lt;/Condition&gt;\n    &lt;Redirect&gt;\n      &lt;ReplaceKeyWith&gt;index.xml&lt;/ReplaceKeyWith&gt;\n      &lt;HttpRedirectCode&gt;301&lt;/HttpRedirectCode&gt;\n    &lt;/Redirect&gt;\n  &lt;/RoutingRule&gt;\n&lt;/RoutingRules&gt;\n</code></pre>\n<p>これで静的サイトとしての設定は終わりました。</p>\n<h2>AWS CLI</h2>\n<h3>ユーザー作成</h3>\n<p>メニュー右上にある [ユーザー名] → [認証情報] → [IAM ユーザーの使用開始] を選択します。ユーザーを作成して、<code>Access Key Id</code> と <code>Secret Access Key</code> を保存します。</p>\n<p>作成したユーザーを選択し、[アクセス許可] → [ポリシーのアタッチ] から <code>AmazonS3FullAccess</code> を付与します。</p>\n<h3>Install AWS CLI</h3>\n<p>Python パッケージ管理ツール pip をインストールし、pip から AWS CLI をインストールします。 OS X El Capitan 以降では、3行目のインストール方法を試すと、エラーが出ることなく AWS CLI をインストールできました。</p>\n<pre><code>$ sudo easy_install pip\n$ sudo pip install awscli\n$ sudo -H pip install awscli --upgrade --ignore-installed six\n</code></pre>\n<p>次に認証情報を登録していきます。対話的に入力していきます。登録内容は ~/.aws/ に格納されます。</p>\n<pre><code>$ aws configure\nAWS Access Key ID [None]: XXXXXXXXXXXXXXXXXXXX\nAWS Secret Access Key [None]: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nDefault region name [None]: ap-northeast-1\nDefault output format [None]: text\n</code></pre>\n<p>今回、デプロイのための転送コマンドは以下のように書きました。これで一括で流し込めて、割り当てられたドメインにファイルが設置されていることを確認できました。</p>\n<pre><code>aws s3 sync --delete ./public s3://rakuishi.com\n</code></pre>\n<h2>独自ドメインの設定</h2>\n<p>ネイキッドドメイン（www.rakuishi.com ではなく rakuishi.com）を使用するには、DNS サーバーを Route 53 に設定する必要があります。ドメインは、お名前.com のDNSサーバーを使用しているのでそこから移行する必要がありました。</p>\n<p>まずは、Route 53 での作業を行います。</p>\n<p>[Route53] → [DNS management] → [Create Hosted Zone] から、Hosted Zone を作成する。</p>\n<ul>\n<li>Domain Name: rakuishi.com</li>\n<li>Type: Public Hosted Zone</li>\n</ul>\n<p>[Create Record Set] を選択し、rakuishi.com を作成した S3 のバケットに向ける。</p>\n<ul>\n<li>Name: 空白</li>\n<li>Type: A – IPv4 Address</li>\n<li>Alias: Yes</li>\n<li>Alias Target: S3 website endpoints から選択できる</li>\n<li>Routing Policy: Simple</li>\n<li>Evaluate Target Health: No</li>\n</ul>\n<p>今回は、以下の NS レコードが生成されました。これをお名前.com に登録します。お名前.com 管理画面 → [ネームサーバーの変更] → [他のネームサーバーを利用] から、ネームサーバーの情報を登録します。</p>\n<ul>\n<li>1 プライマリネームサーバー(必須): ns-1571.awsdns-04.co.uk</li>\n<li>2 セカンダリネームサーバー(必須): ns-907.awsdns-49.net</li>\n<li>3: ns-391.awsdns-48.com</li>\n<li>4: ns-1368.awsdns-43.org</li>\n</ul>\n<p>確認は、<code>nslookup</code> コマンドを使用しました。浸透すれば、<code>server</code> を設定する必要なく <code>nslookup rakuishi.com</code> だけで返ってきます。</p>\n<pre><code>rakuishi:rakuishi.com rakuishi$ nslookup\n&gt; server ns-1571.awsdns-04.co.uk\nDefault server: ns-1571.awsdns-04.co.uk\nAddress: 205.251.198.35#53\n&gt; rakuishi.com\nServer:   ns-1571.awsdns-04.co.uk\nAddress:  205.251.198.35#53\n</code></pre>\n<h2>料金</h2>\n<p>現在このサイトは 30,000PV あり、ストレージ容量は 100MB 程度。ストレージ容量は大したことがないから、基本的に GET リクエスト数によって月々の料金が前後するはずです。リクエスト数はページで使用する画像やスタイルシートを読み込む関係上、PV よりも大きくなることはわかっていましたが、3 日間運用してみて、月間推定 180,000 GET Request が発生するようでした。</p>\n<p>よりリクエスト数を抑えるために、インライン画像、CSS Sprite などの小賢しいテクニックを使用し、月間推定 100,000 GET Request に抑えました。ですので、現状は以下のコストで運用できる予定です（S3 のストレージ容量、Route 53 のクエリ課金は無視）。</p>\n<ul>\n<li>S3<br>\n100,000 (GET Request) / 10,000 x 0.0037 ($/10,0000 GET Request) = 0.037 ($)</li>\n<li>Route 53<br>\n1 HostedZone = 0.5 ($)</li>\n<li>計<br>\n($0.037 + $0.5) x 110 (yen/$) = 59 (yen)</li>\n</ul>\n<p>Sakura Internet スタンダードプラン 515 円で運用していたから、それよりも安くなりそうです。浮いた分を最近はまっている甘酒代にしようと思います。</p>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://blog.riywo.com/2015/09/migrate-to-huge-and-s3/\">ブログをHugoとAmazon S3に移行しました - As a Futurist...</a></li>\n<li><a href=\"http://www30304u.sakura.ne.jp/blog/?p=3154\">[AWS]S3×Route53×お名前.comでルートドメインな静的Webサイトホスティングする | 遊び場</a></li>\n<li><a href=\"http://dev.classmethod.jp/cloud/aws/mac-aws-cli/\">【初心者向け】MacユーザがAWS CLIを最速で試す方法 ｜ Developers.IO</a></li>\n<li><a href=\"http://docs.aws.amazon.com/cli/latest/reference/s3/index.html\">s3 — AWS CLI 1.10.18 Command Reference</a></li>\n<li><a href=\"https://github.com/aws/aws-cli/issues/1522\">Fail to install aws-cli via sudo pip install awscli · Issue #1522 · aws/aws-cli</a></li>\n</ul>\n",
  "dir": "static/content/archives",
  "base": "2016-04-06-hosting-on-s3.json",
  "ext": ".json",
  "sourceBase": "2016-04-06-hosting-on-s3.md",
  "sourceExt": ".md"
}