{
  "categories": [
    "CSS"
  ],
  "date": "2015-09-13T04:26:04.000Z",
  "draft": false,
  "slug": "getting-started-with-css",
  "title": "CSS 初学者だった頃に知りたかったこと",
  "bodyContent": "この記事では、自分が CSS 初学者だった頃に知りたかったことをまとめています。\n\n## Normalize.css\n\nChrome, Safari, Firefox, IE などといったブラウザには、各々、デフォルトスタイルが当てられています。これにより、同じ要素なのに、余白や文字の大きさが微妙に異なる、といったことが起こります。\n\nそこで登場する [Normalize.css](https://necolas.github.io/normalize.css/) は、各ブラウザの違いを吸収し、各要素の有用なデフォルトのスタイルを維持したものです。Normalize.css を使えば、どのブラウザで見た時にも同じスタイルが当てられます。\n\nNormalize.css は、HTML の head 内で以下のように宣言して使います：\n\n    <link rel=\"stylesheet\" href=\"/css/normalize.css\">\n    <link rel=\"stylesheet\" href=\"/css/style.css\">\n\nスタイルシート内から `@import` を使用して複数の CSS を読み込ませる方法もありますが、パフォーマンス的に好ましくないので避けてください。\n\n## display の挙動を理解する\n\ndisplay は、要素の振る舞いを決める大事なプロパティです。最初はあまり意識出来ないかもしれませんが、この使い分けをしっかり理解できるようになると、表現の幅が広がります。\n\n### block\n\n* width は 100% がデフォルト値\n* 中央寄せにしたいときは、`margin: 0 auto;` のように記述する\n* h1, h2, h3, p, div, header, main, footer などは標準で block 値である\n\n### inline\n\n* width はコンテンツに依存する\n* width, height, margin を設定することが出来ない\n* 中央寄せにしたい時は、親要素に `text-align: center` を宣言する\n* span などは標準で inline 値である\n\n### inline-block\n\n* 基本的には、inline と同じだが、width, height, margin を設定することが出来る\n\n## レスポンシブサイト作りに役立つ `box-sizing: border-box`\n\nbox-sizing プロパティは、幅と高さの計算方法を変える際に使用できます。初期値は、`content-box` で padding と border を幅と高さに含めない、`border-box` は含める指定になります。\n\n試しに、box-sizing の指定の異なる、ふたつのクラスを用意してみました。\n\n    .content-box {\n      box-sizing: content-box; /* デフォルト値 */\n      display: block;\n      width: 300px;\n      padding: 20px;\n      border: 10px;\n    }\n\n    .border-box {\n      box-sizing: border-box;\n      display: block;\n      width: 300px;\n      padding: 20px;\n      border: 10px;\n    }\n\ncontent-box は、全体の横幅が 360px（width + padding * 2 + border * 2）になります。一方、border-box は、全体の横幅が 300px で、その中に padding と border が詰まっています。ですので、実質的な横幅は、240px（width - padding * 2 - border * 2）となります。\n\nただの計算方法の違いで終わりと言われればそうなのですが、この計算方法の違いは、レスポンシブサイトを作る時にとても重宝します。\n\n例えば、以下のように宣言した場合は、横幅 100% で、内部に余白（padding）に 20px の指定になります。どのデバイス横幅でも 20px 余白が表示されます。\n\n    .container {\n      box-sizing: border-box;\n      display: block;\n      width: 100%;\n      padding: 0 20px;\n    }\n\nこれが、`box-sizing: content-box` の時は、横幅が 100% + 20px * 2 となり、100% を超えてしまうことになります。100% を超えてしまうと、横幅がデバイスよりもはみでてしまって、サイト全体がたつきます。\n\n## クラス名は、抽象的な名前を付ける\n\n例えば、あるソーシャルゲームに登場するモンスター名を装飾するために、以下の様なクラスを宣言したとしましょう。\n\n    .title-monster { /* 背景が赤くて、文字が白いスタイル */ }\n\nしかし、このスタイルを別の場所で使いたくなった時に（例えば、そのソーシャルゲームに登場するアイテム名）、`title-monster` を指定するのはしっくり来ません。ですので、クラス名には monster のような具体的なものではなくて、背景が赤いというような名前を付けておくと良いです。\n\n    .title-bg-red { /* 背景が赤くて、文字が白いスタイル */ }\n\n## `#id`, `!important` は極力使わないようにする\n\nほとんどの場合、使わなくても書けます。id 要素や important 文が混ざってくると、CSS を適用する優先順位がとても複雑になります。なるべく標準的な要素（`h1`, `p` など）とクラス（`.class`）だけのシンプルなものにしましょう。\n\nid 要素は、アンカーリンクを設定する時、JavaScript からその id を操作したい時に、使うのがベストプラクティスだと思います。\n\nまた、話がすこしそれますが、JavaScript によって状態を変化させる時は、以下のように決めておくと、第三者から見てもどの要素が JavaScript で変更されるかが分かりやすいです。\n\n* クラス名の先頭に `js-` と付ける\n* WAI-ARIA で定められたプロパティ（`aria-hidden` など）を踏襲する\n\n## ブラウザのデベロッパーツール機能を使えるようになる\n\nテキストを太文字にしたつもりなのだけれど、反映されていないということが CSS を書いていると多々あります。それをどのように修正していくかというアプローチのひとつとして、ブラウザのデベロッパーツールがあります。\n\n例として、Google Chrome での操作方法を紹介します。対象のページで、`command + opetion + i` を押します（あるいは、メニュー -> 表示 -> 開発/管理 -> デベロッパーツール）。\n\nすると新しく画面が開かれます。この画面上部の虫眼鏡をクリックして、検証したい要素を選択すると、どのようなスタイルが最終的に適用されているかが分かります。\n\nまた、デバイスマークを押すと、iPhone や Android での見え方が表示されます（表示がおかしい時は、ブラウザをリロードしてください）。こちらでモバイルデバイスでの見え方を検証できますが、文字サイズやボタンの大きさに違和感がないように、最終的には自分の手元の端末で確認するように心がけておきましょう。",
  "bodyHtml": "<p>この記事では、自分が CSS 初学者だった頃に知りたかったことをまとめています。</p>\n<h2>Normalize.css</h2>\n<p>Chrome, Safari, Firefox, IE などといったブラウザには、各々、デフォルトスタイルが当てられています。これにより、同じ要素なのに、余白や文字の大きさが微妙に異なる、といったことが起こります。</p>\n<p>そこで登場する <a href=\"https://necolas.github.io/normalize.css/\">Normalize.css</a> は、各ブラウザの違いを吸収し、各要素の有用なデフォルトのスタイルを維持したものです。Normalize.css を使えば、どのブラウザで見た時にも同じスタイルが当てられます。</p>\n<p>Normalize.css は、HTML の head 内で以下のように宣言して使います：</p>\n<pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/normalize.css&quot;&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/style.css&quot;&gt;\n</code></pre>\n<p>スタイルシート内から <code>@import</code> を使用して複数の CSS を読み込ませる方法もありますが、パフォーマンス的に好ましくないので避けてください。</p>\n<h2>display の挙動を理解する</h2>\n<p>display は、要素の振る舞いを決める大事なプロパティです。最初はあまり意識出来ないかもしれませんが、この使い分けをしっかり理解できるようになると、表現の幅が広がります。</p>\n<h3>block</h3>\n<ul>\n<li>width は 100% がデフォルト値</li>\n<li>中央寄せにしたいときは、<code>margin: 0 auto;</code> のように記述する</li>\n<li>h1, h2, h3, p, div, header, main, footer などは標準で block 値である</li>\n</ul>\n<h3>inline</h3>\n<ul>\n<li>width はコンテンツに依存する</li>\n<li>width, height, margin を設定することが出来ない</li>\n<li>中央寄せにしたい時は、親要素に <code>text-align: center</code> を宣言する</li>\n<li>span などは標準で inline 値である</li>\n</ul>\n<h3>inline-block</h3>\n<ul>\n<li>基本的には、inline と同じだが、width, height, margin を設定することが出来る</li>\n</ul>\n<h2>レスポンシブサイト作りに役立つ <code>box-sizing: border-box</code></h2>\n<p>box-sizing プロパティは、幅と高さの計算方法を変える際に使用できます。初期値は、<code>content-box</code> で padding と border を幅と高さに含めない、<code>border-box</code> は含める指定になります。</p>\n<p>試しに、box-sizing の指定の異なる、ふたつのクラスを用意してみました。</p>\n<pre><code>.content-box {\n  box-sizing: content-box; /* デフォルト値 */\n  display: block;\n  width: 300px;\n  padding: 20px;\n  border: 10px;\n}\n\n.border-box {\n  box-sizing: border-box;\n  display: block;\n  width: 300px;\n  padding: 20px;\n  border: 10px;\n}\n</code></pre>\n<p>content-box は、全体の横幅が 360px（width + padding * 2 + border * 2）になります。一方、border-box は、全体の横幅が 300px で、その中に padding と border が詰まっています。ですので、実質的な横幅は、240px（width - padding * 2 - border * 2）となります。</p>\n<p>ただの計算方法の違いで終わりと言われればそうなのですが、この計算方法の違いは、レスポンシブサイトを作る時にとても重宝します。</p>\n<p>例えば、以下のように宣言した場合は、横幅 100% で、内部に余白（padding）に 20px の指定になります。どのデバイス横幅でも 20px 余白が表示されます。</p>\n<pre><code>.container {\n  box-sizing: border-box;\n  display: block;\n  width: 100%;\n  padding: 0 20px;\n}\n</code></pre>\n<p>これが、<code>box-sizing: content-box</code> の時は、横幅が 100% + 20px * 2 となり、100% を超えてしまうことになります。100% を超えてしまうと、横幅がデバイスよりもはみでてしまって、サイト全体がたつきます。</p>\n<h2>クラス名は、抽象的な名前を付ける</h2>\n<p>例えば、あるソーシャルゲームに登場するモンスター名を装飾するために、以下の様なクラスを宣言したとしましょう。</p>\n<pre><code>.title-monster { /* 背景が赤くて、文字が白いスタイル */ }\n</code></pre>\n<p>しかし、このスタイルを別の場所で使いたくなった時に（例えば、そのソーシャルゲームに登場するアイテム名）、<code>title-monster</code> を指定するのはしっくり来ません。ですので、クラス名には monster のような具体的なものではなくて、背景が赤いというような名前を付けておくと良いです。</p>\n<pre><code>.title-bg-red { /* 背景が赤くて、文字が白いスタイル */ }\n</code></pre>\n<h2><code>#id</code>, <code>!important</code> は極力使わないようにする</h2>\n<p>ほとんどの場合、使わなくても書けます。id 要素や important 文が混ざってくると、CSS を適用する優先順位がとても複雑になります。なるべく標準的な要素（<code>h1</code>, <code>p</code> など）とクラス（<code>.class</code>）だけのシンプルなものにしましょう。</p>\n<p>id 要素は、アンカーリンクを設定する時、JavaScript からその id を操作したい時に、使うのがベストプラクティスだと思います。</p>\n<p>また、話がすこしそれますが、JavaScript によって状態を変化させる時は、以下のように決めておくと、第三者から見てもどの要素が JavaScript で変更されるかが分かりやすいです。</p>\n<ul>\n<li>クラス名の先頭に <code>js-</code> と付ける</li>\n<li>WAI-ARIA で定められたプロパティ（<code>aria-hidden</code> など）を踏襲する</li>\n</ul>\n<h2>ブラウザのデベロッパーツール機能を使えるようになる</h2>\n<p>テキストを太文字にしたつもりなのだけれど、反映されていないということが CSS を書いていると多々あります。それをどのように修正していくかというアプローチのひとつとして、ブラウザのデベロッパーツールがあります。</p>\n<p>例として、Google Chrome での操作方法を紹介します。対象のページで、<code>command + opetion + i</code> を押します（あるいは、メニュー -&gt; 表示 -&gt; 開発/管理 -&gt; デベロッパーツール）。</p>\n<p>すると新しく画面が開かれます。この画面上部の虫眼鏡をクリックして、検証したい要素を選択すると、どのようなスタイルが最終的に適用されているかが分かります。</p>\n<p>また、デバイスマークを押すと、iPhone や Android での見え方が表示されます（表示がおかしい時は、ブラウザをリロードしてください）。こちらでモバイルデバイスでの見え方を検証できますが、文字サイズやボタンの大きさに違和感がないように、最終的には自分の手元の端末で確認するように心がけておきましょう。</p>\n",
  "dir": "static/content/archives",
  "base": "2015-09-13-getting-started-with-css.json",
  "ext": ".json",
  "sourceBase": "2015-09-13-getting-started-with-css.md",
  "sourceExt": ".md"
}