{
  "categories": [
    "CSS"
  ],
  "date": "2014-04-08T13:26:37.000Z",
  "draft": false,
  "slug": 6534,
  "title": "Compass で画像サイズを取得して背景画像に利用するミックスインを書いてみた",
  "bodyContent": "テキストを画像に置き換えたい場合があります。例えば、見出しの `h1 ~ h6` タグのテキストを画像にする場合です。\n\n実装としては、見出しタグの中身に `img` タグを含める方法と、CSS で処理する方法があります。\n\n前者は、簡単な方法ですが、保守を考えた場合、疑問です。複数ページにその都度 `img` タグが置かれているのをちまちま修正するより、CSS で一括で修正できる方が良い気がします。\n\n※ ただ、`img` タグをそのまま含める場合には、レスポンシブに画像を表示（縦横の比率を保ったまま拡大・縮小）できる大きなメリットが存在します。これは、CSS では表現できないため、今の技術ではそうせざるを得ないことがあります。\n\nこの記事では、CSS でテキストを画像に置換する際に、便利なミックスインを作ってみます。Sass & Compass 環境が必要です（[導入方法](http://rakuishi.com/archives/6519)）。\n\n## ミックスイン（Mixin）とは\n\nミックスインは、ひとまとまりのスタイルを再利用するための便利な Sass の仕組みです。簡単にいえば、関数のようなものです。`@mixin 名前(変数)` のように宣言します。そして使う場合は、`@include 名前(変数)` とすれば OK です。\n\n例えば、`border-radius` にベンダープレフィックスを付けるようなミックスインを考えてみます。次のように書いてみました。\n\n```\n/* .scss */\n@mixin radius($px) {\n  -moz-border-radius: $px;\n  -webkit-border-radius: $px;\n  border-radius: $px;\n}\n\ncode {\n  @include radius(10px);\n}\n```\n\nこれは、次のように変換されます。指定したサイズで角丸が表現できています。\n\n```\n/* .css */\ncode {\n  -moz-border-radius: 10px;\n  -webkit-border-radius: 10px;\n  border-radius: 10px;\n}\n```\n\n## Compass で画像のサイズを取得するには\n\nCompass を導入しているならば、config.rb で監視している画像フォルダにある画像の縦横を取得できます。公式サイトを参考に横幅を取得する `image-width($image)` と縦幅を取得する `image-height($image)` を使えば良さそうです。\n\nまた、画像のパスを取得するには、`image-url($path, $only-path, $cache-buster)` を使うようです。パラメータが複数指定できますが、それぞれ画像名、パスだけか（ブール型）、キャッシュを意識するか（ブール型）、となっています。\n\n* [Compass Image Dimension Helpers | Compass Documentation](http://compass-style.org/reference/compass/helpers/image-dimensions/)\n* [Compass URL Helpers | Compass Documentation](http://compass-style.org/reference/compass/helpers/urls/)\n\n## テキストを画像に置換するミックスイン（レティナ対応）\n\nレティナ対応を意識したミックスインを作成しました。名前と解像度からテキストを画像に置換する CSS が出力されます。解像度は入力を省いた場合、1 が標準で設定されます。\n\n```\n/* .scss */\n@mixin bg($name, $dpi: 1) {\n  $width: image-width($name) / $dpi;\n  $height: image-height($name) / $dpi;\n  display: block;\n  width: $width;\n  height: $height;\n  background: image-url($name, false, false) no-repeat;\n  background-size: $width $height;\n  text-indent: 100%;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\nh1 {\n  @include bg(\"about.png\", 2); // about.png 画像のレティナ対応お願いします！\n}\n```\n\nこれをコンパイルすれば、以下のように出力されます。about.png は元々が 48x48 の画像なのでちゃんと動作していることが確認できます。\n\n```\n/* .css */\nh1 {\n  display: block;\n  width: 24px;\n  height: 24px;\n  background: url('../images/about.png') no-repeat;\n  background-size: 24px 24px;\n  text-indent: 100%;\n  white-space: nowrap;\n  overflow: hidden;\n}\n```\n\nこのようにミックスインを使えば、だらだらと記述しなければならなかったところを1行で済ませられ、可読性が上がっています。もう一度、画像は違うけれど同じようなことをしたい場合、新しく書くのは1行だけで OK です。",
  "bodyHtml": "<p>テキストを画像に置き換えたい場合があります。例えば、見出しの <code>h1 ~ h6</code> タグのテキストを画像にする場合です。</p>\n<p>実装としては、見出しタグの中身に <code>img</code> タグを含める方法と、CSS で処理する方法があります。</p>\n<p>前者は、簡単な方法ですが、保守を考えた場合、疑問です。複数ページにその都度 <code>img</code> タグが置かれているのをちまちま修正するより、CSS で一括で修正できる方が良い気がします。</p>\n<p>※ ただ、<code>img</code> タグをそのまま含める場合には、レスポンシブに画像を表示（縦横の比率を保ったまま拡大・縮小）できる大きなメリットが存在します。これは、CSS では表現できないため、今の技術ではそうせざるを得ないことがあります。</p>\n<p>この記事では、CSS でテキストを画像に置換する際に、便利なミックスインを作ってみます。Sass &amp; Compass 環境が必要です（<a href=\"http://rakuishi.com/archives/6519\">導入方法</a>）。</p>\n<h2>ミックスイン（Mixin）とは</h2>\n<p>ミックスインは、ひとまとまりのスタイルを再利用するための便利な Sass の仕組みです。簡単にいえば、関数のようなものです。<code>@mixin 名前(変数)</code> のように宣言します。そして使う場合は、<code>@include 名前(変数)</code> とすれば OK です。</p>\n<p>例えば、<code>border-radius</code> にベンダープレフィックスを付けるようなミックスインを考えてみます。次のように書いてみました。</p>\n<pre><code>/* .scss */\n@mixin radius($px) {\n  -moz-border-radius: $px;\n  -webkit-border-radius: $px;\n  border-radius: $px;\n}\n\ncode {\n  @include radius(10px);\n}\n</code></pre>\n<p>これは、次のように変換されます。指定したサイズで角丸が表現できています。</p>\n<pre><code>/* .css */\ncode {\n  -moz-border-radius: 10px;\n  -webkit-border-radius: 10px;\n  border-radius: 10px;\n}\n</code></pre>\n<h2>Compass で画像のサイズを取得するには</h2>\n<p>Compass を導入しているならば、config.rb で監視している画像フォルダにある画像の縦横を取得できます。公式サイトを参考に横幅を取得する <code>image-width($image)</code> と縦幅を取得する <code>image-height($image)</code> を使えば良さそうです。</p>\n<p>また、画像のパスを取得するには、<code>image-url($path, $only-path, $cache-buster)</code> を使うようです。パラメータが複数指定できますが、それぞれ画像名、パスだけか（ブール型）、キャッシュを意識するか（ブール型）、となっています。</p>\n<ul>\n<li><a href=\"http://compass-style.org/reference/compass/helpers/image-dimensions/\">Compass Image Dimension Helpers | Compass Documentation</a></li>\n<li><a href=\"http://compass-style.org/reference/compass/helpers/urls/\">Compass URL Helpers | Compass Documentation</a></li>\n</ul>\n<h2>テキストを画像に置換するミックスイン（レティナ対応）</h2>\n<p>レティナ対応を意識したミックスインを作成しました。名前と解像度からテキストを画像に置換する CSS が出力されます。解像度は入力を省いた場合、1 が標準で設定されます。</p>\n<pre><code>/* .scss */\n@mixin bg($name, $dpi: 1) {\n  $width: image-width($name) / $dpi;\n  $height: image-height($name) / $dpi;\n  display: block;\n  width: $width;\n  height: $height;\n  background: image-url($name, false, false) no-repeat;\n  background-size: $width $height;\n  text-indent: 100%;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\nh1 {\n  @include bg(&quot;about.png&quot;, 2); // about.png 画像のレティナ対応お願いします！\n}\n</code></pre>\n<p>これをコンパイルすれば、以下のように出力されます。about.png は元々が 48x48 の画像なのでちゃんと動作していることが確認できます。</p>\n<pre><code>/* .css */\nh1 {\n  display: block;\n  width: 24px;\n  height: 24px;\n  background: url('../images/about.png') no-repeat;\n  background-size: 24px 24px;\n  text-indent: 100%;\n  white-space: nowrap;\n  overflow: hidden;\n}\n</code></pre>\n<p>このようにミックスインを使えば、だらだらと記述しなければならなかったところを1行で済ませられ、可読性が上がっています。もう一度、画像は違うけれど同じようなことをしたい場合、新しく書くのは1行だけで OK です。</p>\n",
  "dir": "static/content/archives",
  "base": "2014-04-08-6534.json",
  "ext": ".json",
  "sourceBase": "2014-04-08-6534.md",
  "sourceExt": ".md"
}