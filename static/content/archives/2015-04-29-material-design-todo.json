{
  "categories": [
    "Android"
  ],
  "date": "2015-04-28T23:40:12.000Z",
  "draft": false,
  "slug": "material-design-todo",
  "title": "Material Design と Realm の勉強がてら作った Todo アプリを公開しました",
  "bodyContent": "[![](https://raw.githubusercontent.com/rakuishi/Todo-Android/master/todo.png)](https://play.google.com/store/apps/details?id=com.rakuishi.todo)\n\n[Material Design](http://www.google.com/design/spec/material-design/introduction.html) と、流行っている <ruby>[Realm](http://realm.io/)<rt>れるむ</rt></ruby> を勉強するために、Todo アプリを作りました。一応、お金を払って Google Play Developer に参加しているのでストアに公開もしました。\n\n* Google Play: [Todo - Google Play の Android アプリ](https://play.google.com/store/apps/details?id=com.rakuishi.todo)\n* GitHub: [rakuishi/Todo-Android](https://github.com/rakuishi/Todo-Android)\n\nこの記事では、この Todo アプリを実装した上での気付き点を紹介します。\n\n## [Material Design](http://www.google.com/design/spec/material-design/introduction.html)\n\nAndroid マテリアルデザインガイドの何が良いかというと、色・サイズ・タイポグラフィが厳密に定義してあること。iOS の[フラットデザイン](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/)は、情報・コンポーネントの置き方を詳しく定義しているのですが、マテリアルデザインガイドまで厳密ではないように思う。乱暴だけれど、磨りガラスを取り入れれば、なんとなくフラットデザインっぽいよね、後は自由にやってねという感じだ。\n\n実際、マテリアルデザインに準じたアプリは見た目がほとんど同じだけれど、フラットデザインに準じたアプリは見た目が結構異なっている。それ故に、マテリアルデザインのアプリは真似しやすく、フラットデザインのアプリは真似してもこれじゃない感が結構でる。どちらのアプリも個人で作ったことがあるのですが、マテリアルのほうがびしっと決まる。恰好良い。フラットデザインは、ぺらぺら感が出てダサくなる。難しい。\n\n### 色・サイズ・タイポグラフィ\n\n今回のアプリでは、色・サイズ・タイポグラフィについては、values/ 内に記述し、レイアウトファイルからはそれらを使いまわすようにした。\n\nレイアウトファイル内で記述する属性は、レイアウト情報 `layout_*` に留め、テーマ（スタイル）は styles.xml に逃すことを意識する。\n\n#### colors.xml\n\n    <color name=\"myPrimaryColor\">#3F51B5</color>\n    <color name=\"myPrimaryDarkColor\">#303F9F</color>\n    <color name=\"myAccentColor\">#FF4081</color>\n    <color name=\"myDrawerBackground\">#FFF</color>\n    <color name=\"myWindowBackground\">#FFF</color>\n    <color name=\"myTextPrimaryColor\">#212121</color>\n    <color name=\"myNavigationColor\">#000</color>\n\n    <color name=\"myTextColor\">#212121</color>\n    <color name=\"mySecondaryTextColor\">#727272</color>\n    <color name=\"myDisabledTextColor\">#B8B8B8</color>\n    <color name=\"myHintTextColor\">#B8B8B8</color>\n    <color name=\"myDividerColor\">#DADADA</color>\n\n#### dimens.xml\n\n    <!-- Keylines and spacing\n         http://www.google.com/design/spec/layout/metrics-keylines.html -->\n    <!-- Space between content areas -->\n    <dimen name=\"dp_8\">8dp</dimen>\n    <!-- Defaults screen margin -->\n    <dimen name=\"dp_16\">16dp</dimen>\n    <!-- Status bar, Icon size -->\n    <dimen name=\"dp_24\">24dp</dimen>\n    <!-- Raised button height -->\n    <dimen name=\"dp_36\">36dp</dimen>\n    <!-- Avatar -->\n    <dimen name=\"dp_40\">40dp</dimen>\n    <!-- Subtitle, List Item -->\n    <dimen name=\"dp_48\">48dp</dimen>\n    <!-- Toolbar height, Floating button size -->\n    <dimen name=\"dp_56\">56dp</dimen>\n    <!-- Button min width -->\n    <dimen name=\"dp_64\">64dp</dimen>\n    <!-- Title, List item -->\n    <dimen name=\"dp_72\">72dp</dimen>\n\n### ツールバーとナビゲーションドロワー\n\nAndroid 4.4 → 5.0 になり、印象的だったのが、Navigation Drawer が、Toolbar（Actionbar）上に現れること。その影響なのか Toolbar は、レイアウトファイルに記述すれば使えるようになる。これでこの上に、ドロワーを重ねることができる。\n\n    <android.support.v7.widget.Toolbar\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        style=\"@style/ToolBarStyle\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:background=\"?attr/colorPrimary\"\n        android:minHeight=\"@dimen/abc_action_bar_default_height_material\" />\n\nこれと DrawerLayout を使えば、ある程度までは上手く実装できるのですが、これが結構面倒くさい。自分の場合は、何故かドロワーをエッジスワイプするアクションが途中で止まる（？）不具合が発生し、何日か不貞腐れていたのですが、以下のテンプレートを使えば一瞬だった。神。\n\n* [kanytu/Android-studio-material-template](https://github.com/kanytu/Android-studio-material-template)\n\n## [Realm](http://realm.io/jp/docs/java/)\n\n> Realmは、SQLiteやCoreDataから置き換わるモバイルデータベースです。\n\nという紹介の通り、iOS（Objective-C）や Android（Java）から、簡単に使える。前に、SQLite を iOS/Android から生で触ったことがあるのですが、データベースの置き場所を作ったり、`CREATE TABLE` から始めたりと面倒な印象があるし、CoreData に至っては難しくてよく分からん（一応使ってるけれど）。\n\n### モデル\n\nRealm は、`RealmObject` を継承したモデルを元にデータベースを勝手に生成してくれます。便利！ ... ですが、何故かここで少しハマり、作成したモデルがコンパイルエラー。結局、getter, setter の指定が Realm 内の規約と少し違っていたことが原因だった。\n\nその際に、Android Studio では、[Command + N] → [Getter and Setter] を選択すれば、勝手に生成してくれることを知る。恥ずかしいことに、今まで頑張ってタイプしてた。自動生成に任せれば、問題なしでした。\n\n### Autoincrement\n\nRealm-Java では、Autoincrement がまだ使えないようなので、最大値 + 1 して簡易的に実現した。\n\n    public void insert(String name, boolean completed) {\n        mRealm.beginTransaction();\n        Todo todo = mRealm.createObject(Todo.class);\n        todo.setId((int)mRealm.where(Todo.class).maximumInt(\"id\") + 1);\n        todo.setName(name);\n        todo.setCompleted(completed);\n        mRealm.commitTransaction();\n    }\n\n## こぼればなし\n\n今回、実装する際に、GitHub に転がっている他の Android プロジェクト [forkhubs/android](https://github.com/forkhubs/android) を参考にしたのだが、かなり勉強になった。\n\n例えば、ある ActivityA から ActivityB を呼びたい時に、B に以下を書いておけば：\n\n    public static Intent createIntent(Context context, int id) {\n        Intent intent = new Intent(context, ActivityB.class);\n        intent.putExtra(\"extra.id\", id);\n        return intent;\n    }\n\nActivityA から ActivityB を呼ぶときは、以下で良い：\n\n    startActivity(ActivityB.createIntent(this, \"1\"));\n\nAcitityA からは、ActivityB に渡す値のキーを気にする必要がないから、綺麗にまとまる。",
  "bodyHtml": "<p><a href=\"https://play.google.com/store/apps/details?id=com.rakuishi.todo\"><img src=\"https://raw.githubusercontent.com/rakuishi/Todo-Android/master/todo.png\" alt=\"\"></a></p>\n<p><a href=\"http://www.google.com/design/spec/material-design/introduction.html\">Material Design</a> と、流行っている &lt;ruby&gt;<a href=\"http://realm.io/\">Realm</a>&lt;rt&gt;れるむ&lt;/rt&gt;&lt;/ruby&gt; を勉強するために、Todo アプリを作りました。一応、お金を払って Google Play Developer に参加しているのでストアに公開もしました。</p>\n<ul>\n<li>Google Play: <a href=\"https://play.google.com/store/apps/details?id=com.rakuishi.todo\">Todo - Google Play の Android アプリ</a></li>\n<li>GitHub: <a href=\"https://github.com/rakuishi/Todo-Android\">rakuishi/Todo-Android</a></li>\n</ul>\n<p>この記事では、この Todo アプリを実装した上での気付き点を紹介します。</p>\n<h2><a href=\"http://www.google.com/design/spec/material-design/introduction.html\">Material Design</a></h2>\n<p>Android マテリアルデザインガイドの何が良いかというと、色・サイズ・タイポグラフィが厳密に定義してあること。iOS の<a href=\"https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/\">フラットデザイン</a>は、情報・コンポーネントの置き方を詳しく定義しているのですが、マテリアルデザインガイドまで厳密ではないように思う。乱暴だけれど、磨りガラスを取り入れれば、なんとなくフラットデザインっぽいよね、後は自由にやってねという感じだ。</p>\n<p>実際、マテリアルデザインに準じたアプリは見た目がほとんど同じだけれど、フラットデザインに準じたアプリは見た目が結構異なっている。それ故に、マテリアルデザインのアプリは真似しやすく、フラットデザインのアプリは真似してもこれじゃない感が結構でる。どちらのアプリも個人で作ったことがあるのですが、マテリアルのほうがびしっと決まる。恰好良い。フラットデザインは、ぺらぺら感が出てダサくなる。難しい。</p>\n<h3>色・サイズ・タイポグラフィ</h3>\n<p>今回のアプリでは、色・サイズ・タイポグラフィについては、values/ 内に記述し、レイアウトファイルからはそれらを使いまわすようにした。</p>\n<p>レイアウトファイル内で記述する属性は、レイアウト情報 <code>layout_*</code> に留め、テーマ（スタイル）は styles.xml に逃すことを意識する。</p>\n<h4>colors.xml</h4>\n<pre><code>&lt;color name=&quot;myPrimaryColor&quot;&gt;#3F51B5&lt;/color&gt;\n&lt;color name=&quot;myPrimaryDarkColor&quot;&gt;#303F9F&lt;/color&gt;\n&lt;color name=&quot;myAccentColor&quot;&gt;#FF4081&lt;/color&gt;\n&lt;color name=&quot;myDrawerBackground&quot;&gt;#FFF&lt;/color&gt;\n&lt;color name=&quot;myWindowBackground&quot;&gt;#FFF&lt;/color&gt;\n&lt;color name=&quot;myTextPrimaryColor&quot;&gt;#212121&lt;/color&gt;\n&lt;color name=&quot;myNavigationColor&quot;&gt;#000&lt;/color&gt;\n\n&lt;color name=&quot;myTextColor&quot;&gt;#212121&lt;/color&gt;\n&lt;color name=&quot;mySecondaryTextColor&quot;&gt;#727272&lt;/color&gt;\n&lt;color name=&quot;myDisabledTextColor&quot;&gt;#B8B8B8&lt;/color&gt;\n&lt;color name=&quot;myHintTextColor&quot;&gt;#B8B8B8&lt;/color&gt;\n&lt;color name=&quot;myDividerColor&quot;&gt;#DADADA&lt;/color&gt;\n</code></pre>\n<h4>dimens.xml</h4>\n<pre><code>&lt;!-- Keylines and spacing\n     http://www.google.com/design/spec/layout/metrics-keylines.html --&gt;\n&lt;!-- Space between content areas --&gt;\n&lt;dimen name=&quot;dp_8&quot;&gt;8dp&lt;/dimen&gt;\n&lt;!-- Defaults screen margin --&gt;\n&lt;dimen name=&quot;dp_16&quot;&gt;16dp&lt;/dimen&gt;\n&lt;!-- Status bar, Icon size --&gt;\n&lt;dimen name=&quot;dp_24&quot;&gt;24dp&lt;/dimen&gt;\n&lt;!-- Raised button height --&gt;\n&lt;dimen name=&quot;dp_36&quot;&gt;36dp&lt;/dimen&gt;\n&lt;!-- Avatar --&gt;\n&lt;dimen name=&quot;dp_40&quot;&gt;40dp&lt;/dimen&gt;\n&lt;!-- Subtitle, List Item --&gt;\n&lt;dimen name=&quot;dp_48&quot;&gt;48dp&lt;/dimen&gt;\n&lt;!-- Toolbar height, Floating button size --&gt;\n&lt;dimen name=&quot;dp_56&quot;&gt;56dp&lt;/dimen&gt;\n&lt;!-- Button min width --&gt;\n&lt;dimen name=&quot;dp_64&quot;&gt;64dp&lt;/dimen&gt;\n&lt;!-- Title, List item --&gt;\n&lt;dimen name=&quot;dp_72&quot;&gt;72dp&lt;/dimen&gt;\n</code></pre>\n<h3>ツールバーとナビゲーションドロワー</h3>\n<p>Android 4.4 → 5.0 になり、印象的だったのが、Navigation Drawer が、Toolbar（Actionbar）上に現れること。その影響なのか Toolbar は、レイアウトファイルに記述すれば使えるようになる。これでこの上に、ドロワーを重ねることができる。</p>\n<pre><code>&lt;android.support.v7.widget.Toolbar\n    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    style=&quot;@style/ToolBarStyle&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;wrap_content&quot;\n    android:background=&quot;?attr/colorPrimary&quot;\n    android:minHeight=&quot;@dimen/abc_action_bar_default_height_material&quot; /&gt;\n</code></pre>\n<p>これと DrawerLayout を使えば、ある程度までは上手く実装できるのですが、これが結構面倒くさい。自分の場合は、何故かドロワーをエッジスワイプするアクションが途中で止まる（？）不具合が発生し、何日か不貞腐れていたのですが、以下のテンプレートを使えば一瞬だった。神。</p>\n<ul>\n<li><a href=\"https://github.com/kanytu/Android-studio-material-template\">kanytu/Android-studio-material-template</a></li>\n</ul>\n<h2><a href=\"http://realm.io/jp/docs/java/\">Realm</a></h2>\n<blockquote>\n<p>Realmは、SQLiteやCoreDataから置き換わるモバイルデータベースです。</p>\n</blockquote>\n<p>という紹介の通り、iOS（Objective-C）や Android（Java）から、簡単に使える。前に、SQLite を iOS/Android から生で触ったことがあるのですが、データベースの置き場所を作ったり、<code>CREATE TABLE</code> から始めたりと面倒な印象があるし、CoreData に至っては難しくてよく分からん（一応使ってるけれど）。</p>\n<h3>モデル</h3>\n<p>Realm は、<code>RealmObject</code> を継承したモデルを元にデータベースを勝手に生成してくれます。便利！ ... ですが、何故かここで少しハマり、作成したモデルがコンパイルエラー。結局、getter, setter の指定が Realm 内の規約と少し違っていたことが原因だった。</p>\n<p>その際に、Android Studio では、[Command + N] → [Getter and Setter] を選択すれば、勝手に生成してくれることを知る。恥ずかしいことに、今まで頑張ってタイプしてた。自動生成に任せれば、問題なしでした。</p>\n<h3>Autoincrement</h3>\n<p>Realm-Java では、Autoincrement がまだ使えないようなので、最大値 + 1 して簡易的に実現した。</p>\n<pre><code>public void insert(String name, boolean completed) {\n    mRealm.beginTransaction();\n    Todo todo = mRealm.createObject(Todo.class);\n    todo.setId((int)mRealm.where(Todo.class).maximumInt(&quot;id&quot;) + 1);\n    todo.setName(name);\n    todo.setCompleted(completed);\n    mRealm.commitTransaction();\n}\n</code></pre>\n<h2>こぼればなし</h2>\n<p>今回、実装する際に、GitHub に転がっている他の Android プロジェクト <a href=\"https://github.com/forkhubs/android\">forkhubs/android</a> を参考にしたのだが、かなり勉強になった。</p>\n<p>例えば、ある ActivityA から ActivityB を呼びたい時に、B に以下を書いておけば：</p>\n<pre><code>public static Intent createIntent(Context context, int id) {\n    Intent intent = new Intent(context, ActivityB.class);\n    intent.putExtra(&quot;extra.id&quot;, id);\n    return intent;\n}\n</code></pre>\n<p>ActivityA から ActivityB を呼ぶときは、以下で良い：</p>\n<pre><code>startActivity(ActivityB.createIntent(this, &quot;1&quot;));\n</code></pre>\n<p>AcitityA からは、ActivityB に渡す値のキーを気にする必要がないから、綺麗にまとまる。</p>\n",
  "dir": "static/content/archives",
  "base": "2015-04-29-material-design-todo.json",
  "ext": ".json",
  "sourceBase": "2015-04-29-material-design-todo.md",
  "sourceExt": ".md"
}