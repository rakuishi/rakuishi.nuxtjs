{
  "categories": [
    "iOS"
  ],
  "date": "2013-01-12T06:17:31.000Z",
  "draft": false,
  "slug": 5402,
  "title": "[Passbook プログラミング] はじめてのパス（Pass）作成",
  "bodyContent": "iOS6 の新機能として、Passbook があります。航空機のチケット、お店のクーポン、ポイントカードなどがひとつのアプリで管理できるようになる、というものです。Passbook では、それらをパスと呼んでいます。\n\nパスは、iOS Developer Program（$99/year）の登録をしていれば、実機に配信することができます（Mac も必要です）。パスの作成は、テキストエディタで JSON 形式のファイルを編集し、画像を用意することで簡単にできます。\n\nこの記事では、パスを作成して、配布する方法を解説します。\n\n## パスを作成 → 配布する簡単な流れ\n\n1. パスを作成するのに必要なファイルをダウンロードする\n1. Provisioning Portal で証明書の登録などを済ませる\n1. テンプレートを編集して自分仕様に編集する\n1. テンプレートファイルに付属するツールでパッケージ化（.pkpass 形式）する\n1. .pkpass をウェブにアップロードして、iPhone の Safari からリンクを踏む\n\n## 1. パスを作成するのに必要なファイルをダウンロードする\n\n[ここ](https://developer.apple.com/downloads/index.action?name=Passbook)から必要なファイルをダウンロードします。\n\n## 2. Provisioning Portal で作業する\n\n1. [iOS Provisioning Portal](https://developer.apple.com/ios/manage/passtypeids/index.action) で「Pass Type IDs」を選択する\n1. 「New Pass Type ID」を選択する\n1. Description（例：test）と Pass Type Identifier（例：pass.com.rakuishi.test）を入力して「Submit」ボタンを押す\n1. 上記で登録したものが「Pass Type IDs」に追加されているので「Configure」リンクをたどる\n1. さらに「Configure」して、ポップアップの指示に従い、CSR ファイルをアップロードする。その後、証明書をダウンロードする画面になるのでダウンロードする。\n1. 証明書を開いてキーチェーンに保存する。保存した証明書の「情報を見る」で「部署」の値（チーム ID）と「組織」を控える。このチーム ID は、アルファベット大文字+数字の10桁の文字列でした。\n\n## 3. テンプレートを編集する\n\nここからは、パスの作成になります。パスの作成は、テンプレートファイルを編集して作成するのが最初は簡単です。\n\nテンプレートフォルダ → Passes → Generic.raw → pass.json のファイルを参考に、ここでは、最低限の機能に絞ったパスを作成してみます。JSON ファイルは、通常のテキストエディタで編集できます。\n\npassTypeIdentifier（Pass Type Identifier）, teamIdentifier（部署）, organizationName（組織）の値は、自分の値に変えておきます。\n\n**pass.json**\n\n```\n{\n  \"formatVersion\" : 1,\n  \"passTypeIdentifier\" : \"pass.com.rakuishi.test\",\n  \"serialNumber\" : \"1234567890\",\n  \"teamIdentifier\" : \"CLLJ787FV4\",\n  \"organizationName\" : \"KOICHIRO OCHIISHI\",\n  \"logoText\" : \"rakuishi\",\n  \"description\" : \"This is my website.\",\n  \"foregroundColor\" : \"rgb(44, 44, 44)\",\n  \"backgroundColor\" : \"rgb(255, 255, 255)\",\n  \"generic\" : {\n    \"primaryFields\" : [\n      {\n        \"key\" : \"description\",\n        \"label\" : \"This is my website.\",\n        \"value\" : \"http://rakuishi.com/\"\n      }\n    ]\n  \"locations\" : [\n    {\n      \"longitude\" : 139.676183,\n      \"latitude\" : 35.677061\n    }\n  ],\n  }\n}\n```\n\n位置情報を登録しておくと、その周囲に近付いた時に、通知が来ます。パスのタイプによっても違うのですが、100m 〜 1000m 範囲に入ると通知が来るようです。また、時刻による通知もできます。\n\n住所やランドマーク名から緯度、経度を取得するのに、[Geocoding - 住所から緯度経度を検索](http://www.geocoding.jp/)というサービスを利用しました。ちなみに、経度 = longitude, 緯度 = latitude です。\n\nここでは、画像を含めて、次のようなファイルを用意しました。\n\n```\npass.json\nicon.png\nicon@2x.png\nlogo.png\nlogo@2x.png\n```\n\n## 4. パッケージ化（.pkpass）\n\nテンプレートフォルダ → signpass フォルダにある Xcode プロジェクト（signpass.xcodeproj）を開いて、ビルドします。\n\n作成された実行形式ファイル signpass をユーザーフォルダの書類に置きます。signpass は、Show in Finder から保存場所に飛べます。\n\n![](/images/2013/01/5402_1.png)\n\n書類（Documents）に、作業フォルダも移しておきます。そして、Terminal から以下のようなコマンドで .pkpass ファイルが作成できます。\n\n```\ncd Documents/\n./signpass -p Passbook.raw\n```\n\n.pkpass ファイルは、OSX Lion では、ダブルクリックで開くことができます。\n\n## 5. ウェブにアップロードする\n\n.pkpass ファイルをウェブにアップロードします。そのリンクを iPhone の Safari から踏めば、Passbook に格納されるのですが、サーバーの設定によってはダウンロードできません。\n\nこれは、.pkpass 拡張子と MIME タイプの関連付けがうまくいってないからです。僕は、.pkpass ファイルと同じ階層に .htaccess ファイルを作成し、以下の内容を記述しました。\n\n**.htaccess**\n\n```\nAddType application/vnd.apple.pkpass pkpass\n```\n\nここまで作業すれば、iPhone の Safari から以下のリンクを踏むと、Passbook にパスが格納されます。\n\n[Passbook.pkpass をダウンロードする](http://develop.rakuishi.com/download/passbook.pkpass)\n\n![](/images/2013/01/5402_2.png)\n\n## さいごに\n\nパスは、サーバーを用意すれば更新作業を行うことができるみたいです。詳しい情報は、アップルが用意しているドキュメントをご覧ください。\n\n参考：[Passbook プログラミングガイド](https://developer.apple.com/jp/devcenter/ios/library/documentation/PassKit_PG.pdf)",
  "bodyHtml": "<p>iOS6 の新機能として、Passbook があります。航空機のチケット、お店のクーポン、ポイントカードなどがひとつのアプリで管理できるようになる、というものです。Passbook では、それらをパスと呼んでいます。</p>\n<p>パスは、iOS Developer Program（$99/year）の登録をしていれば、実機に配信することができます（Mac も必要です）。パスの作成は、テキストエディタで JSON 形式のファイルを編集し、画像を用意することで簡単にできます。</p>\n<p>この記事では、パスを作成して、配布する方法を解説します。</p>\n<h2>パスを作成 → 配布する簡単な流れ</h2>\n<ol>\n<li>パスを作成するのに必要なファイルをダウンロードする</li>\n<li>Provisioning Portal で証明書の登録などを済ませる</li>\n<li>テンプレートを編集して自分仕様に編集する</li>\n<li>テンプレートファイルに付属するツールでパッケージ化（.pkpass 形式）する</li>\n<li>.pkpass をウェブにアップロードして、iPhone の Safari からリンクを踏む</li>\n</ol>\n<h2>1. パスを作成するのに必要なファイルをダウンロードする</h2>\n<p><a href=\"https://developer.apple.com/downloads/index.action?name=Passbook\">ここ</a>から必要なファイルをダウンロードします。</p>\n<h2>2. Provisioning Portal で作業する</h2>\n<ol>\n<li><a href=\"https://developer.apple.com/ios/manage/passtypeids/index.action\">iOS Provisioning Portal</a> で「Pass Type IDs」を選択する</li>\n<li>「New Pass Type ID」を選択する</li>\n<li>Description（例：test）と Pass Type Identifier（例：pass.com.rakuishi.test）を入力して「Submit」ボタンを押す</li>\n<li>上記で登録したものが「Pass Type IDs」に追加されているので「Configure」リンクをたどる</li>\n<li>さらに「Configure」して、ポップアップの指示に従い、CSR ファイルをアップロードする。その後、証明書をダウンロードする画面になるのでダウンロードする。</li>\n<li>証明書を開いてキーチェーンに保存する。保存した証明書の「情報を見る」で「部署」の値（チーム ID）と「組織」を控える。このチーム ID は、アルファベット大文字+数字の10桁の文字列でした。</li>\n</ol>\n<h2>3. テンプレートを編集する</h2>\n<p>ここからは、パスの作成になります。パスの作成は、テンプレートファイルを編集して作成するのが最初は簡単です。</p>\n<p>テンプレートフォルダ → Passes → Generic.raw → pass.json のファイルを参考に、ここでは、最低限の機能に絞ったパスを作成してみます。JSON ファイルは、通常のテキストエディタで編集できます。</p>\n<p>passTypeIdentifier（Pass Type Identifier）, teamIdentifier（部署）, organizationName（組織）の値は、自分の値に変えておきます。</p>\n<p><strong>pass.json</strong></p>\n<pre><code>{\n  &quot;formatVersion&quot; : 1,\n  &quot;passTypeIdentifier&quot; : &quot;pass.com.rakuishi.test&quot;,\n  &quot;serialNumber&quot; : &quot;1234567890&quot;,\n  &quot;teamIdentifier&quot; : &quot;CLLJ787FV4&quot;,\n  &quot;organizationName&quot; : &quot;KOICHIRO OCHIISHI&quot;,\n  &quot;logoText&quot; : &quot;rakuishi&quot;,\n  &quot;description&quot; : &quot;This is my website.&quot;,\n  &quot;foregroundColor&quot; : &quot;rgb(44, 44, 44)&quot;,\n  &quot;backgroundColor&quot; : &quot;rgb(255, 255, 255)&quot;,\n  &quot;generic&quot; : {\n    &quot;primaryFields&quot; : [\n      {\n        &quot;key&quot; : &quot;description&quot;,\n        &quot;label&quot; : &quot;This is my website.&quot;,\n        &quot;value&quot; : &quot;http://rakuishi.com/&quot;\n      }\n    ]\n  &quot;locations&quot; : [\n    {\n      &quot;longitude&quot; : 139.676183,\n      &quot;latitude&quot; : 35.677061\n    }\n  ],\n  }\n}\n</code></pre>\n<p>位置情報を登録しておくと、その周囲に近付いた時に、通知が来ます。パスのタイプによっても違うのですが、100m 〜 1000m 範囲に入ると通知が来るようです。また、時刻による通知もできます。</p>\n<p>住所やランドマーク名から緯度、経度を取得するのに、<a href=\"http://www.geocoding.jp/\">Geocoding - 住所から緯度経度を検索</a>というサービスを利用しました。ちなみに、経度 = longitude, 緯度 = latitude です。</p>\n<p>ここでは、画像を含めて、次のようなファイルを用意しました。</p>\n<pre><code>pass.json\nicon.png\nicon@2x.png\nlogo.png\nlogo@2x.png\n</code></pre>\n<h2>4. パッケージ化（.pkpass）</h2>\n<p>テンプレートフォルダ → signpass フォルダにある Xcode プロジェクト（signpass.xcodeproj）を開いて、ビルドします。</p>\n<p>作成された実行形式ファイル signpass をユーザーフォルダの書類に置きます。signpass は、Show in Finder から保存場所に飛べます。</p>\n<p><img src=\"/images/2013/01/5402_1.png\" alt=\"\"></p>\n<p>書類（Documents）に、作業フォルダも移しておきます。そして、Terminal から以下のようなコマンドで .pkpass ファイルが作成できます。</p>\n<pre><code>cd Documents/\n./signpass -p Passbook.raw\n</code></pre>\n<p>.pkpass ファイルは、OSX Lion では、ダブルクリックで開くことができます。</p>\n<h2>5. ウェブにアップロードする</h2>\n<p>.pkpass ファイルをウェブにアップロードします。そのリンクを iPhone の Safari から踏めば、Passbook に格納されるのですが、サーバーの設定によってはダウンロードできません。</p>\n<p>これは、.pkpass 拡張子と MIME タイプの関連付けがうまくいってないからです。僕は、.pkpass ファイルと同じ階層に .htaccess ファイルを作成し、以下の内容を記述しました。</p>\n<p><strong>.htaccess</strong></p>\n<pre><code>AddType application/vnd.apple.pkpass pkpass\n</code></pre>\n<p>ここまで作業すれば、iPhone の Safari から以下のリンクを踏むと、Passbook にパスが格納されます。</p>\n<p><a href=\"http://develop.rakuishi.com/download/passbook.pkpass\">Passbook.pkpass をダウンロードする</a></p>\n<p><img src=\"/images/2013/01/5402_2.png\" alt=\"\"></p>\n<h2>さいごに</h2>\n<p>パスは、サーバーを用意すれば更新作業を行うことができるみたいです。詳しい情報は、アップルが用意しているドキュメントをご覧ください。</p>\n<p>参考：<a href=\"https://developer.apple.com/jp/devcenter/ios/library/documentation/PassKit_PG.pdf\">Passbook プログラミングガイド</a></p>\n",
  "dir": "static/content/archives",
  "base": "2013-01-12-5402.json",
  "ext": ".json",
  "sourceBase": "2013-01-12-5402.md",
  "sourceExt": ".md"
}