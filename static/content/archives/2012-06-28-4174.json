{
  "categories": [
    "iOS"
  ],
  "date": "2012-06-28T00:20:54.000Z",
  "draft": false,
  "slug": 4174,
  "title": "[iOS SDK] OAuth 認証による Evernote に新規ノートを作成するアプリを書いてみた",
  "bodyContent": "![](/images/2012/03/4174_1.png)\n\n以前、iPhone アプリで Evernote と連携する方法を書いたのですが、認証方法が変わって、これからは OAuth 認証をする必要があるみたいです。\n\n関連：認証 - Evernote Developers\n\n今回は、Xcode で作成されるプロジェクトへの、Evernote SDK の導入、そして OAuth 認証、新規ノートを作成するまでの手順をさくっと説明します。\n\n流れは、基本的に以前書いた記事と同じなので、さらっと読んでみて下さいね。\n\n関連：[[iOS SDK][Evernote API] Evernote に新規ノートを作成するサンプルコードを動かすまでの手順](http://rakuishi.com/archives/3068/)\n\n## 1. API キーの取得\n\n赤丸の1番「API キーの取得」から、必要な情報を記述して、API キーを取得します。\n\nConsumer Key, Secret を控えておきます。\n\n[クラウド API - Evernote Developers](http://dev.evernote.com/intl/jp/documentation/cloud/)\n\n## 2. iOS 向けの Evernote SDK を Github からダウンロード\n\n以下のリンクから、プロジェクトに追加する Evernote SDK をダウンロードします。\n\n[evernote/evernote-sdk-ios · GitHub](https://github.com/evernote/evernote-sdk-ios)\n\n## 3. プロジェクトの作成\n\nでは、Xcode で新規プロジェクトを作成していきます。\n\nなんでもいいのですが、ボタンを作成するのが面倒なので、「Master-Detail Application」で作成して、「Use Automatic Reference Counting」だけにチェックを入れて作成します。\n\n## 4. Evernote SDK の導入\n\n先程、git からダウンロードしたファイルの中に「evernote-sdk-ios」というフォルダがあると思いますので、それを作成したプロジェクトに突っ込みます。\n\nこの状態で Build すると ARC Restrictions と怒られるので（突っ込んだファイルが ARC に対応してないので）、次の方法で無効にします。\n\nARC を有効にしたくないファイルのコンパイルオプションに -fno-objc-arc を入力すれば OK です。\n\n参考：[Objective-C で ARC を有効にしたプロジェクトで、一部ファイルのみ ARC を無効にする方法 | Zero4Racer PRO Developer's Blog](http://www.zero4racer.com/blog/334)\n\n## 5. Security.framework の追加\n\n今度は、「Security.framework」を追加します。\n\n参考：[[iOS SDK][Xcode 4.3] フレームワークをプロジェクトに追加する方法 | ラクイシロク](http://rakuishi.com/archives/2987/)\n\nここまでで Build してあげると警告は残りますが、 Build に成功するはずです。\n\n## 6. プログラムを書き換える\n\n新規作成したプロジェクトのコードを書き換えていきましょう。\n\nMasterViewController.h\n\n```\n#import <UIKit/UIKit.h>\n\n@interface MasterViewController : UITableViewController\n\n@end\n```\n\nMasterViewController.m\n\ndefine の CONSUMER_KEY, CONSUMER_SECRET は、ご自身のに変えて下さい。\n\n```\n#import \"MasterViewController.h\"\n#import \"EvernoteSDK.h\"\n\n#define EVERNOTE_HOST   @\"sandbox.evernote.com\"\n#define CONSUMER_KEY    @\"XXXXXXX\"   // Consumer key\n#define CONSUMER_SECRET @\"XXXXXXXXXXXXXXXX\"  // Consumer secret\n\n@interface MasterViewController ()\n@end\n\n@implementation MasterViewController\n\n- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil\n{\n    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];\n    if (self) {\n        self.title = @\"Evernote OAuth\";\n    }\n    return self;\n}\n\t\t\t\t\t\t\t\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n}\n\n- (void)viewDidUnload\n{\n    [super viewDidUnload];\n}\n\n- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation\n{\n    return (interfaceOrientation != UIInterfaceOrientationPortraitUpsideDown);\n}\n\n#pragma mark - Table View\n\n- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView\n{\n    return 1;\n}\n\n- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section\n{\n    return 3;\n}\n\n// Customize the appearance of table view cells.\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    static NSString *CellIdentifier = @\"Cell\";\n    \n    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];\n    if (cell == nil) {\n        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];\n        cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;\n    }\n\n    switch ([indexPath row]) {\n        case 0:\n            cell.textLabel.text = @\"Evernote OAuth 認証\";\n            break;\n        case 1:\n            cell.textLabel.text = @\"Logout\";\n            break;\n        default:\n            cell.textLabel.text = @\"Evernote にノートを送る\";\n            break;\n    }\n    \n    return cell;\n}\n\n- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    switch ([indexPath row]) {\n        case 0:\n            [self login];\n            break;\n        case 1:\n            [self logout];\n            break;\n        default:\n            [self sendEvernote];\n            break;\n    }\n    [tableView deselectRowAtIndexPath:indexPath animated:YES];\n}\n\n- (void)login\n{\n    [EvernoteSession setSharedSessionHost:EVERNOTE_HOST consumerKey:CONSUMER_KEY consumerSecret:CONSUMER_SECRET];\n    \n    EvernoteSession *session = [EvernoteSession sharedSession];\n    [session authenticateWithViewController:self completionHandler:^(NSError *error) {\n        if (error || !session.isAuthenticated) {\n            NSLog(@\"Error: Could not authenticate\");\n        } else {\n            NSLog(@\"Authenticated!\");\n        } \n    }];\n}\n\n- (void)logout\n{\n    [[EvernoteSession sharedSession] logout];\n}\n\n- (void)sendEvernote\n{\n    EDAMNote *note = [[EDAMNote alloc] init];\n    note.title = @\"note.title\";\n    note.content = @\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<!DOCTYPE en-note SYSTEM \\\"http://xml.evernote.com/pub/enml2.dtd\\\">\\n<en-note>note.content</en-note>\";\n    \n    EvernoteNoteStore *noteStore = [EvernoteNoteStore noteStore];\n    \n    @try {\n        [noteStore createNote:note success:^(EDAMNote *note) {} failure:^(NSError *error) {\n            NSLog(@\"Error: %@\", error);                                            \n        }];\n    }\n    @catch (EDAMUserException *e) {\n        return;\n    }\n    \n    NSLog(@\"Note was saved.\");\n}\n\n@end\n```\n\nビルドすれば問題なく動くはずです。\n\n認証してノートを送信してみたら、Evernote SandBox アカウントにノートが作成されていることを確認して下さい。",
  "bodyHtml": "<p><img src=\"/images/2012/03/4174_1.png\" alt=\"\"></p>\n<p>以前、iPhone アプリで Evernote と連携する方法を書いたのですが、認証方法が変わって、これからは OAuth 認証をする必要があるみたいです。</p>\n<p>関連：認証 - Evernote Developers</p>\n<p>今回は、Xcode で作成されるプロジェクトへの、Evernote SDK の導入、そして OAuth 認証、新規ノートを作成するまでの手順をさくっと説明します。</p>\n<p>流れは、基本的に以前書いた記事と同じなので、さらっと読んでみて下さいね。</p>\n<p>関連：<a href=\"http://rakuishi.com/archives/3068/\">[iOS SDK][Evernote API] Evernote に新規ノートを作成するサンプルコードを動かすまでの手順</a></p>\n<h2>1. API キーの取得</h2>\n<p>赤丸の1番「API キーの取得」から、必要な情報を記述して、API キーを取得します。</p>\n<p>Consumer Key, Secret を控えておきます。</p>\n<p><a href=\"http://dev.evernote.com/intl/jp/documentation/cloud/\">クラウド API - Evernote Developers</a></p>\n<h2>2. iOS 向けの Evernote SDK を Github からダウンロード</h2>\n<p>以下のリンクから、プロジェクトに追加する Evernote SDK をダウンロードします。</p>\n<p><a href=\"https://github.com/evernote/evernote-sdk-ios\">evernote/evernote-sdk-ios · GitHub</a></p>\n<h2>3. プロジェクトの作成</h2>\n<p>では、Xcode で新規プロジェクトを作成していきます。</p>\n<p>なんでもいいのですが、ボタンを作成するのが面倒なので、「Master-Detail Application」で作成して、「Use Automatic Reference Counting」だけにチェックを入れて作成します。</p>\n<h2>4. Evernote SDK の導入</h2>\n<p>先程、git からダウンロードしたファイルの中に「evernote-sdk-ios」というフォルダがあると思いますので、それを作成したプロジェクトに突っ込みます。</p>\n<p>この状態で Build すると ARC Restrictions と怒られるので（突っ込んだファイルが ARC に対応してないので）、次の方法で無効にします。</p>\n<p>ARC を有効にしたくないファイルのコンパイルオプションに -fno-objc-arc を入力すれば OK です。</p>\n<p>参考：<a href=\"http://www.zero4racer.com/blog/334\">Objective-C で ARC を有効にしたプロジェクトで、一部ファイルのみ ARC を無効にする方法 | Zero4Racer PRO Developer's Blog</a></p>\n<h2>5. Security.framework の追加</h2>\n<p>今度は、「Security.framework」を追加します。</p>\n<p>参考：<a href=\"http://rakuishi.com/archives/2987/\">[iOS SDK][Xcode 4.3] フレームワークをプロジェクトに追加する方法 | ラクイシロク</a></p>\n<p>ここまでで Build してあげると警告は残りますが、 Build に成功するはずです。</p>\n<h2>6. プログラムを書き換える</h2>\n<p>新規作成したプロジェクトのコードを書き換えていきましょう。</p>\n<p>MasterViewController.h</p>\n<pre><code>#import &lt;UIKit/UIKit.h&gt;\n\n@interface MasterViewController : UITableViewController\n\n@end\n</code></pre>\n<p>MasterViewController.m</p>\n<p>define の CONSUMER_KEY, CONSUMER_SECRET は、ご自身のに変えて下さい。</p>\n<pre><code>#import &quot;MasterViewController.h&quot;\n#import &quot;EvernoteSDK.h&quot;\n\n#define EVERNOTE_HOST   @&quot;sandbox.evernote.com&quot;\n#define CONSUMER_KEY    @&quot;XXXXXXX&quot;   // Consumer key\n#define CONSUMER_SECRET @&quot;XXXXXXXXXXXXXXXX&quot;  // Consumer secret\n\n@interface MasterViewController ()\n@end\n\n@implementation MasterViewController\n\n- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil\n{\n    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];\n    if (self) {\n        self.title = @&quot;Evernote OAuth&quot;;\n    }\n    return self;\n}\n\t\t\t\t\t\t\t\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n}\n\n- (void)viewDidUnload\n{\n    [super viewDidUnload];\n}\n\n- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation\n{\n    return (interfaceOrientation != UIInterfaceOrientationPortraitUpsideDown);\n}\n\n#pragma mark - Table View\n\n- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView\n{\n    return 1;\n}\n\n- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section\n{\n    return 3;\n}\n\n// Customize the appearance of table view cells.\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    static NSString *CellIdentifier = @&quot;Cell&quot;;\n    \n    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];\n    if (cell == nil) {\n        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];\n        cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;\n    }\n\n    switch ([indexPath row]) {\n        case 0:\n            cell.textLabel.text = @&quot;Evernote OAuth 認証&quot;;\n            break;\n        case 1:\n            cell.textLabel.text = @&quot;Logout&quot;;\n            break;\n        default:\n            cell.textLabel.text = @&quot;Evernote にノートを送る&quot;;\n            break;\n    }\n    \n    return cell;\n}\n\n- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    switch ([indexPath row]) {\n        case 0:\n            [self login];\n            break;\n        case 1:\n            [self logout];\n            break;\n        default:\n            [self sendEvernote];\n            break;\n    }\n    [tableView deselectRowAtIndexPath:indexPath animated:YES];\n}\n\n- (void)login\n{\n    [EvernoteSession setSharedSessionHost:EVERNOTE_HOST consumerKey:CONSUMER_KEY consumerSecret:CONSUMER_SECRET];\n    \n    EvernoteSession *session = [EvernoteSession sharedSession];\n    [session authenticateWithViewController:self completionHandler:^(NSError *error) {\n        if (error || !session.isAuthenticated) {\n            NSLog(@&quot;Error: Could not authenticate&quot;);\n        } else {\n            NSLog(@&quot;Authenticated!&quot;);\n        } \n    }];\n}\n\n- (void)logout\n{\n    [[EvernoteSession sharedSession] logout];\n}\n\n- (void)sendEvernote\n{\n    EDAMNote *note = [[EDAMNote alloc] init];\n    note.title = @&quot;note.title&quot;;\n    note.content = @&quot;&lt;?xml version=\\&quot;1.0\\&quot; encoding=\\&quot;UTF-8\\&quot;?&gt;\\n&lt;!DOCTYPE en-note SYSTEM \\&quot;http://xml.evernote.com/pub/enml2.dtd\\&quot;&gt;\\n&lt;en-note&gt;note.content&lt;/en-note&gt;&quot;;\n    \n    EvernoteNoteStore *noteStore = [EvernoteNoteStore noteStore];\n    \n    @try {\n        [noteStore createNote:note success:^(EDAMNote *note) {} failure:^(NSError *error) {\n            NSLog(@&quot;Error: %@&quot;, error);                                            \n        }];\n    }\n    @catch (EDAMUserException *e) {\n        return;\n    }\n    \n    NSLog(@&quot;Note was saved.&quot;);\n}\n\n@end\n</code></pre>\n<p>ビルドすれば問題なく動くはずです。</p>\n<p>認証してノートを送信してみたら、Evernote SandBox アカウントにノートが作成されていることを確認して下さい。</p>\n",
  "dir": "static/content/archives",
  "base": "2012-06-28-4174.json",
  "ext": ".json",
  "sourceBase": "2012-06-28-4174.md",
  "sourceExt": ".md"
}