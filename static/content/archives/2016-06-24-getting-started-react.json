{
  "categories": [
    "JavaScript"
  ],
  "date": "2016-06-23T15:11:32.000Z",
  "draft": false,
  "slug": "getting-started-react",
  "title": "Hello, React.js!",
  "bodyContent": "今の業務では、JavaScript で Single Page Application を作る機会はないのですが、後学のために React.js の開発環境の構築と、いくつかチュートリアルを写経しました。この記事では、React.js アプリをビルドし、Hello, World! アプリを作成するところまでを紹介します。\n\n## ビルド環境が必要になる理由\n\nReact は JavaScript のライブラリなので jQuery と同じように、スクリプトタグを貼り付けても利用できますが、ツールを使ってコードをひとつのファイルにまとめてビルドする開発方法が推奨されています。\n\nReact では、以下のように変換が必要になる書きかたを積極的に行っています。\n\n* ES6（別名 ES2015）: 次期 JavaScript 仕様。ブラウザがサポートしていないと利用できないため、従来の ES5 仕様に変換する\n* JSX: JavaScript の中に HTML タグを書ける記法（.jsx という拡張子が使われることがある）。ブラウザ上で動かすには JavaScript で表現できるコードに変換する\n\nそれらの変換をブラウザ上でサポートする JavaScript はあるものの、ブラウザ上（ユーザーの手元）で行うのは効率が良くないため、予め変換し、さらに HTTP リクエスト数を削減するために、ひとつのファイルにまとめることが推奨されているというわけです。\n\nちなみに、React.js v15.1.0 をスクリプトファイルだけで動かすには、react.js, react-dom.js, browser.js（ES6）, JSXTransformer.js（JSX）が必要になります。\n\nここでは、それらのスクリプトファイルで担っている機能を JavaScript のパッケージ管理ツール npm で導入していきます。\n\n## ビルド環境を準備する\n\n`npm init` により package.json を作成し、必要となるライブラリをインストールしていきます。package.json が更新され、node_modules フォルダが作成されます。\n\n```\n$ mkdir react\n$ cd react\n$ npm init\n$ npm install --save react react-dom\n$ npm install --save-dev watchify babelify babel-preset-react babel-preset-es2015\n```\n\nインストールしたライブラリを簡単に説明しておきます。\n\n* react: The core React library\n* react-dom: The ReactDom library\n* [babelify](https://github.com/babel/babelify): プリセットと組み合わせて変換してくれる\n* [preset-es2015](http://babeljs.io/docs/plugins/preset-es2015/): ES6（ES2015）\n* [preset-react](http://babeljs.io/docs/plugins/preset-react/): React, JSX が含まれている\n* [watchify](https://github.com/substack/watchify): [browserify](https://github.com/substack/node-browserify) というビルドツールをファイル変更時に自動でコンパイルする\n\nbabelify で使用するプリセットを .babelrc ファイルに宣言します。\n\n```\n$ echo '{ \"presets\": [\"react\", \"es2015\"] }' > .babelrc\n```\n\npackage.js の scripst に、ビルドするためのコマンドを書いていきます。ここに書いたコマンドは `$ npm run hoge` のように入力すれば、実行されます。ちなみに、ライブラリを `npm install --global watchify` とグローバルインストールすると、`$ watchify -t babelify ./main.js -o ./bundle.js` と直接コマンドが叩けます。\n\n```\n\"scripts\": {\n  \"watch\": \"watchify -t babelify ./main.js -o ./bundle.js\"\n}\n```\n\n必要になるファイルを用意して、試しに走らせてみます。\n\n```\n$ touch index.html\n$ touch main.js\n$ npm run watch\n```\n\nmain.js のファイルに変更があると bundle.js が出力されるはずです。main.js には何も書いていませんが、bundle.js には `require` 関数の定義だけが出力されています。\n\n## Hello, World! アプリを作成する\n\nここまでで開発環境の準備が終わったので、React アプリを書いてみます。先程、作成した index.html, main.js を書いていきます。\n\n### index.html\n\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n  </head>\n  <body>\n    <div id=\"content\"></div>\n    <script src=\"./bundle.js\"></script>\n  </body>\n</html>\n```\n\n### main.js\n\n`import` は、ES6 で定義されている記述方法です。また、`<h1>Hello, World!</h1>` のように JavaScript 中に HTML タグを記述しているのが、JSX です。Sublime Text をお使いの方は、Babel プラグインをインストール後に、JavaScript(Babel) の Syntax を有効にすれば、適切にハイライトされるようになります。\n\n```\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nReactDOM.render(\n  <h1>Hello, World!</h1>,\n  document.getElementById('content')\n);\n```\n\nindex.html をブラウザで表示すると、「Hello, World!」と表示されているはずです。\n\n## 参考\n\n### 開発環境\n\n* [Reactをnpmでビルドする方法 browserify (watchify) + babelify編 | mae's blog](http://mae.chab.in/archives/2765)\n* [春からはじめるモダンJavaScript / ES2015 - Qiita](http://qiita.com/mizchi/items/3bbb3f466a3b5011b509)\n\n### チュートリアル・デモ\n\n* [Tutorial | React](https://facebook.github.io/react/docs/tutorial.html)\n* [Thinking in React | React](https://facebook.github.io/react/docs/thinking-in-react.html)\n* [ruanyf/react-demos: a collection of simple demos of React.js](https://github.com/ruanyf/react-demos)\n* [rakuishi/react-js-practice: Hello, React.js!](https://github.com/rakuishi/react-js-practice)",
  "bodyHtml": "<p>今の業務では、JavaScript で Single Page Application を作る機会はないのですが、後学のために React.js の開発環境の構築と、いくつかチュートリアルを写経しました。この記事では、React.js アプリをビルドし、Hello, World! アプリを作成するところまでを紹介します。</p>\n<h2>ビルド環境が必要になる理由</h2>\n<p>React は JavaScript のライブラリなので jQuery と同じように、スクリプトタグを貼り付けても利用できますが、ツールを使ってコードをひとつのファイルにまとめてビルドする開発方法が推奨されています。</p>\n<p>React では、以下のように変換が必要になる書きかたを積極的に行っています。</p>\n<ul>\n<li>ES6（別名 ES2015）: 次期 JavaScript 仕様。ブラウザがサポートしていないと利用できないため、従来の ES5 仕様に変換する</li>\n<li>JSX: JavaScript の中に HTML タグを書ける記法（.jsx という拡張子が使われることがある）。ブラウザ上で動かすには JavaScript で表現できるコードに変換する</li>\n</ul>\n<p>それらの変換をブラウザ上でサポートする JavaScript はあるものの、ブラウザ上（ユーザーの手元）で行うのは効率が良くないため、予め変換し、さらに HTTP リクエスト数を削減するために、ひとつのファイルにまとめることが推奨されているというわけです。</p>\n<p>ちなみに、React.js v15.1.0 をスクリプトファイルだけで動かすには、react.js, react-dom.js, browser.js（ES6）, JSXTransformer.js（JSX）が必要になります。</p>\n<p>ここでは、それらのスクリプトファイルで担っている機能を JavaScript のパッケージ管理ツール npm で導入していきます。</p>\n<h2>ビルド環境を準備する</h2>\n<p><code>npm init</code> により package.json を作成し、必要となるライブラリをインストールしていきます。package.json が更新され、node_modules フォルダが作成されます。</p>\n<pre><code>$ mkdir react\n$ cd react\n$ npm init\n$ npm install --save react react-dom\n$ npm install --save-dev watchify babelify babel-preset-react babel-preset-es2015\n</code></pre>\n<p>インストールしたライブラリを簡単に説明しておきます。</p>\n<ul>\n<li>react: The core React library</li>\n<li>react-dom: The ReactDom library</li>\n<li><a href=\"https://github.com/babel/babelify\">babelify</a>: プリセットと組み合わせて変換してくれる</li>\n<li><a href=\"http://babeljs.io/docs/plugins/preset-es2015/\">preset-es2015</a>: ES6（ES2015）</li>\n<li><a href=\"http://babeljs.io/docs/plugins/preset-react/\">preset-react</a>: React, JSX が含まれている</li>\n<li><a href=\"https://github.com/substack/watchify\">watchify</a>: <a href=\"https://github.com/substack/node-browserify\">browserify</a> というビルドツールをファイル変更時に自動でコンパイルする</li>\n</ul>\n<p>babelify で使用するプリセットを .babelrc ファイルに宣言します。</p>\n<pre><code>$ echo '{ &quot;presets&quot;: [&quot;react&quot;, &quot;es2015&quot;] }' &gt; .babelrc\n</code></pre>\n<p>package.js の scripst に、ビルドするためのコマンドを書いていきます。ここに書いたコマンドは <code>$ npm run hoge</code> のように入力すれば、実行されます。ちなみに、ライブラリを <code>npm install --global watchify</code> とグローバルインストールすると、<code>$ watchify -t babelify ./main.js -o ./bundle.js</code> と直接コマンドが叩けます。</p>\n<pre><code>&quot;scripts&quot;: {\n  &quot;watch&quot;: &quot;watchify -t babelify ./main.js -o ./bundle.js&quot;\n}\n</code></pre>\n<p>必要になるファイルを用意して、試しに走らせてみます。</p>\n<pre><code>$ touch index.html\n$ touch main.js\n$ npm run watch\n</code></pre>\n<p>main.js のファイルに変更があると bundle.js が出力されるはずです。main.js には何も書いていませんが、bundle.js には <code>require</code> 関数の定義だけが出力されています。</p>\n<h2>Hello, World! アプリを作成する</h2>\n<p>ここまでで開発環境の準備が終わったので、React アプリを書いてみます。先程、作成した index.html, main.js を書いていきます。</p>\n<h3>index.html</h3>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot;&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=&quot;content&quot;&gt;&lt;/div&gt;\n    &lt;script src=&quot;./bundle.js&quot;&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h3>main.js</h3>\n<p><code>import</code> は、ES6 で定義されている記述方法です。また、<code>&lt;h1&gt;Hello, World!&lt;/h1&gt;</code> のように JavaScript 中に HTML タグを記述しているのが、JSX です。Sublime Text をお使いの方は、Babel プラグインをインストール後に、JavaScript(Babel) の Syntax を有効にすれば、適切にハイライトされるようになります。</p>\n<pre><code>import React from &quot;react&quot;;\nimport ReactDOM from &quot;react-dom&quot;;\n\nReactDOM.render(\n  &lt;h1&gt;Hello, World!&lt;/h1&gt;,\n  document.getElementById('content')\n);\n</code></pre>\n<p>index.html をブラウザで表示すると、「Hello, World!」と表示されているはずです。</p>\n<h2>参考</h2>\n<h3>開発環境</h3>\n<ul>\n<li><a href=\"http://mae.chab.in/archives/2765\">Reactをnpmでビルドする方法 browserify (watchify) + babelify編 | mae's blog</a></li>\n<li><a href=\"http://qiita.com/mizchi/items/3bbb3f466a3b5011b509\">春からはじめるモダンJavaScript / ES2015 - Qiita</a></li>\n</ul>\n<h3>チュートリアル・デモ</h3>\n<ul>\n<li><a href=\"https://facebook.github.io/react/docs/tutorial.html\">Tutorial | React</a></li>\n<li><a href=\"https://facebook.github.io/react/docs/thinking-in-react.html\">Thinking in React | React</a></li>\n<li><a href=\"https://github.com/ruanyf/react-demos\">ruanyf/react-demos: a collection of simple demos of React.js</a></li>\n<li><a href=\"https://github.com/rakuishi/react-js-practice\">rakuishi/react-js-practice: Hello, React.js!</a></li>\n</ul>\n",
  "dir": "static/content/archives",
  "base": "2016-06-24-getting-started-react.json",
  "ext": ".json",
  "sourceBase": "2016-06-24-getting-started-react.md",
  "sourceExt": ".md"
}