{
  "categories": [
    "iOS"
  ],
  "date": "2012-03-24T00:51:49.000Z",
  "draft": false,
  "slug": 3039,
  "title": "[iOS SDK] UITableView で、任意のセルにジャンプするインデックスリストを実装する",
  "bodyContent": "iOS 標準アプリの連絡先・ミュージックなどは、右側にインデックスリストを表示させて、アクセスしやすいように工夫されています。\n\nこのインデックスリスト（通称：スーパースクロール）は、セクションと結び付けて、スクロールさせるのが一般的です。\n\nですが、今回はセクションを利用していない UITableView に、任意のセル数ごとにジャンプするインデックスリストを実装してみました。\n\n![](/images/2012/03/3039_1.png)\n\n環境：Xcode4.3.1、実機転送（iOS 5.1）\n\n## UITableView にインデックスリストを作成する\n\nsectionIndexTitlesForTableView のメソッドでは、NSString を要素に持っている配列を返すと、それがインデックスのリストに使われます。\n\nここでは、データ数15を持つ配列を返しています。\n\n```\n- (NSArray *)sectionIndexTitlesForTableView:(UITableView *)tableView\n{\n    NSArray *indexArray;\n    indexArray = [[NSArray alloc] initWithObjects: @\"●\", @\"●\", @\"●\", @\"●\", @\"●\", @\"●\", @\"●\", @\"●\", @\"●\", @\"●\", @\"●\", @\"●\", @\"●\", @\"●\", @\"●\", nil];\n                  \n    return indexArray;\n}\n```\n\n## インデックスリストをタップした時に UITableView を移動\n\nここからは、実際にインデックスリストをタップした時の動作を記述していきます。\n\nインデックスリストをタップした時には、以下のメソッドが呼ばれます。\n\nこのメソッドは、セクション数を示す Integer 型を返しますが、ここではセクションを用意していないので、このメソッド内に任意のセルに移動するコードを実装します。\n\n```\n- (NSInteger)tableView:(UITableView *)tableView sectionForSectionIndexTitle:(NSString *)title atIndex:(NSInteger)index\n{\n    int cellNum = self.albums.count/15 * index;\n    \n    NSIndexPath *indexPath = [NSIndexPath indexPathForRow:cellNum inSection:0];\n    [self.tableView scrollToRowAtIndexPath:indexPath atScrollPosition:UITableViewScrollPositionTop animated:NO];\n\n\treturn index;\n}\n```\n\ncellNum では、セル数/インデックスリスト数 * index という計算式で、移動先のセルを決定しています。\n\n## Special Thanks !\n\n* Cocoa と touch, Cocoa で touch: Table View のインデックスと日本語対応",
  "bodyHtml": "<p>iOS 標準アプリの連絡先・ミュージックなどは、右側にインデックスリストを表示させて、アクセスしやすいように工夫されています。</p>\n<p>このインデックスリスト（通称：スーパースクロール）は、セクションと結び付けて、スクロールさせるのが一般的です。</p>\n<p>ですが、今回はセクションを利用していない UITableView に、任意のセル数ごとにジャンプするインデックスリストを実装してみました。</p>\n<p><img src=\"/images/2012/03/3039_1.png\" alt=\"\"></p>\n<p>環境：Xcode4.3.1、実機転送（iOS 5.1）</p>\n<h2>UITableView にインデックスリストを作成する</h2>\n<p>sectionIndexTitlesForTableView のメソッドでは、NSString を要素に持っている配列を返すと、それがインデックスのリストに使われます。</p>\n<p>ここでは、データ数15を持つ配列を返しています。</p>\n<pre><code>- (NSArray *)sectionIndexTitlesForTableView:(UITableView *)tableView\n{\n    NSArray *indexArray;\n    indexArray = [[NSArray alloc] initWithObjects: @&quot;●&quot;, @&quot;●&quot;, @&quot;●&quot;, @&quot;●&quot;, @&quot;●&quot;, @&quot;●&quot;, @&quot;●&quot;, @&quot;●&quot;, @&quot;●&quot;, @&quot;●&quot;, @&quot;●&quot;, @&quot;●&quot;, @&quot;●&quot;, @&quot;●&quot;, @&quot;●&quot;, nil];\n                  \n    return indexArray;\n}\n</code></pre>\n<h2>インデックスリストをタップした時に UITableView を移動</h2>\n<p>ここからは、実際にインデックスリストをタップした時の動作を記述していきます。</p>\n<p>インデックスリストをタップした時には、以下のメソッドが呼ばれます。</p>\n<p>このメソッドは、セクション数を示す Integer 型を返しますが、ここではセクションを用意していないので、このメソッド内に任意のセルに移動するコードを実装します。</p>\n<pre><code>- (NSInteger)tableView:(UITableView *)tableView sectionForSectionIndexTitle:(NSString *)title atIndex:(NSInteger)index\n{\n    int cellNum = self.albums.count/15 * index;\n    \n    NSIndexPath *indexPath = [NSIndexPath indexPathForRow:cellNum inSection:0];\n    [self.tableView scrollToRowAtIndexPath:indexPath atScrollPosition:UITableViewScrollPositionTop animated:NO];\n\n\treturn index;\n}\n</code></pre>\n<p>cellNum では、セル数/インデックスリスト数 * index という計算式で、移動先のセルを決定しています。</p>\n<h2>Special Thanks !</h2>\n<ul>\n<li>Cocoa と touch, Cocoa で touch: Table View のインデックスと日本語対応</li>\n</ul>\n",
  "dir": "static/content/archives",
  "base": "2012-03-24-3039.json",
  "ext": ".json",
  "sourceBase": "2012-03-24-3039.md",
  "sourceExt": ".md"
}