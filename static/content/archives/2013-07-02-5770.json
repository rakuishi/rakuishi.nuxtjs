{
  "categories": [
    "Android"
  ],
  "date": "2013-07-01T15:07:39.000Z",
  "draft": false,
  "slug": 5770,
  "title": "[Android] AsyncTask による非同期処理",
  "bodyContent": "AsyncTask は、時間のかかる処理を別スレッドで行い、その結果出力を UI スレッドで行うことができる。\n\nAndroid では、バージョン3.0以降、UI スレッドでの通信処理をするとアプリが落ちる。別スレッドで通信処理を行い、結果を UI スレッドで行う AsyncTask と組み合わせることが必要となってくる。この記事では、メモを兼ねて、AsyncTask を使用した簡単なサンプルコードを紹介する。\n\n動作環境：Android Studio (I/O Preview) AI-130.687321, Android バージョン 4.0.4\n\n## サンプルコード\n\n以下に、AsyncTask を用いた簡単なサンプルコードを示す。\n\n「非同期処理を実行」ボタンをタップすると、非同期処理が走る。この間、UI スレッドが固まっていないことを確認するために、適当なボタンを用意している。処理実行中、そのボタンはタップ可能。非同期処理が終了後、textView に、文字列が表示される。\n\n```\npackage com.example.myapplication;\n\nimport android.app.Activity;\nimport android.os.AsyncTask;\nimport android.os.Bundle;\nimport android.view.Menu;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.LinearLayout;\nimport android.widget.TextView;\n\npublic class MainActivity extends Activity {\n\n    TextView textView;\n    Button button1, button2;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        LinearLayout linearLayout = new LinearLayout(this);\n        linearLayout.setOrientation(LinearLayout.VERTICAL);\n        setContentView(linearLayout);\n\n        textView = new TextView(this);\n        linearLayout.addView(textView);\n\n        button1 = new Button(this);\n        button1.setText(\"非同期処理を実行\");\n        button1.setOnClickListener(new SampleClickListener());\n        linearLayout.addView(button1);\n\n        button2 = new Button(this);\n        button2.setText(\"処理中にタップ可能\");\n        linearLayout.addView(button2);\n    }\n\n    class SampleClickListener implements View.OnClickListener\n    {\n        public void onClick(View view)\n        {\n            AsyncTask<Void, Void, String> task = new AsyncTask<Void, Void, String>() {\n                @Override\n                protected String doInBackground(Void... voids) {\n                    // 別スレッド\n                    try {\n                        Thread.sleep(1000);\t// 時間のかかる処理（通信処理とか）\n                        return \"Thread Success!\";\n                    } catch (InterruptedException exception) {\n                        return \"Thread Failed!\";\n                    }\n                }\n\n                @Override\n                protected void onPostExecute(String result) {\n                    // UIスレッド\n                    textView.setText(result);\n                }\n            };\n            task.execute(); // 実行\n        }\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        // Inflate the menu; this adds items to the action bar if it is present.\n        getMenuInflater().inflate(R.menu.main, menu);\n        return true;\n    }\n    \n}\n```\n\n## AsyncTask\n\nAsyncTask クラスから task というオブジェクトを作成する。その作成時に、doInBackground というメソッドと onPostExecute メソッドをオーバーライドしている。その後、task.execute() でその処理内容をスタートさせる。\n\ndoInBackground メソッド内では、UI スレッド以外で処理したいものを記述する（非同期処理になる）。doInBackground が終了した次に、onPostExecute メソッドが呼ばれる。onPostExecute は、UI スレッドで処理が実行されるので、UI の更新作業が行える。このサンプルコードでは、textView に doInBackground からの返り値を表示させている。",
  "bodyHtml": "<p>AsyncTask は、時間のかかる処理を別スレッドで行い、その結果出力を UI スレッドで行うことができる。</p>\n<p>Android では、バージョン3.0以降、UI スレッドでの通信処理をするとアプリが落ちる。別スレッドで通信処理を行い、結果を UI スレッドで行う AsyncTask と組み合わせることが必要となってくる。この記事では、メモを兼ねて、AsyncTask を使用した簡単なサンプルコードを紹介する。</p>\n<p>動作環境：Android Studio (I/O Preview) AI-130.687321, Android バージョン 4.0.4</p>\n<h2>サンプルコード</h2>\n<p>以下に、AsyncTask を用いた簡単なサンプルコードを示す。</p>\n<p>「非同期処理を実行」ボタンをタップすると、非同期処理が走る。この間、UI スレッドが固まっていないことを確認するために、適当なボタンを用意している。処理実行中、そのボタンはタップ可能。非同期処理が終了後、textView に、文字列が表示される。</p>\n<pre><code>package com.example.myapplication;\n\nimport android.app.Activity;\nimport android.os.AsyncTask;\nimport android.os.Bundle;\nimport android.view.Menu;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.LinearLayout;\nimport android.widget.TextView;\n\npublic class MainActivity extends Activity {\n\n    TextView textView;\n    Button button1, button2;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        LinearLayout linearLayout = new LinearLayout(this);\n        linearLayout.setOrientation(LinearLayout.VERTICAL);\n        setContentView(linearLayout);\n\n        textView = new TextView(this);\n        linearLayout.addView(textView);\n\n        button1 = new Button(this);\n        button1.setText(&quot;非同期処理を実行&quot;);\n        button1.setOnClickListener(new SampleClickListener());\n        linearLayout.addView(button1);\n\n        button2 = new Button(this);\n        button2.setText(&quot;処理中にタップ可能&quot;);\n        linearLayout.addView(button2);\n    }\n\n    class SampleClickListener implements View.OnClickListener\n    {\n        public void onClick(View view)\n        {\n            AsyncTask&lt;Void, Void, String&gt; task = new AsyncTask&lt;Void, Void, String&gt;() {\n                @Override\n                protected String doInBackground(Void... voids) {\n                    // 別スレッド\n                    try {\n                        Thread.sleep(1000);\t// 時間のかかる処理（通信処理とか）\n                        return &quot;Thread Success!&quot;;\n                    } catch (InterruptedException exception) {\n                        return &quot;Thread Failed!&quot;;\n                    }\n                }\n\n                @Override\n                protected void onPostExecute(String result) {\n                    // UIスレッド\n                    textView.setText(result);\n                }\n            };\n            task.execute(); // 実行\n        }\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        // Inflate the menu; this adds items to the action bar if it is present.\n        getMenuInflater().inflate(R.menu.main, menu);\n        return true;\n    }\n    \n}\n</code></pre>\n<h2>AsyncTask</h2>\n<p>AsyncTask クラスから task というオブジェクトを作成する。その作成時に、doInBackground というメソッドと onPostExecute メソッドをオーバーライドしている。その後、task.execute() でその処理内容をスタートさせる。</p>\n<p>doInBackground メソッド内では、UI スレッド以外で処理したいものを記述する（非同期処理になる）。doInBackground が終了した次に、onPostExecute メソッドが呼ばれる。onPostExecute は、UI スレッドで処理が実行されるので、UI の更新作業が行える。このサンプルコードでは、textView に doInBackground からの返り値を表示させている。</p>\n",
  "dir": "static/content/archives",
  "base": "2013-07-02-5770.json",
  "ext": ".json",
  "sourceBase": "2013-07-02-5770.md",
  "sourceExt": ".md"
}