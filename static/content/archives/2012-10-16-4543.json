{
  "categories": [
    "iOS"
  ],
  "date": "2012-10-15T15:39:23.000Z",
  "draft": false,
  "slug": 4543,
  "title": "Objective-C でデータベースファイル（SQLite）を操作する",
  "bodyContent": "[前回の記事](http://rakuishi.com/sqlite/4535/)で、ターミナルから SQLite のデータベースを作成したので、これを Objective-C で操作してみたいと思います。\n\n## 事前準備\n\niOS Application の Single View Application で ARC を使用するにチェックを入れて、プロジェクトを作成し、前回の記事で作成したデータベースファイル（test.sqlite）をプロジェクトに突っ込みます。\n\nそして、SQLite のライブラリーを追加する必要があります。プロジェクト名 → Target → Build Phases → Link Binary With Libraries から libsqlite3.0.dylib を追加します。\n\nSQLite を触る時には、「#import &lt;sqlite3.h>」を記述して、SQLite のライブラリーをインポートします。\n\n## Objective-C でデータベースファイルを操作する\n\nSQLiteManager というクラスを作成して、このクラスでデータベースを触るようにしました。\n\n**SQLiteManager.h**\n\n```\n#import <Foundation/Foundation.h>\n#import <sqlite3.h>\n\n@interface SQLiteManager : NSObject\n\n+ (void)handleDatabaseWithSql:(NSString *)sql;\n\n@end\n```\n\n**SQLiteManager.m**\n\n```\n#import \"SQLiteManager.h\"\n\n@implementation SQLiteManager\n\n+ (void)handleDatabaseWithSql:(NSString *)sql\n{\n    NSString *databaseName = @\"test.sqlite\";\n    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\n    NSString *path = [paths objectAtIndex:0];\n    NSString *databasePath = [path stringByAppendingPathComponent:databaseName];\n    \n    NSFileManager *manager = [NSFileManager defaultManager];\n    NSError *error = nil;\n    \n    // 文章フォルダにデータベースファイルが存在しているかを確認する\n    if (![manager fileExistsAtPath:databasePath]) {\n        \n        // 文章フォルダに存在しない場合は、データベースをコピーする\n        NSString *defaultDBPath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:databaseName];\n        BOOL success = [manager copyItemAtPath:defaultDBPath toPath:databasePath error:&error];\n        \n        if (success) {\n            NSLog(@\"Database file copied.\");\n        } else {\n            NSLog(@\"%@\", error);\n            return ;\n        }\n    } else {\n        \n        NSLog(@\"Database file exist.\");\n    }\n    \n    sqlite3 *database;\n    sqlite3_stmt *statement;\n    \n    // 文章フォルダに用意されたデータベースファイルを開く\n    if (sqlite3_open([databasePath UTF8String], &database) == SQLITE_OK) {\n        \n        int result = sqlite3_prepare_v2(database, [sql UTF8String], -1, &statement, NULL);\n        \n        // SQLite のコンパイルに失敗した場合\n        if (result != SQLITE_OK) {\n            NSLog(@\"Failed to SQLite compile.\");\n            return ;\n        }\n        \n        // SQL 文を実行し、結果が得られなくなるまで繰り返す\n        while (sqlite3_step(statement) == SQLITE_ROW) {\n\n            NSLog(@\"%d, %@\", sqlite3_column_int(statement, 0),[NSString stringWithUTF8String:(char*)sqlite3_column_text(statement, 1)]);\n        }\n        \n        // データベースを閉じる\n        sqlite3_close(database);\n    } else {\n        \n        NSLog(@\"Can't open database.\");\n    }\n    \n    return ;\n}\n\n@end\n```\n\nViewController で、このように呼び出します。\n\n「#import \"SQLiteManager.h\"」を宣言しています。\n\n**ViewController.m**\n\n```\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    // Do any additional setup after loading the view, typically from a nib.\n    \n    [SQLiteManager handleDatabaseWithSql:@\"SELECT * FROM hoge\"];\n}\n```\n\n出力はこんな感じです。\n\n**All Output**\n\n```\nDatabase file exist.\n1, rakuishi\n2, rakuiso\n3, rakutaro\n```\n\n## 参考\n\n[EZ-NET: iPhone プログラムで SQLite を使用する](http://program.station.ez-net.jp/special/iphone/db/sqlite.asp)\n\n{{<amazon id=\"4797354739\" title=\"新標準SQLite (オープンソースRDBMSシリーズ)\" src=\"https://images-na.ssl-images-amazon.com/images/I/51w28k89iJL._SL160_.jpg\">}}",
  "bodyHtml": "<p><a href=\"http://rakuishi.com/sqlite/4535/\">前回の記事</a>で、ターミナルから SQLite のデータベースを作成したので、これを Objective-C で操作してみたいと思います。</p>\n<h2>事前準備</h2>\n<p>iOS Application の Single View Application で ARC を使用するにチェックを入れて、プロジェクトを作成し、前回の記事で作成したデータベースファイル（test.sqlite）をプロジェクトに突っ込みます。</p>\n<p>そして、SQLite のライブラリーを追加する必要があります。プロジェクト名 → Target → Build Phases → Link Binary With Libraries から libsqlite3.0.dylib を追加します。</p>\n<p>SQLite を触る時には、「#import &lt;sqlite3.h&gt;」を記述して、SQLite のライブラリーをインポートします。</p>\n<h2>Objective-C でデータベースファイルを操作する</h2>\n<p>SQLiteManager というクラスを作成して、このクラスでデータベースを触るようにしました。</p>\n<p><strong>SQLiteManager.h</strong></p>\n<pre><code>#import &lt;Foundation/Foundation.h&gt;\n#import &lt;sqlite3.h&gt;\n\n@interface SQLiteManager : NSObject\n\n+ (void)handleDatabaseWithSql:(NSString *)sql;\n\n@end\n</code></pre>\n<p><strong>SQLiteManager.m</strong></p>\n<pre><code>#import &quot;SQLiteManager.h&quot;\n\n@implementation SQLiteManager\n\n+ (void)handleDatabaseWithSql:(NSString *)sql\n{\n    NSString *databaseName = @&quot;test.sqlite&quot;;\n    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\n    NSString *path = [paths objectAtIndex:0];\n    NSString *databasePath = [path stringByAppendingPathComponent:databaseName];\n    \n    NSFileManager *manager = [NSFileManager defaultManager];\n    NSError *error = nil;\n    \n    // 文章フォルダにデータベースファイルが存在しているかを確認する\n    if (![manager fileExistsAtPath:databasePath]) {\n        \n        // 文章フォルダに存在しない場合は、データベースをコピーする\n        NSString *defaultDBPath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:databaseName];\n        BOOL success = [manager copyItemAtPath:defaultDBPath toPath:databasePath error:&amp;error];\n        \n        if (success) {\n            NSLog(@&quot;Database file copied.&quot;);\n        } else {\n            NSLog(@&quot;%@&quot;, error);\n            return ;\n        }\n    } else {\n        \n        NSLog(@&quot;Database file exist.&quot;);\n    }\n    \n    sqlite3 *database;\n    sqlite3_stmt *statement;\n    \n    // 文章フォルダに用意されたデータベースファイルを開く\n    if (sqlite3_open([databasePath UTF8String], &amp;database) == SQLITE_OK) {\n        \n        int result = sqlite3_prepare_v2(database, [sql UTF8String], -1, &amp;statement, NULL);\n        \n        // SQLite のコンパイルに失敗した場合\n        if (result != SQLITE_OK) {\n            NSLog(@&quot;Failed to SQLite compile.&quot;);\n            return ;\n        }\n        \n        // SQL 文を実行し、結果が得られなくなるまで繰り返す\n        while (sqlite3_step(statement) == SQLITE_ROW) {\n\n            NSLog(@&quot;%d, %@&quot;, sqlite3_column_int(statement, 0),[NSString stringWithUTF8String:(char*)sqlite3_column_text(statement, 1)]);\n        }\n        \n        // データベースを閉じる\n        sqlite3_close(database);\n    } else {\n        \n        NSLog(@&quot;Can't open database.&quot;);\n    }\n    \n    return ;\n}\n\n@end\n</code></pre>\n<p>ViewController で、このように呼び出します。</p>\n<p>「#import &quot;SQLiteManager.h&quot;」を宣言しています。</p>\n<p><strong>ViewController.m</strong></p>\n<pre><code>- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    // Do any additional setup after loading the view, typically from a nib.\n    \n    [SQLiteManager handleDatabaseWithSql:@&quot;SELECT * FROM hoge&quot;];\n}\n</code></pre>\n<p>出力はこんな感じです。</p>\n<p><strong>All Output</strong></p>\n<pre><code>Database file exist.\n1, rakuishi\n2, rakuiso\n3, rakutaro\n</code></pre>\n<h2>参考</h2>\n<p><a href=\"http://program.station.ez-net.jp/special/iphone/db/sqlite.asp\">EZ-NET: iPhone プログラムで SQLite を使用する</a></p>\n<p>{{&lt;amazon id=&quot;4797354739&quot; title=&quot;新標準SQLite (オープンソースRDBMSシリーズ)&quot; src=&quot;https://images-na.ssl-images-amazon.com/images/I/51w28k89iJL.<em>SL160</em>.jpg&quot;&gt;}}</p>\n",
  "dir": "static/content/archives",
  "base": "2012-10-16-4543.json",
  "ext": ".json",
  "sourceBase": "2012-10-16-4543.md",
  "sourceExt": ".md"
}