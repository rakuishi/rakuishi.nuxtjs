{
  "categories": [
    "Android"
  ],
  "date": "2015-05-03T23:31:59.000Z",
  "draft": false,
  "slug": "rxjava",
  "title": "RxJava を使って、非同期通信処理とテストを書いてみた",
  "bodyContent": "例えば、ある通信処理で得られるトークンをもとに、次の通信処理を行うケースを考えてみる。Android アプリでは、同期的な通信は許可されていないから、非同期処理を続けて書く必要になりそうだ。これを愚直に実装すると面倒なことになりそうだが、[RxJava](https://github.com/ReactiveX/RxJava) で解消しそうだった。\n\nRxJava とは、\nリアクティブプログラミングを可能にするライブラリである（知らない言葉を説明するために、知らない言葉が登場してくる）。リアクティブプログラミングについては詳しくないのですが、このライブラリを使えば前述のようなプログラムが可読性高く書けるようになるようだった。\n\n* [マテリアルデザインを用いたデザインリニューアル [フリル編]](http://www.slideshare.net/yuki930/ss-47398513) 65 スライド目\n\nこの RxJava を使って、非同期通信処理とテストを書いてみた。\n\n## 非同期通信処理\n\n今書いている Android アプリ [rakuishi/OK](https://github.com/rakuishi/OK) の通信処理（このブログの RSS を読み込む）とデータ加工（レスポンスから Feed モデルを作成する）とリストに反映する処理を貼り付けた。\n\n`create` → `map` → `subscribeOn` → `observeOn` → `subscribe` のように、処理をチェーンして書いているのが分かる。\n\n    Observable\n        .create(new Observable.OnSubscribe<Response>() {\n            @Override\n            public void call(Subscriber<? super Response> subscriber) {\n                Request request = new Request.Builder()\n                    .url(\"http://rakuishi.com/index.xml\")\n                    .get()\n                    .build();\n                OkHttpClient okHttpClient = new OkHttpClient();\n                try {\n                    Response response = okHttpClient.newCall(request).execute();\n                    subscriber.onNext(response);\n                    subscriber.onCompleted();\n                } catch (IOException e) {\n                    subscriber.onError(e);\n                }\n            }\n        })\n        .map(new Func1<Response, Feed>() {\n            @Override\n            public Feed call(Response response) {\n                Serializer serializer = new Persister();\n                try {\n                    return serializer.read(Feed.class, response.body().string());\n                } catch (Exception e) {\n                    throw new OnErrorFailedException(e);\n                }\n            }\n        })\n        .observeOn(AndroidSchedulers.mainThread())\n        .subscribeOn(Schedulers.newThread())\n        .subscribe(new Subscriber<Feed>() {\n            @Override\n            public void onCompleted() {\n                // 完了\n                mEmptyView.setVisibility(View.GONE);\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                // 失敗\n                ToastUtils.showLongMessage(getActivity(), e.getMessage());\n                mEmptyView.setVisibility(View.GONE);\n            }\n\n            @Override\n            public void onNext(Feed feed) {\n                // 成功\n                mListView.setAdapter(new FeedAdapter(getActivity(), feed.getList()));\n            }\n        });\n\n### Observable を作成する\n\nまずは、`create` で元となる Observable を作成する。Observable は、目に見える / 観測できる / 見分けのつくという意味の単語。ここでは、[OkHttpClient](https://github.com/square/okhttp) による同期通信処理の Response を返している。この `Observable.create()` は、Observable&lt;Response&gt; を返している。\n\nちなみに Observable を作成するメソッドは、`create` 以外にもたくさんある。\n\n* [Creating Observables](https://github.com/ReactiveX/RxJava/wiki/Creating-Observables)\n\n### データを加工する\n\n次に、`map` でデータ加工を行います。これは Observable&lt;Response&gt; から Observable&lt;Feed&gt; に変換する処理を書いている。[Simple](Transforming Observables) という XML パーサーを使用している。\n\n* [Transforming Observables](https://github.com/ReactiveX/RxJava/wiki/Transforming-Observables)\n\n### 非同期処理にする\n\n`observeOn` と `subscribeOn` で、Observable と後述するコールバックを扱う Subscribe をどのスレッドで扱うかを指定しています。今回は、非同期処理を行うように指定。\n\n* [Observable Utility Operators](https://github.com/ReactiveX/RxJava/wiki/Observable-Utility-Operators)\n\n### 結果を受け取る\n\n`subscribe` メソッドを呼ぶと、その結果を処理できる。subscribe は、申し込むという意味の単語。\n\n`onNext` と `onCompleted` は、成功時と完了時に呼ばれるが、意味が被りそうなこのふたつが存在するのは、値を順番に返すような処理も作れるためだった。\n\n`onError` は、一連の流れで例外が発生した場合に呼ばれる。つまり、失敗した時の処理はここに書いとけば良いから、可読性が上がる。\n\n## テストを書く\n\n非同期通信処理のテストを書くときは、`CountDownLatch` を使うと思うのだけれど、たんに、`observeOn(AndroidSchedulers.mainThread())`, `subscribeOn(Schedulers.newThread())` を呼ばずに同期処理でテストすれば良い。\n\n    @Test\n    public void testRequestFeed() throws Exception {\n        OkAPIClient.getInstance().requestFeed()\n            .subscribe(new Action1<Feed>() {\n                @Override\n                public void call(Feed feed) {\n                    assertNotNull(feed);\n                    assertEquals(feed.getTitle(), \"rakuishi.com\");\n                    assertEquals(feed.getLink(), \"http://rakuishi.com/\");\n                }\n            });\n    }\n\nここでは、`subscribe` に、`Action1` を使用している。何かしらの処理が失敗している場合は、`feed == null` が得られる。\n\nテストは、以下のブログを参考にした。\n\n* [support packageに追加されたtesting-support-libを使ってAndroidのテストをJUnit4で書く](http://sys1yagi.hatenablog.com/entry/2014/12/22/135455)\n\n## Android アプリで使うには、RxAndroid\n\n実際には、RxJava を Android 用に書かれた RxAndroid を使っている。\n\n例えば、非同期通信処理が終わった後、呼び出し元の画面が存在していなくて、ぬるぽで落ちる問題がある。それを回避するには、画面が破棄される前に `subscrible` を解除してあげる必要がある。\n\nRxAndroid では、CompositeSubscription に、`add` し、それを画面が破棄される `onDestroy` 時に、`unsubscribe` すれば、OK です。\n\n    public class SampleFragment extends Fragment {\n\n        private CompositeSubscription mSubscription = new CompositeSubscription();\n\n        @Override\n        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n            View view = inflater.inflate(R.layout.fragment, container, false);\n            request();\n            return view;\n        }\n\n        @Override\n        public void onDestroy() {\n            mSubscription.unsubscribe();\n            super.onDestroy();\n        }\n\n        private void request() {\n            mSubscription.add(Observable\n                .create(/* 省略 */)\n                .map(/* 省略 */)\n                .observeOn(/* 省略 */)\n                .subscribeOn(/* 省略 */)\n                .subscribe(/* 省略 */)\n            );\n        }\n    }\n\n## 参考\n\n* [Android - RxJavaでAPIクライアントを作る - Qiita](http://qiita.com/rejasupotaro/items/18f3b7c62ab071c9fee5)\n* [Android開発でRxJavaをチームに導入した話 - クックパッド開発者ブログ](http://techlife.cookpad.com/entry/2015/04/17/100000)",
  "bodyHtml": "<p>例えば、ある通信処理で得られるトークンをもとに、次の通信処理を行うケースを考えてみる。Android アプリでは、同期的な通信は許可されていないから、非同期処理を続けて書く必要になりそうだ。これを愚直に実装すると面倒なことになりそうだが、<a href=\"https://github.com/ReactiveX/RxJava\">RxJava</a> で解消しそうだった。</p>\n<p>RxJava とは、\nリアクティブプログラミングを可能にするライブラリである（知らない言葉を説明するために、知らない言葉が登場してくる）。リアクティブプログラミングについては詳しくないのですが、このライブラリを使えば前述のようなプログラムが可読性高く書けるようになるようだった。</p>\n<ul>\n<li><a href=\"http://www.slideshare.net/yuki930/ss-47398513\">マテリアルデザインを用いたデザインリニューアル [フリル編]</a> 65 スライド目</li>\n</ul>\n<p>この RxJava を使って、非同期通信処理とテストを書いてみた。</p>\n<h2>非同期通信処理</h2>\n<p>今書いている Android アプリ <a href=\"https://github.com/rakuishi/OK\">rakuishi/OK</a> の通信処理（このブログの RSS を読み込む）とデータ加工（レスポンスから Feed モデルを作成する）とリストに反映する処理を貼り付けた。</p>\n<p><code>create</code> → <code>map</code> → <code>subscribeOn</code> → <code>observeOn</code> → <code>subscribe</code> のように、処理をチェーンして書いているのが分かる。</p>\n<pre><code>Observable\n    .create(new Observable.OnSubscribe&lt;Response&gt;() {\n        @Override\n        public void call(Subscriber&lt;? super Response&gt; subscriber) {\n            Request request = new Request.Builder()\n                .url(&quot;http://rakuishi.com/index.xml&quot;)\n                .get()\n                .build();\n            OkHttpClient okHttpClient = new OkHttpClient();\n            try {\n                Response response = okHttpClient.newCall(request).execute();\n                subscriber.onNext(response);\n                subscriber.onCompleted();\n            } catch (IOException e) {\n                subscriber.onError(e);\n            }\n        }\n    })\n    .map(new Func1&lt;Response, Feed&gt;() {\n        @Override\n        public Feed call(Response response) {\n            Serializer serializer = new Persister();\n            try {\n                return serializer.read(Feed.class, response.body().string());\n            } catch (Exception e) {\n                throw new OnErrorFailedException(e);\n            }\n        }\n    })\n    .observeOn(AndroidSchedulers.mainThread())\n    .subscribeOn(Schedulers.newThread())\n    .subscribe(new Subscriber&lt;Feed&gt;() {\n        @Override\n        public void onCompleted() {\n            // 完了\n            mEmptyView.setVisibility(View.GONE);\n        }\n\n        @Override\n        public void onError(Throwable e) {\n            // 失敗\n            ToastUtils.showLongMessage(getActivity(), e.getMessage());\n            mEmptyView.setVisibility(View.GONE);\n        }\n\n        @Override\n        public void onNext(Feed feed) {\n            // 成功\n            mListView.setAdapter(new FeedAdapter(getActivity(), feed.getList()));\n        }\n    });\n</code></pre>\n<h3>Observable を作成する</h3>\n<p>まずは、<code>create</code> で元となる Observable を作成する。Observable は、目に見える / 観測できる / 見分けのつくという意味の単語。ここでは、<a href=\"https://github.com/square/okhttp\">OkHttpClient</a> による同期通信処理の Response を返している。この <code>Observable.create()</code> は、Observable&lt;Response&gt; を返している。</p>\n<p>ちなみに Observable を作成するメソッドは、<code>create</code> 以外にもたくさんある。</p>\n<ul>\n<li><a href=\"https://github.com/ReactiveX/RxJava/wiki/Creating-Observables\">Creating Observables</a></li>\n</ul>\n<h3>データを加工する</h3>\n<p>次に、<code>map</code> でデータ加工を行います。これは Observable&lt;Response&gt; から Observable&lt;Feed&gt; に変換する処理を書いている。[Simple](Transforming Observables) という XML パーサーを使用している。</p>\n<ul>\n<li><a href=\"https://github.com/ReactiveX/RxJava/wiki/Transforming-Observables\">Transforming Observables</a></li>\n</ul>\n<h3>非同期処理にする</h3>\n<p><code>observeOn</code> と <code>subscribeOn</code> で、Observable と後述するコールバックを扱う Subscribe をどのスレッドで扱うかを指定しています。今回は、非同期処理を行うように指定。</p>\n<ul>\n<li><a href=\"https://github.com/ReactiveX/RxJava/wiki/Observable-Utility-Operators\">Observable Utility Operators</a></li>\n</ul>\n<h3>結果を受け取る</h3>\n<p><code>subscribe</code> メソッドを呼ぶと、その結果を処理できる。subscribe は、申し込むという意味の単語。</p>\n<p><code>onNext</code> と <code>onCompleted</code> は、成功時と完了時に呼ばれるが、意味が被りそうなこのふたつが存在するのは、値を順番に返すような処理も作れるためだった。</p>\n<p><code>onError</code> は、一連の流れで例外が発生した場合に呼ばれる。つまり、失敗した時の処理はここに書いとけば良いから、可読性が上がる。</p>\n<h2>テストを書く</h2>\n<p>非同期通信処理のテストを書くときは、<code>CountDownLatch</code> を使うと思うのだけれど、たんに、<code>observeOn(AndroidSchedulers.mainThread())</code>, <code>subscribeOn(Schedulers.newThread())</code> を呼ばずに同期処理でテストすれば良い。</p>\n<pre><code>@Test\npublic void testRequestFeed() throws Exception {\n    OkAPIClient.getInstance().requestFeed()\n        .subscribe(new Action1&lt;Feed&gt;() {\n            @Override\n            public void call(Feed feed) {\n                assertNotNull(feed);\n                assertEquals(feed.getTitle(), &quot;rakuishi.com&quot;);\n                assertEquals(feed.getLink(), &quot;http://rakuishi.com/&quot;);\n            }\n        });\n}\n</code></pre>\n<p>ここでは、<code>subscribe</code> に、<code>Action1</code> を使用している。何かしらの処理が失敗している場合は、<code>feed == null</code> が得られる。</p>\n<p>テストは、以下のブログを参考にした。</p>\n<ul>\n<li><a href=\"http://sys1yagi.hatenablog.com/entry/2014/12/22/135455\">support packageに追加されたtesting-support-libを使ってAndroidのテストをJUnit4で書く</a></li>\n</ul>\n<h2>Android アプリで使うには、RxAndroid</h2>\n<p>実際には、RxJava を Android 用に書かれた RxAndroid を使っている。</p>\n<p>例えば、非同期通信処理が終わった後、呼び出し元の画面が存在していなくて、ぬるぽで落ちる問題がある。それを回避するには、画面が破棄される前に <code>subscrible</code> を解除してあげる必要がある。</p>\n<p>RxAndroid では、CompositeSubscription に、<code>add</code> し、それを画面が破棄される <code>onDestroy</code> 時に、<code>unsubscribe</code> すれば、OK です。</p>\n<pre><code>public class SampleFragment extends Fragment {\n\n    private CompositeSubscription mSubscription = new CompositeSubscription();\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.fragment, container, false);\n        request();\n        return view;\n    }\n\n    @Override\n    public void onDestroy() {\n        mSubscription.unsubscribe();\n        super.onDestroy();\n    }\n\n    private void request() {\n        mSubscription.add(Observable\n            .create(/* 省略 */)\n            .map(/* 省略 */)\n            .observeOn(/* 省略 */)\n            .subscribeOn(/* 省略 */)\n            .subscribe(/* 省略 */)\n        );\n    }\n}\n</code></pre>\n<h2>参考</h2>\n<ul>\n<li><a href=\"http://qiita.com/rejasupotaro/items/18f3b7c62ab071c9fee5\">Android - RxJavaでAPIクライアントを作る - Qiita</a></li>\n<li><a href=\"http://techlife.cookpad.com/entry/2015/04/17/100000\">Android開発でRxJavaをチームに導入した話 - クックパッド開発者ブログ</a></li>\n</ul>\n",
  "dir": "static/content/archives",
  "base": "2015-05-04-rxjava.json",
  "ext": ".json",
  "sourceBase": "2015-05-04-rxjava.md",
  "sourceExt": ".md"
}