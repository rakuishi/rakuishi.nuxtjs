{
  "categories": [
    "JavaScript"
  ],
  "date": "2018-05-12T14:11:45.000Z",
  "draft": false,
  "slug": "vuejs-nuxtjs",
  "title": "Vue.js / Nuxt.js を採用した Web 開発で得た知見",
  "bodyContent": "![merlion](/images/2018/05/merlion.jpg)\n\n2018 年に入ってからは [Vue.js](https://jp.vuejs.org/) / [Nuxt.js](https://ja.nuxtjs.org/) を採用した Web サイト開発に携わっています。ログイン機能がある Web サイトで、データは API サーバーを叩いて取得するという構成。最近のフロントエンド開発は、感覚としてはアプリ開発ですね。\n\nVue.js に加えて Nuxt.js を採用したのは SSR（Server Side Rendering）をしたいという理由に尽きます。SSR することによるメリットは、以下となります：\n\n1. Facebook や Twitter が OGP タグを正しく評価してくれる\n1. 検索エンジンがサイトを正しく評価してくれる\n1. 副産物として、ログインユーザー情報が描画されて返るため、クライアント側で描画されるまでの空白状態がユーザーに見えない\n\nこの記事ではそんな Vue.js / Nuxt.js を採用した Web 開発で得た知見を紹介していきます。\n\n## 親と子のデータの受け渡しと Vuex ストアの勘所\n\nほとんどのデータの受け渡しは、親と子のコンポーネントで発生します（親はページも含む）。親から子は `props` による受け渡し、子から親には `$emit` による受け渡しになります。\n\n### parent.vue\n\n```\n<template>\n  <div>\n    <child\n      v-bind:message=\"message\"\n      v-on:onSubmitted=\"onSubmitted\" />\n  </div>\n</template>\n\n<script>\nimport child from '~/components/child';\n\nexport default {\n  components: {\n    children\n  },\n  methods: {\n    onSubmitted(message) {\n      console.log('message from child: ' + message);\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n</style>\n```\n\n### child.vue\n\n```\n<template>\n  <div>\n    <!-- 親から受け取った message がそのまま入る -->\n    <input v-model=\"message\" />\n    <button v-on:click=\"onSubmitted\">Submit</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    message: String\n  },\n  methods: {\n    onSubmitted() {\n      // message に変更があるたびに、parent.vue の onSubmitted が発火する\n      this.$emit('onSubmitted', this.message);\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n</style>\n```\n\nこれ以外の親と子の関係を超えて値を渡したい時は、[Vuex ストア](https://ja.nuxtjs.org/guide/vuex-store)を使うことになると思います。\n\nVuex ストアの実装例で検索すると、API 通信結果を受け取り、それを Vuex ストアに格納して、`getters` から読み込む記事が多く紹介されていますが、この方法は以下の理由からプロジェクトが大きくなるにつれて限界を迎えました。\n\n- API 数に比例して Vuex ストアが肥大化する\n- Promise で返る通信結果を格納するために Vuex ストアの各変数を用意する繰り返しの作業がだるい\n- 通信結果の成功時と失敗時のデータが `getters` に逃げるため、コードを追いにくい\n- Vuex ストアのデータの初期化忘れが多発し、別の画面で昔のデータが表示されてしまう\n\nそのため、Vuex ストアは本来の使い方である「親と子の関係を超えて値を渡したい時」に限定して使うようにしました。\n\n## Vuex ストアサンプルコードの SSR 時における不可解な挙動\n\n[Vuex ストア](https://ja.nuxtjs.org/guide/vuex-store) を有効にするには、いくつか書き方があり、プロジェクト初期には [vuejs/vuex](https://github.com/vuejs/vuex/blob/dev/examples/shopping-cart/store/index.js) に掲載されている書き方を参考にしていました。\n\nしかし、このサンプルコードと Nuxt.js を組み合わせた時に、不可解な挙動が発生しました。クライアント側（ユーザーのブラウザ）では、問題は起きないのですが、Nuxt サーバー側では、状態が初期化されず、他ユーザーからデータが見える汚染が発生しました。\n\nサンプルコードでは `state` はオブジェクトですが、これを関数で書き換えることにより、`req` 毎に Vue インスタンスが生成され、さらに `state` が初期化されていることを確認しました。\n\n結果的に Nuxt.js のサイトにあるクラシックモード、モジュールモードの書き方では、`state` は関数になっていて、vuejs/vuex の書き方のオブジェクトを先に参考にしたのが、すべての間違いでした。同じ間違いをする人のために文章として残しておきます。\n\n- https://ja.nuxtjs.org/guide/vuex-store/\n- https://github.com/nuxt/nuxt.js/issues/2508\n\n## Nuxt サーバーの描画とクライアントの描画の差\n\nVuejs の SPA（Single Page Application）では表現できないものを Nuxtjs によって解決しようとしているから当然なのですが、その実装難易度は大幅に上がります。以下に気を付けておきたいです：\n\n- `process.server`, `process.client` による条件分岐により、必要なコードだけをそれぞれの環境（Nuxt サーバー上、ブラウザ上）で実行できるようにする\n- ブラウザ上の JavaScript に慣れていると `window` オブジェクトはあることが当たり前だけれど、Nuxt サーバー上にはもちろん存在しない\n- Nuxt サーバーによる SSR（Server Side Rendering）では、`created` 時までのライフサイクルのコードが実行されるため、`created` までに書いている API 通信結果は DOM に格納されるが、CSR（Client Side Rendering）時にも実行されるため、通信が無駄になることがある。その場合 `beforeMount` に書くのが良い\n- SSR 時と CSR 時の情報の差がある場合、エラーを吐く。そのため、ホットリロードではなく全画面リロードして動作の確認をする必要がある。条件分岐をコントロールする変数が、`asyncData` や `created` で更新される場合は要注意\n\n## ユーザーのログイン情報の取り扱い方法\n\nログインユーザーを取り扱うウェブサイトでは、ログインしている状態と、ゲスト状態のふたつの画面が発生します。そのふたつの状態を、SSR と CSR 時で上手く取り扱う必要があり、以下に気を付けておきたいです：\n\n- SSR と CSR で構築する DOM に差がある場合（`created` 後の DOM）、エラーを吐く\n  - SSR 時は `beforeMount` は呼ばれないため、DOM に差がある場合はそこに記述するか\n  - `<no-ssr>` で囲むことで回避する\n- ログイン情報を Local Storage や Cookie に保存している場合、（恐らく最速で）CSR 時の `beforeMount` に評価されるため、`created` → `beforeMount` に画面描画に差がある場合、画面のチラつきが発生する\n\nログイン機能を持つ Web サイトでは、ユーザーの認証状態は token として Cookie に保持していると思いますが、それで上記を考慮して Vuejs / Nuxtjs を採用した場合の、たぶんベストプラクティスなユーザーのログイン情報の取り扱い方法は、以下のようになりました：\n\n```\nasync nuxtServerInit({ commit, state }, { req }) {\n  const hasToken = !!req.cookies.token;\n  const promise = hasToken\n    ? this.$axios.$get('/me')\n    : Promise.resolve({});\n\n  await promise\n    .then(response => {\n      // ユーザー情報を JSON として保存する\n      commit('SET_USER', response);\n      commit('RENDER_PAGE_AS_LOGIN_USER_ON_SSR', hasToken);\n    })\n    .catch(error => {\n      // エラー内容を解釈する\n      commit('RENDER_PAGE_AS_LOGIN_USER_ON_SSR', hasToken);\n    });\n},\n```\n\n```\nconst getters = {\n  isLogin: state => {\n    // SSR 時は nuxtServerInit から値を設定できる renderPageAsLoginUserOnSSR によって\n    // ログイン後のページを SSR で描画するかどうかを決定する\n    if (process.server) {\n      return state.renderPageAsLoginUserOnSSR;\n    }\n\n    // CSR 時はブラウザの Cookie に token が存在するかどうか\n    return process.client && hasToken();\n  },\n}\n```\n\n[NuxtServerInit](https://nuxtjs.org/guide/vuex-store/#the-nuxtserverinit-action) により Nuxt サーバー上で `nuxtServerInit` が解釈され DOM にユーザー情報が JSON として埋め込まれることになります。つまり、`isLogin` フラグも `SET_USER` によって更新されるユーザー情報の JSON も最初から描画できます。",
  "bodyHtml": "<p><img src=\"/images/2018/05/merlion.jpg\" alt=\"merlion\"></p>\n<p>2018 年に入ってからは <a href=\"https://jp.vuejs.org/\">Vue.js</a> / <a href=\"https://ja.nuxtjs.org/\">Nuxt.js</a> を採用した Web サイト開発に携わっています。ログイン機能がある Web サイトで、データは API サーバーを叩いて取得するという構成。最近のフロントエンド開発は、感覚としてはアプリ開発ですね。</p>\n<p>Vue.js に加えて Nuxt.js を採用したのは SSR（Server Side Rendering）をしたいという理由に尽きます。SSR することによるメリットは、以下となります：</p>\n<ol>\n<li>Facebook や Twitter が OGP タグを正しく評価してくれる</li>\n<li>検索エンジンがサイトを正しく評価してくれる</li>\n<li>副産物として、ログインユーザー情報が描画されて返るため、クライアント側で描画されるまでの空白状態がユーザーに見えない</li>\n</ol>\n<p>この記事ではそんな Vue.js / Nuxt.js を採用した Web 開発で得た知見を紹介していきます。</p>\n<h2>親と子のデータの受け渡しと Vuex ストアの勘所</h2>\n<p>ほとんどのデータの受け渡しは、親と子のコンポーネントで発生します（親はページも含む）。親から子は <code>props</code> による受け渡し、子から親には <code>$emit</code> による受け渡しになります。</p>\n<h3>parent.vue</h3>\n<pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;child\n      v-bind:message=&quot;message&quot;\n      v-on:onSubmitted=&quot;onSubmitted&quot; /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport child from '~/components/child';\n\nexport default {\n  components: {\n    children\n  },\n  methods: {\n    onSubmitted(message) {\n      console.log('message from child: ' + message);\n    },\n  },\n}\n&lt;/script&gt;\n\n&lt;style lang=&quot;scss&quot; scoped&gt;\n&lt;/style&gt;\n</code></pre>\n<h3>child.vue</h3>\n<pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;!-- 親から受け取った message がそのまま入る --&gt;\n    &lt;input v-model=&quot;message&quot; /&gt;\n    &lt;button v-on:click=&quot;onSubmitted&quot;&gt;Submit&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  props: {\n    message: String\n  },\n  methods: {\n    onSubmitted() {\n      // message に変更があるたびに、parent.vue の onSubmitted が発火する\n      this.$emit('onSubmitted', this.message);\n    },\n  },\n}\n&lt;/script&gt;\n\n&lt;style lang=&quot;scss&quot; scoped&gt;\n&lt;/style&gt;\n</code></pre>\n<p>これ以外の親と子の関係を超えて値を渡したい時は、<a href=\"https://ja.nuxtjs.org/guide/vuex-store\">Vuex ストア</a>を使うことになると思います。</p>\n<p>Vuex ストアの実装例で検索すると、API 通信結果を受け取り、それを Vuex ストアに格納して、<code>getters</code> から読み込む記事が多く紹介されていますが、この方法は以下の理由からプロジェクトが大きくなるにつれて限界を迎えました。</p>\n<ul>\n<li>API 数に比例して Vuex ストアが肥大化する</li>\n<li>Promise で返る通信結果を格納するために Vuex ストアの各変数を用意する繰り返しの作業がだるい</li>\n<li>通信結果の成功時と失敗時のデータが <code>getters</code> に逃げるため、コードを追いにくい</li>\n<li>Vuex ストアのデータの初期化忘れが多発し、別の画面で昔のデータが表示されてしまう</li>\n</ul>\n<p>そのため、Vuex ストアは本来の使い方である「親と子の関係を超えて値を渡したい時」に限定して使うようにしました。</p>\n<h2>Vuex ストアサンプルコードの SSR 時における不可解な挙動</h2>\n<p><a href=\"https://ja.nuxtjs.org/guide/vuex-store\">Vuex ストア</a> を有効にするには、いくつか書き方があり、プロジェクト初期には <a href=\"https://github.com/vuejs/vuex/blob/dev/examples/shopping-cart/store/index.js\">vuejs/vuex</a> に掲載されている書き方を参考にしていました。</p>\n<p>しかし、このサンプルコードと Nuxt.js を組み合わせた時に、不可解な挙動が発生しました。クライアント側（ユーザーのブラウザ）では、問題は起きないのですが、Nuxt サーバー側では、状態が初期化されず、他ユーザーからデータが見える汚染が発生しました。</p>\n<p>サンプルコードでは <code>state</code> はオブジェクトですが、これを関数で書き換えることにより、<code>req</code> 毎に Vue インスタンスが生成され、さらに <code>state</code> が初期化されていることを確認しました。</p>\n<p>結果的に Nuxt.js のサイトにあるクラシックモード、モジュールモードの書き方では、<code>state</code> は関数になっていて、vuejs/vuex の書き方のオブジェクトを先に参考にしたのが、すべての間違いでした。同じ間違いをする人のために文章として残しておきます。</p>\n<ul>\n<li>https://ja.nuxtjs.org/guide/vuex-store/</li>\n<li>https://github.com/nuxt/nuxt.js/issues/2508</li>\n</ul>\n<h2>Nuxt サーバーの描画とクライアントの描画の差</h2>\n<p>Vuejs の SPA（Single Page Application）では表現できないものを Nuxtjs によって解決しようとしているから当然なのですが、その実装難易度は大幅に上がります。以下に気を付けておきたいです：</p>\n<ul>\n<li><code>process.server</code>, <code>process.client</code> による条件分岐により、必要なコードだけをそれぞれの環境（Nuxt サーバー上、ブラウザ上）で実行できるようにする</li>\n<li>ブラウザ上の JavaScript に慣れていると <code>window</code> オブジェクトはあることが当たり前だけれど、Nuxt サーバー上にはもちろん存在しない</li>\n<li>Nuxt サーバーによる SSR（Server Side Rendering）では、<code>created</code> 時までのライフサイクルのコードが実行されるため、<code>created</code> までに書いている API 通信結果は DOM に格納されるが、CSR（Client Side Rendering）時にも実行されるため、通信が無駄になることがある。その場合 <code>beforeMount</code> に書くのが良い</li>\n<li>SSR 時と CSR 時の情報の差がある場合、エラーを吐く。そのため、ホットリロードではなく全画面リロードして動作の確認をする必要がある。条件分岐をコントロールする変数が、<code>asyncData</code> や <code>created</code> で更新される場合は要注意</li>\n</ul>\n<h2>ユーザーのログイン情報の取り扱い方法</h2>\n<p>ログインユーザーを取り扱うウェブサイトでは、ログインしている状態と、ゲスト状態のふたつの画面が発生します。そのふたつの状態を、SSR と CSR 時で上手く取り扱う必要があり、以下に気を付けておきたいです：</p>\n<ul>\n<li>SSR と CSR で構築する DOM に差がある場合（<code>created</code> 後の DOM）、エラーを吐く\n<ul>\n<li>SSR 時は <code>beforeMount</code> は呼ばれないため、DOM に差がある場合はそこに記述するか</li>\n<li><code>&lt;no-ssr&gt;</code> で囲むことで回避する</li>\n</ul>\n</li>\n<li>ログイン情報を Local Storage や Cookie に保存している場合、（恐らく最速で）CSR 時の <code>beforeMount</code> に評価されるため、<code>created</code> → <code>beforeMount</code> に画面描画に差がある場合、画面のチラつきが発生する</li>\n</ul>\n<p>ログイン機能を持つ Web サイトでは、ユーザーの認証状態は token として Cookie に保持していると思いますが、それで上記を考慮して Vuejs / Nuxtjs を採用した場合の、たぶんベストプラクティスなユーザーのログイン情報の取り扱い方法は、以下のようになりました：</p>\n<pre><code>async nuxtServerInit({ commit, state }, { req }) {\n  const hasToken = !!req.cookies.token;\n  const promise = hasToken\n    ? this.$axios.$get('/me')\n    : Promise.resolve({});\n\n  await promise\n    .then(response =&gt; {\n      // ユーザー情報を JSON として保存する\n      commit('SET_USER', response);\n      commit('RENDER_PAGE_AS_LOGIN_USER_ON_SSR', hasToken);\n    })\n    .catch(error =&gt; {\n      // エラー内容を解釈する\n      commit('RENDER_PAGE_AS_LOGIN_USER_ON_SSR', hasToken);\n    });\n},\n</code></pre>\n<pre><code>const getters = {\n  isLogin: state =&gt; {\n    // SSR 時は nuxtServerInit から値を設定できる renderPageAsLoginUserOnSSR によって\n    // ログイン後のページを SSR で描画するかどうかを決定する\n    if (process.server) {\n      return state.renderPageAsLoginUserOnSSR;\n    }\n\n    // CSR 時はブラウザの Cookie に token が存在するかどうか\n    return process.client &amp;&amp; hasToken();\n  },\n}\n</code></pre>\n<p><a href=\"https://nuxtjs.org/guide/vuex-store/#the-nuxtserverinit-action\">NuxtServerInit</a> により Nuxt サーバー上で <code>nuxtServerInit</code> が解釈され DOM にユーザー情報が JSON として埋め込まれることになります。つまり、<code>isLogin</code> フラグも <code>SET_USER</code> によって更新されるユーザー情報の JSON も最初から描画できます。</p>\n",
  "dir": "static/content/archives",
  "base": "2018-05-12-vuejs-nuxtjs.json",
  "ext": ".json",
  "sourceBase": "2018-05-12-vuejs-nuxtjs.md",
  "sourceExt": ".md"
}