{
  "categories": [
    "CSS"
  ],
  "date": "2014-04-18T22:55:32.000Z",
  "draft": false,
  "slug": 6558,
  "title": "レスポンシブ Web デザインのサイトを作成する時に、知っておきたいこと",
  "bodyContent": "最近、レスポンシブ Web デザインのサイトを仕事で作成しています。レスポンシブは、PC・タブレット・スマートフォンなどのあらゆるデバイスに適したサイトを単一 HTML で表現する手法です。このブログもレスポンシブを採用していて、左右の横幅を狭めていくとページのレイアウトが変わります。\n\nこの記事では、レスポンシブサイトを作成する時に、知っておきたいコトをまとめてみました。今までレスポンシブサイトを作ったことがないけれど、ある程度 HTML/CSS を学んだ人向けに書いています。\n\n## 目次\n\n* そもそもレスポンシブを採用するかどうか\n* スマートフォンにおける表示の最適化\n* PC では幅一定で画面中央に、スマートフォンでは画面いっぱいに表示\n* Responsive Grid System\n* CSS 記述量が減るメディアクエリの書き方\n* 画像を画面いっぱいに引き伸ばすクラスを用意しておくと便利\n* 伸縮する画像を背景にする\n* 画面幅に応じて画像を出し分ける方法\n* リンクを押せる領域を意識する\n\n## そもそもレスポンシブを採用するかどうか\n\nレスポンシブを採用するかどうかは、一考する必要があります。万能ではありません。レスポンシブは、モバイル向けのデザインを PC 向けに組み直すという流れで実装していきます。そのためどうしても PC で見た時の情報量やデザインに影響してきます。\n\n下記が、僕が考えているレスポンシブサイトを作る上のメリットです。また、加えて仕事で扱うサイトのユーザー分布が、スマートフォンに極端に寄っているから採用している面もあります。\n\n* PC/スマートフォン向けサイトを別々に作るのに比べて、開発スピードが見込める\n* テンプレートエンジンを使って HTML ファイルを出力する場合、テンプレートをひとつ用意するだけで良い\n\n実際に、レスポンシブを採用することになった場合、デザイナさんとの入念なコミュニケーションが必要となります。デザイナさんが本格的に作業に入る前に、実際にモックサイトを作ると、デザイナさんと実装する人の認識の差を埋めるのに役立ちます。\n\n## スマートフォンにおける表示の最適化\n\nViewport は、スマートフォンのブラウザが採用している仮想ウィンドウです。例えば、iPhone の横幅は 320px ですが、Viewport は横幅 980px が適用されています。サイトを見ている時に、よく文字が小さく見えることがあるのですが、それはこの Viewport が影響しています。\n\nスマートフォンの Viewport が、その端末の横幅となるように、以下のタグを `head` タグの中に記述します。これで iPhone で見えるサイトの横幅が 320px になります。レスポンシブサイト・スマートフォン向けサイトを作る時の一種のおまじないみたいなものです。\n\n```\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n```\n\n## PC では幅一定で画面中央に、スマートフォンでは画面いっぱいに表示\n\n![](/images/2014/04/6558_1.png)\n\nPC では幅 728px で画面中央に、スマートフォンでは画面いっぱいに表示する実際のコードが下記になります。レスポンシブサイトを作る時の大枠として使います。\n\n```\n.container {\n  max-width: 728px; /* 最大横幅 */\n  width: 100%;\n  margin: 0 auto;\n}\n```\n\n## Responsive Grid System\n\n![](/images/2014/04/6558_2.jpg)\n\n「PC は2カラム、スマートフォンは1カラム」といったレイアウトをレスポンシブサイトではよく使用します。グリッドシステムは、ざっくり言えば、そのようなレイアウトがあらかじめ用意された CSS ファイルです。\n\nグリッドシステムを実現するライブラリはたくさんあるのですが、僕は [Responsive Grid System](http://responsive.gs/) を使用しています。例えば、「PC は2カラム、スマートフォンは1カラム」を作るには、次のように記述します。\n\n```\n<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col span_8\">\n      <!-- 左カラム -->\n    </div>\n    <div class=\"col span_4\">\n      <!-- 右カラム -->\n    </div>\n  </div><!-- div.row -->\n</div><!-- div.container -->\n```\n\nResponsive Grid System では、全セレクタに `box-sizing: border-box;` を指定しています。全セレクタに指定するので端末負荷は上がってしまいますが、`padding` や `border` の変化に強くて記述が楽になります。\n\n```\n* {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n```\n\n* [Responsive Grid System](http://responsive.gs/)\n* [スマホサイトつくるならbox-sizing: border-box; をつかったほうがいいよ！ | 株式会社オールフェスタ](http://allfesta.com/border-box/)\n\n## CSS 記述量が減るメディアクエリの書き方\n\nメディアクエリ（Media Queries）は、デバイスの横幅に応じて読み込む CSS を変えるための機能です。\n\nメディアクエリを使用する場合、画面幅に応じて表示を変えたい場合には、小さい画面幅から大きい画面幅へと記述するのが良いです。メディアクエリ内では、小さい画面幅との差分を書き足していきます。差分を意識して書くことにより、意味が把握しやすく記述量の減る CSS になります。\n\n```\n/* 568px より小さい場合に適用される。スマートフォンでよく使われていてその中で小さい画面幅を持つのは、iPhone の 320px なので実質 320px ~ 567px の範囲 */\n.column {\n  width: 100%;\n  max-width: 1024px;\n  display: block;\n  /* 全画面サイズで共通の指定をここで行う */\n}\n\n/* 568px ~ */\n@media (min-width: 568px) {\n  .column {\n    width: 50%;\n    float: left;\n  }\n}\n\n/* 728px ~ */\n@media (min-width: 728px) {\n  .column {\n    width: 25%;\n  }\n}\n```\n\nまた、このような書き方をすることでスマートフォンにおける CSS 読み込みの効率が良くなります。基本的な考え方として、PC に比べて端末スペックが低いスマートフォンでは、多くのスタイルを読み込ませたくありません。\n\n例えば、この場合、端末画面幅が 320px の iPhone は、最初のメディアクエリを指定しない CSS だけを読みます。もしこれが、大 → 小さい画面幅のようにメディアクエリが書かれている場合、上から順に三回もスタイルを読み込む必要があり、スマートフォンにとって相性の悪い CSS になります。\n\n## 画像を画面いっぱいに引き伸ばすクラスを用意しておくと便利\n\n画像を画面いっぱいに表示するのに使用するクラスを用意しておくと便利です。[Twitter Bootstrap](http://getbootstrap.com/2.3.2/) では、そのために `.img-responsive` クラスが用意されています。これに倣って、最近作成するレスポンシブサイトの CSS では、以下のクラスを宣言しています。\n\n```\n/* css */\n.img-responsive {\n  display: block;\n  width: 100%;\n  height: auto;\n}\n\n/* html */\n<img src=\"photo.jpg\" class=\"img-responsive\" />\n```\n\n逆に、画面幅を縮めた時に、画像が幅からはみ出ないようにするために、以下のように `img` タグそもそもの `max-width` の限界値を `100%` にしておきます。\n\n```\nimg {\n  max-width: 100%;\n  height: auto;\n  border: 0;\n}\n```\n\n基本的に、比率を維持したまま拡大・縮小出来るのは、`img` タグだけなのですが、`padding` の仕様を利用すれば、例えば YouTube を埋め込んだ `iframe` をレスポンシブ対応することが出来ます。以下のサイトが詳しいです。\n\n* [レスポンシブWebデザインでハマりがちな%指定 │ Design Spice](http://design-spice.com/2014/03/24/percentag/)\n\n## 伸縮する画像を背景にする\n\n基本的に、画像の伸縮を利用できるのは、`img` タグで画像を直接置いた場合なのですが、`background-size: cover;` を利用すれば、擬似的に伸縮する画像を背景にすることができます。「擬似的に」というのは、縦幅を固定する必要があるからです。\n\n以下のように実装すれば、伸縮する画像を背景にできます。[AppBankアプリサポート](http://apps.appbank.net/)ページのように、ブラウザの横幅を移動すると画像が伸縮するように見えます。\n\n```\n/* css */\n#hero {\n  width: 100%;\n  height: 200px;\n  background: url(images/hero.jpg) no-repeat center;\n  background-size: cover;\n}\n\n/* html */\n<div id=\"hero\"></div>\n```\n\nよくあるレスポンシブのサイトでは、画面幅いっぱいに表示することが多いのですが、その場合、ある程度大きな画像を用意する必要があります。\n\n大きい画像は読み込むスピードが遅いので以下のような対応で画像サイズを落とします。経験的に、100kb 以下がボーダーラインと思っています。\n\n* jpg 画像にする（クオリティを 80 ~ 60% 程度に調整）\n* モノクロ・ぼかしを画像にかける\n* 画像圧縮ツールで容量を減らす（[ImageOptim — better Save For Web](http://imageoptim.com/)/[JPEGmini - Your Photos on a Diet!](http://www.jpegmini.com/) 等）\n\n## 画面幅に応じて画像を出し分ける方法\n\n画面幅に応じて画像を出し分けるには、2つの実装方法があります。\n\n* JavaScript による画面幅の監視\n* メディアクエリと background を使用する\n\n以下のコードは、JavaScript で画面のリサイズを監視し、画面幅 768px を境界に `img` タグの画像ファイルを変えています。\n\n```\nfunction changeImgSrc(width) {\n  if (width > 768) {\n    document.getElementById('img-hero').src = \"images/hero.jpg\";\n  } else {\n    document.getElementById('img-hero').src = \"images/hero_sp.jpg\";\n  }\n}\n\nvar width = window.innerWidth;\nchangeImgSrc(width); // 初回\n\nwindow.onresize = function resize() {\n  var currentWidth = window.innerWidth;\n  if ( (width < 768 && 768 <= currentWidth) || ( width > 768 && 768 >= currentWidth) ) {\n    // 画面幅が 768px を堺に変わった時だけ呼ばれる\n    changeImgSrc(currentWidth);\n  }\n  width = currentWidth;\n};\n```\n\nまた、メディアクエリと `background` に画像を指定することで似たようなことを実現できます。実装と運用はこちらのほうが楽ですが、`background` に指定した画像は、伸縮ができない点に注意です。\n\n```\n.change-img {\n  display: block;\n  width: 150px;\n  height: 150px;\n  background: url(images/photo.png) no-repeat;\n  background-size: 150px 150px;\n}\n\n@media (min-width: 480px) {\n  .change-img {\n    width: 300px;\n    height: 300px;\n    background: url(images/photo@2x.png) no-repeat;\n    background-size: 300px 300px;\n  }\n}\n```\n\n## リンクを押せる領域を意識する\n\nこれは、レスポンシブサイトに限らず、スマートフォンサイトでも大事な考え方です。\n\n例として、リストを使用して、その中にリンクテキストを書く場合を想定します。次のようなコードになるかと思います。ちなみに、タップしやすいと言われる縦幅 44px を意識しています。\n\n```\n/* css */\nul.vertical-list {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\nul.vertical-list li {\n  width: 100%;\n  height: 43px;\n  line-height: 43px;\n  border-bottom: 1px solid #ddd;\n}\n\n/* html */\n<ul class=\"vertical-list\">\n  <li>\n    <a href=\"\">尋常ではないもふもふ</a>\n  </li>\n</ul>\n```\n\nこれを iPhone からタップしてみます。灰色の領域が押せる領域を示しています。左側の画像が押せる領域です。\n\n![](/images/2014/04/6558_3.png)\n\n幅を 44px 用意したのですが、テキストの縦幅分しか存在していません。これは、`a` タグが `display: inline` 要素（テキスト幅に追従する）であることに因ります。右側の画像のように 44px を押せる範囲にするには、以下のように `block` を指定してあげます。  \n\n```\n/* css */\nul.vertical-list li a {\n  display: block;\n  width: 100%;\n}\n```\n\n## 参考\n\n{{<amazon id=\"4048863231\" title=\"レスポンシブWebデザイン マルチデバイス時代のコンセプトとテクニック (WEB PROFESSIONAL)\" src=\"https://images-na.ssl-images-amazon.com/images/I/417RBoT17SL._SL160_.jpg\">}}",
  "bodyHtml": "<p>最近、レスポンシブ Web デザインのサイトを仕事で作成しています。レスポンシブは、PC・タブレット・スマートフォンなどのあらゆるデバイスに適したサイトを単一 HTML で表現する手法です。このブログもレスポンシブを採用していて、左右の横幅を狭めていくとページのレイアウトが変わります。</p>\n<p>この記事では、レスポンシブサイトを作成する時に、知っておきたいコトをまとめてみました。今までレスポンシブサイトを作ったことがないけれど、ある程度 HTML/CSS を学んだ人向けに書いています。</p>\n<h2>目次</h2>\n<ul>\n<li>そもそもレスポンシブを採用するかどうか</li>\n<li>スマートフォンにおける表示の最適化</li>\n<li>PC では幅一定で画面中央に、スマートフォンでは画面いっぱいに表示</li>\n<li>Responsive Grid System</li>\n<li>CSS 記述量が減るメディアクエリの書き方</li>\n<li>画像を画面いっぱいに引き伸ばすクラスを用意しておくと便利</li>\n<li>伸縮する画像を背景にする</li>\n<li>画面幅に応じて画像を出し分ける方法</li>\n<li>リンクを押せる領域を意識する</li>\n</ul>\n<h2>そもそもレスポンシブを採用するかどうか</h2>\n<p>レスポンシブを採用するかどうかは、一考する必要があります。万能ではありません。レスポンシブは、モバイル向けのデザインを PC 向けに組み直すという流れで実装していきます。そのためどうしても PC で見た時の情報量やデザインに影響してきます。</p>\n<p>下記が、僕が考えているレスポンシブサイトを作る上のメリットです。また、加えて仕事で扱うサイトのユーザー分布が、スマートフォンに極端に寄っているから採用している面もあります。</p>\n<ul>\n<li>PC/スマートフォン向けサイトを別々に作るのに比べて、開発スピードが見込める</li>\n<li>テンプレートエンジンを使って HTML ファイルを出力する場合、テンプレートをひとつ用意するだけで良い</li>\n</ul>\n<p>実際に、レスポンシブを採用することになった場合、デザイナさんとの入念なコミュニケーションが必要となります。デザイナさんが本格的に作業に入る前に、実際にモックサイトを作ると、デザイナさんと実装する人の認識の差を埋めるのに役立ちます。</p>\n<h2>スマートフォンにおける表示の最適化</h2>\n<p>Viewport は、スマートフォンのブラウザが採用している仮想ウィンドウです。例えば、iPhone の横幅は 320px ですが、Viewport は横幅 980px が適用されています。サイトを見ている時に、よく文字が小さく見えることがあるのですが、それはこの Viewport が影響しています。</p>\n<p>スマートフォンの Viewport が、その端末の横幅となるように、以下のタグを <code>head</code> タグの中に記述します。これで iPhone で見えるサイトの横幅が 320px になります。レスポンシブサイト・スマートフォン向けサイトを作る時の一種のおまじないみたいなものです。</p>\n<pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;\n</code></pre>\n<h2>PC では幅一定で画面中央に、スマートフォンでは画面いっぱいに表示</h2>\n<p><img src=\"/images/2014/04/6558_1.png\" alt=\"\"></p>\n<p>PC では幅 728px で画面中央に、スマートフォンでは画面いっぱいに表示する実際のコードが下記になります。レスポンシブサイトを作る時の大枠として使います。</p>\n<pre><code>.container {\n  max-width: 728px; /* 最大横幅 */\n  width: 100%;\n  margin: 0 auto;\n}\n</code></pre>\n<h2>Responsive Grid System</h2>\n<p><img src=\"/images/2014/04/6558_2.jpg\" alt=\"\"></p>\n<p>「PC は2カラム、スマートフォンは1カラム」といったレイアウトをレスポンシブサイトではよく使用します。グリッドシステムは、ざっくり言えば、そのようなレイアウトがあらかじめ用意された CSS ファイルです。</p>\n<p>グリッドシステムを実現するライブラリはたくさんあるのですが、僕は <a href=\"http://responsive.gs/\">Responsive Grid System</a> を使用しています。例えば、「PC は2カラム、スマートフォンは1カラム」を作るには、次のように記述します。</p>\n<pre><code>&lt;div class=&quot;container&quot;&gt;\n  &lt;div class=&quot;row&quot;&gt;\n    &lt;div class=&quot;col span_8&quot;&gt;\n      &lt;!-- 左カラム --&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;col span_4&quot;&gt;\n      &lt;!-- 右カラム --&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;&lt;!-- div.row --&gt;\n&lt;/div&gt;&lt;!-- div.container --&gt;\n</code></pre>\n<p>Responsive Grid System では、全セレクタに <code>box-sizing: border-box;</code> を指定しています。全セレクタに指定するので端末負荷は上がってしまいますが、<code>padding</code> や <code>border</code> の変化に強くて記述が楽になります。</p>\n<pre><code>* {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n</code></pre>\n<ul>\n<li><a href=\"http://responsive.gs/\">Responsive Grid System</a></li>\n<li><a href=\"http://allfesta.com/border-box/\">スマホサイトつくるならbox-sizing: border-box; をつかったほうがいいよ！ | 株式会社オールフェスタ</a></li>\n</ul>\n<h2>CSS 記述量が減るメディアクエリの書き方</h2>\n<p>メディアクエリ（Media Queries）は、デバイスの横幅に応じて読み込む CSS を変えるための機能です。</p>\n<p>メディアクエリを使用する場合、画面幅に応じて表示を変えたい場合には、小さい画面幅から大きい画面幅へと記述するのが良いです。メディアクエリ内では、小さい画面幅との差分を書き足していきます。差分を意識して書くことにより、意味が把握しやすく記述量の減る CSS になります。</p>\n<pre><code>/* 568px より小さい場合に適用される。スマートフォンでよく使われていてその中で小さい画面幅を持つのは、iPhone の 320px なので実質 320px ~ 567px の範囲 */\n.column {\n  width: 100%;\n  max-width: 1024px;\n  display: block;\n  /* 全画面サイズで共通の指定をここで行う */\n}\n\n/* 568px ~ */\n@media (min-width: 568px) {\n  .column {\n    width: 50%;\n    float: left;\n  }\n}\n\n/* 728px ~ */\n@media (min-width: 728px) {\n  .column {\n    width: 25%;\n  }\n}\n</code></pre>\n<p>また、このような書き方をすることでスマートフォンにおける CSS 読み込みの効率が良くなります。基本的な考え方として、PC に比べて端末スペックが低いスマートフォンでは、多くのスタイルを読み込ませたくありません。</p>\n<p>例えば、この場合、端末画面幅が 320px の iPhone は、最初のメディアクエリを指定しない CSS だけを読みます。もしこれが、大 → 小さい画面幅のようにメディアクエリが書かれている場合、上から順に三回もスタイルを読み込む必要があり、スマートフォンにとって相性の悪い CSS になります。</p>\n<h2>画像を画面いっぱいに引き伸ばすクラスを用意しておくと便利</h2>\n<p>画像を画面いっぱいに表示するのに使用するクラスを用意しておくと便利です。<a href=\"http://getbootstrap.com/2.3.2/\">Twitter Bootstrap</a> では、そのために <code>.img-responsive</code> クラスが用意されています。これに倣って、最近作成するレスポンシブサイトの CSS では、以下のクラスを宣言しています。</p>\n<pre><code>/* css */\n.img-responsive {\n  display: block;\n  width: 100%;\n  height: auto;\n}\n\n/* html */\n&lt;img src=&quot;photo.jpg&quot; class=&quot;img-responsive&quot; /&gt;\n</code></pre>\n<p>逆に、画面幅を縮めた時に、画像が幅からはみ出ないようにするために、以下のように <code>img</code> タグそもそもの <code>max-width</code> の限界値を <code>100%</code> にしておきます。</p>\n<pre><code>img {\n  max-width: 100%;\n  height: auto;\n  border: 0;\n}\n</code></pre>\n<p>基本的に、比率を維持したまま拡大・縮小出来るのは、<code>img</code> タグだけなのですが、<code>padding</code> の仕様を利用すれば、例えば YouTube を埋め込んだ <code>iframe</code> をレスポンシブ対応することが出来ます。以下のサイトが詳しいです。</p>\n<ul>\n<li><a href=\"http://design-spice.com/2014/03/24/percentag/\">レスポンシブWebデザインでハマりがちな%指定 │ Design Spice</a></li>\n</ul>\n<h2>伸縮する画像を背景にする</h2>\n<p>基本的に、画像の伸縮を利用できるのは、<code>img</code> タグで画像を直接置いた場合なのですが、<code>background-size: cover;</code> を利用すれば、擬似的に伸縮する画像を背景にすることができます。「擬似的に」というのは、縦幅を固定する必要があるからです。</p>\n<p>以下のように実装すれば、伸縮する画像を背景にできます。<a href=\"http://apps.appbank.net/\">AppBankアプリサポート</a>ページのように、ブラウザの横幅を移動すると画像が伸縮するように見えます。</p>\n<pre><code>/* css */\n#hero {\n  width: 100%;\n  height: 200px;\n  background: url(images/hero.jpg) no-repeat center;\n  background-size: cover;\n}\n\n/* html */\n&lt;div id=&quot;hero&quot;&gt;&lt;/div&gt;\n</code></pre>\n<p>よくあるレスポンシブのサイトでは、画面幅いっぱいに表示することが多いのですが、その場合、ある程度大きな画像を用意する必要があります。</p>\n<p>大きい画像は読み込むスピードが遅いので以下のような対応で画像サイズを落とします。経験的に、100kb 以下がボーダーラインと思っています。</p>\n<ul>\n<li>jpg 画像にする（クオリティを 80 ~ 60% 程度に調整）</li>\n<li>モノクロ・ぼかしを画像にかける</li>\n<li>画像圧縮ツールで容量を減らす（<a href=\"http://imageoptim.com/\">ImageOptim — better Save For Web</a>/<a href=\"http://www.jpegmini.com/\">JPEGmini - Your Photos on a Diet!</a> 等）</li>\n</ul>\n<h2>画面幅に応じて画像を出し分ける方法</h2>\n<p>画面幅に応じて画像を出し分けるには、2つの実装方法があります。</p>\n<ul>\n<li>JavaScript による画面幅の監視</li>\n<li>メディアクエリと background を使用する</li>\n</ul>\n<p>以下のコードは、JavaScript で画面のリサイズを監視し、画面幅 768px を境界に <code>img</code> タグの画像ファイルを変えています。</p>\n<pre><code>function changeImgSrc(width) {\n  if (width &gt; 768) {\n    document.getElementById('img-hero').src = &quot;images/hero.jpg&quot;;\n  } else {\n    document.getElementById('img-hero').src = &quot;images/hero_sp.jpg&quot;;\n  }\n}\n\nvar width = window.innerWidth;\nchangeImgSrc(width); // 初回\n\nwindow.onresize = function resize() {\n  var currentWidth = window.innerWidth;\n  if ( (width &lt; 768 &amp;&amp; 768 &lt;= currentWidth) || ( width &gt; 768 &amp;&amp; 768 &gt;= currentWidth) ) {\n    // 画面幅が 768px を堺に変わった時だけ呼ばれる\n    changeImgSrc(currentWidth);\n  }\n  width = currentWidth;\n};\n</code></pre>\n<p>また、メディアクエリと <code>background</code> に画像を指定することで似たようなことを実現できます。実装と運用はこちらのほうが楽ですが、<code>background</code> に指定した画像は、伸縮ができない点に注意です。</p>\n<pre><code>.change-img {\n  display: block;\n  width: 150px;\n  height: 150px;\n  background: url(images/photo.png) no-repeat;\n  background-size: 150px 150px;\n}\n\n@media (min-width: 480px) {\n  .change-img {\n    width: 300px;\n    height: 300px;\n    background: url(images/photo@2x.png) no-repeat;\n    background-size: 300px 300px;\n  }\n}\n</code></pre>\n<h2>リンクを押せる領域を意識する</h2>\n<p>これは、レスポンシブサイトに限らず、スマートフォンサイトでも大事な考え方です。</p>\n<p>例として、リストを使用して、その中にリンクテキストを書く場合を想定します。次のようなコードになるかと思います。ちなみに、タップしやすいと言われる縦幅 44px を意識しています。</p>\n<pre><code>/* css */\nul.vertical-list {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\nul.vertical-list li {\n  width: 100%;\n  height: 43px;\n  line-height: 43px;\n  border-bottom: 1px solid #ddd;\n}\n\n/* html */\n&lt;ul class=&quot;vertical-list&quot;&gt;\n  &lt;li&gt;\n    &lt;a href=&quot;&quot;&gt;尋常ではないもふもふ&lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<p>これを iPhone からタップしてみます。灰色の領域が押せる領域を示しています。左側の画像が押せる領域です。</p>\n<p><img src=\"/images/2014/04/6558_3.png\" alt=\"\"></p>\n<p>幅を 44px 用意したのですが、テキストの縦幅分しか存在していません。これは、<code>a</code> タグが <code>display: inline</code> 要素（テキスト幅に追従する）であることに因ります。右側の画像のように 44px を押せる範囲にするには、以下のように <code>block</code> を指定してあげます。</p>\n<pre><code>/* css */\nul.vertical-list li a {\n  display: block;\n  width: 100%;\n}\n</code></pre>\n<h2>参考</h2>\n<p>{{&lt;amazon id=&quot;4048863231&quot; title=&quot;レスポンシブWebデザイン マルチデバイス時代のコンセプトとテクニック (WEB PROFESSIONAL)&quot; src=&quot;https://images-na.ssl-images-amazon.com/images/I/417RBoT17SL.<em>SL160</em>.jpg&quot;&gt;}}</p>\n",
  "dir": "static/content/archives",
  "base": "2014-04-19-6558.json",
  "ext": ".json",
  "sourceBase": "2014-04-19-6558.md",
  "sourceExt": ".md"
}