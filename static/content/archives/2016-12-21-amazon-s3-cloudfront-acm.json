{
  "categories": [
    "AWS"
  ],
  "date": "2016-12-21T07:56:51.000Z",
  "draft": false,
  "slug": "amazon-s3-cloudfront-acm",
  "title": "Amazon S3 で運用しているブログを HTTPS 化した",
  "bodyContent": "![](/images/2016/12/amazon-s3-cloudfront-acm.png)\n\n勉強のためにブログを HTTPS 化しました。このブログは静的サイトジェネレータ Hugo で生成したファイルを Amazon S3 にホスティングしており、ドメインも Amazon Route 53 で管理しています。\n\nHTTPS 化の手順としては、AWS Certificate Manager, ACM から SLL 証明書を取得します。その証明書はそのまま S3 には使用できないため、CloudFront という Content Delivery Network, CDN を間に挟んで HTTPS 化します。\n\n以下の記事を参考に進めましたが、躓いた点をこの記事にメモとして残しておきます。\n\n- [[ACM] AWS Certificate Manager 無料のサーバ証明書でCloudFrontをHTTPS化してみた ｜ Developers.IO](http://dev.classmethod.jp/cloud/aws/acm-cloudfront-ssl/)\n\n## AWS Certificate Manager, ACM\n\nドメイン認証の際、ドメイン管理者のメールアドレス（administrator@, postmaster@, admin@, hostmaster@, webmaster@）に確認メールが送信されますが、メールサーバーを持っていなかったため、以下の記事を参考にドメイン認証を行いました。\n\n- [【そんなときどうする？】メールサーバはないけれどACMを使いたい！ | サーバーワークス エンジニアブログ](http://blog.serverworks.co.jp/tech/2016/06/30/acm-auth-method/)\n\nちなみに、バケットに登録するアカウント ID は次のページから確認できます。→ [Billing Management Console](https://console.aws.amazon.com/billing/home?#/account)\n\n自分の場合 www 無しの rakuishi.com を設定したいので「ドメイン名」にワイルドカード `*.rakuishi.com` を「追加の名前」に `rakuishi.com` を設定しました。\n\nまた、AWS Certificate Manager では、米国東部（バージニア北部）を選択するようにします。後述する CloudFront では、他の地域には対応していないためです。\n\n- [Services Integrated with AWS Certificate Manager - AWS Certificate Manager](https://docs.aws.amazon.com/ja_jp/acm/latest/userguide/acm-services.html)\n\n## CloudFront\n\n基本的には、先程の記事に従いますが、Route 53 の設定に入る前に、CloudFront に Amazon S3 のコンテンツが紐付けされているかどうか確認してみます。CloudFront Distribution 作成後に表示される以下のような Domain Name をブラウザに貼り付けます。\n\n- **************.cloudfront.net\n\n自分の場合、トップページ `/index.html` とサブディレクトリ `/about/index.html` が AccessDenied が返ってきてしまったので、以下の記事を参考に修正しました。\n\n- [[CloudFront + S3]特定バケットに特定ディストリビューションのみからアクセスできるよう設定する ｜ Developers.IO](http://dev.classmethod.jp/cloud/aws/cloudfront-s3-origin-access-identity/)\n- [CloudFront に S3 bucket のサブディレクトリパスのコンテンツを参照させる - Qiita](http://qiita.com/naoiwata/items/3c6626cbeacbb44d4aa8)\n\n後は、Behaviors の Time to live, TTL を調整したり、Viewer Protocol Policy を Redirect HTTP to HTTPS に変更したりしました。CloudFront では設定に時間がかかるし、CDN キャッシュがあるし、のんびり作業しましょう。\n\n## Route 53\n\nS3 のために作成していたレコードの Alias Target を S3 → CloudFront に向くようにすれば OK です。\n\n## Others\n\nHTTP からのリソース読み込みがあると Google Chrome の場合では、緑色の鍵マークにならないため、画像のリンク先を HTTPS に変える必要があります。→ [SSLページにAmazonからの画像を表示する。 - 前人未踏の領域へ](http://d.hatena.ne.jp/takeR/20141026/1414356669)\n\nまた、コメントシステム Disqus のマイグレーションのために、CSV ファイルを用意しました。詳しい方法は次の記事が詳しいです。→ [How to Migrate Disqus Comments to HTTPS - woorkup](https://woorkup.com/migrate-disqus-comments-https/)",
  "bodyHtml": "<p><img src=\"/images/2016/12/amazon-s3-cloudfront-acm.png\" alt=\"\"></p>\n<p>勉強のためにブログを HTTPS 化しました。このブログは静的サイトジェネレータ Hugo で生成したファイルを Amazon S3 にホスティングしており、ドメインも Amazon Route 53 で管理しています。</p>\n<p>HTTPS 化の手順としては、AWS Certificate Manager, ACM から SLL 証明書を取得します。その証明書はそのまま S3 には使用できないため、CloudFront という Content Delivery Network, CDN を間に挟んで HTTPS 化します。</p>\n<p>以下の記事を参考に進めましたが、躓いた点をこの記事にメモとして残しておきます。</p>\n<ul>\n<li><a href=\"http://dev.classmethod.jp/cloud/aws/acm-cloudfront-ssl/\">[ACM] AWS Certificate Manager 無料のサーバ証明書でCloudFrontをHTTPS化してみた ｜ Developers.IO</a></li>\n</ul>\n<h2>AWS Certificate Manager, ACM</h2>\n<p>ドメイン認証の際、ドメイン管理者のメールアドレス（administrator@, postmaster@, admin@, hostmaster@, webmaster@）に確認メールが送信されますが、メールサーバーを持っていなかったため、以下の記事を参考にドメイン認証を行いました。</p>\n<ul>\n<li><a href=\"http://blog.serverworks.co.jp/tech/2016/06/30/acm-auth-method/\">【そんなときどうする？】メールサーバはないけれどACMを使いたい！ | サーバーワークス エンジニアブログ</a></li>\n</ul>\n<p>ちなみに、バケットに登録するアカウント ID は次のページから確認できます。→ <a href=\"https://console.aws.amazon.com/billing/home?#/account\">Billing Management Console</a></p>\n<p>自分の場合 www 無しの rakuishi.com を設定したいので「ドメイン名」にワイルドカード <code>*.rakuishi.com</code> を「追加の名前」に <code>rakuishi.com</code> を設定しました。</p>\n<p>また、AWS Certificate Manager では、米国東部（バージニア北部）を選択するようにします。後述する CloudFront では、他の地域には対応していないためです。</p>\n<ul>\n<li><a href=\"https://docs.aws.amazon.com/ja_jp/acm/latest/userguide/acm-services.html\">Services Integrated with AWS Certificate Manager - AWS Certificate Manager</a></li>\n</ul>\n<h2>CloudFront</h2>\n<p>基本的には、先程の記事に従いますが、Route 53 の設定に入る前に、CloudFront に Amazon S3 のコンテンツが紐付けされているかどうか確認してみます。CloudFront Distribution 作成後に表示される以下のような Domain Name をブラウザに貼り付けます。</p>\n<ul>\n<li>**************.cloudfront.net</li>\n</ul>\n<p>自分の場合、トップページ <code>/index.html</code> とサブディレクトリ <code>/about/index.html</code> が AccessDenied が返ってきてしまったので、以下の記事を参考に修正しました。</p>\n<ul>\n<li><a href=\"http://dev.classmethod.jp/cloud/aws/cloudfront-s3-origin-access-identity/\">[CloudFront + S3]特定バケットに特定ディストリビューションのみからアクセスできるよう設定する ｜ Developers.IO</a></li>\n<li><a href=\"http://qiita.com/naoiwata/items/3c6626cbeacbb44d4aa8\">CloudFront に S3 bucket のサブディレクトリパスのコンテンツを参照させる - Qiita</a></li>\n</ul>\n<p>後は、Behaviors の Time to live, TTL を調整したり、Viewer Protocol Policy を Redirect HTTP to HTTPS に変更したりしました。CloudFront では設定に時間がかかるし、CDN キャッシュがあるし、のんびり作業しましょう。</p>\n<h2>Route 53</h2>\n<p>S3 のために作成していたレコードの Alias Target を S3 → CloudFront に向くようにすれば OK です。</p>\n<h2>Others</h2>\n<p>HTTP からのリソース読み込みがあると Google Chrome の場合では、緑色の鍵マークにならないため、画像のリンク先を HTTPS に変える必要があります。→ <a href=\"http://d.hatena.ne.jp/takeR/20141026/1414356669\">SSLページにAmazonからの画像を表示する。 - 前人未踏の領域へ</a></p>\n<p>また、コメントシステム Disqus のマイグレーションのために、CSV ファイルを用意しました。詳しい方法は次の記事が詳しいです。→ <a href=\"https://woorkup.com/migrate-disqus-comments-https/\">How to Migrate Disqus Comments to HTTPS - woorkup</a></p>\n",
  "dir": "static/content/archives",
  "base": "2016-12-21-amazon-s3-cloudfront-acm.json",
  "ext": ".json",
  "sourceBase": "2016-12-21-amazon-s3-cloudfront-acm.md",
  "sourceExt": ".md"
}