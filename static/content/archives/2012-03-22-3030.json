{
  "categories": [
    "iOS"
  ],
  "date": "2012-03-22T03:42:44.000Z",
  "draft": false,
  "slug": 3030,
  "title": "[iOS SDK] UITableView に UISearchBar を追加する",
  "bodyContent": "UITableView にセットしたデータを UISearchBar で、検索するプログラムを組んでみました。\n\n動作確認：Xcode 4.3.1, 非 ARC\n\n![](/images/2012/03/3030_1.png)\n\nこのように、文字を入力していくと、検索結果がリアルタイムで絞られます。Cancel ボタンをタップすると検索が終了します。\n\n![](/images/2012/03/3030_2.png)\n\n## 新規プロジェクトの作成\n\n「File」→「New」→「Project...」と移動します。\n\nここでは、UITableView が始めから用意されている「Master-Detail Application」を選択します。\n\nここでは、Use Storyboards, Use Core Data, Use Automatic Reference Counting, Include Unit Tests すべてのチェックを外しておきます。\n\nProduct Name は、お好きな名前で。\n\n## MasterViewController.h を変更\n\nSearchDisplay, SearchBar の delegate を追加しておきます。\n\nUITableView に表示させるデータを持たせる配列 originalData と、検索でマッチするデータを持たせる動的配列 searchData を用意します。\n\n```\n#import <UIKit/UIKit.h>\n\n@class DetailViewController;\n\n@interface MasterViewController : UITableViewController <UISearchDisplayDelegate, UISearchBarDelegate> {\n    NSArray *originalData;\n    NSMutableArray *searchData;\n}\n\n@property (strong, nonatomic) DetailViewController *detailViewController;\n\n@end\n```\n\n## MasterViewController.m を変更\n\nここからは、各メソッドごとに解説していきます。\n\nviewDidLoad では、検索バーの実装とデータ配列の初期化を行います。「Master-Detail Application」で元から用意されている editButton, addButton は、必要ないので削除しています。\n\n```\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    // Do any additional setup after loading the view, typically from a nib.\n\n    UISearchBar *searchBar = [[[UISearchBar alloc] initWithFrame:CGRectMake(0, 0, self.view.bounds.size.width, 44.0f)] autorelease];\n    UISearchDisplayController *searchDisplayController = [[UISearchDisplayController alloc] initWithSearchBar:searchBar contentsController:self];\n    searchDisplayController.delegate = self;\n    searchDisplayController.searchResultsDelegate = self;\n    searchDisplayController.searchResultsDataSource = self;\n    self.tableView.tableHeaderView = searchBar;\n\n    originalData = [[NSArray alloc] initWithObjects: @\"iPhone\", @\"iPod\", @\"iPod touch\", @\"iMac\", @\"Mac Pro\", @\"iBook\", @\"MacBook\", @\"MacBook Pro\", @\"PowerBook\", nil];\n    searchData = [[NSMutableArray arrayWithCapacity: originalData.count] retain];\n}\n```\n\nnumberOfRowsInSection メソッドは、UITableView のセル数を管理しています。検索状態か否かで分岐させて、返す値を変更しています。\n\n```\n- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section\n{\n    if(tableView == self.searchDisplayController.searchResultsTableView)\n        return searchData.count;\n    return originalData.count;\n}\n```\n\ncellForRowAtIndexPath メソッドも同様に、検索状態か否かで分岐させて、cell.textLabel.text に代入する値を変更させています。\n\n```\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    static NSString *CellIdentifier = @\"Cell\";\n    \n    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];\n    if (cell == nil) {\n        cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier] autorelease];\n        cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;\n    }\n\n    if(tableView == self.searchDisplayController.searchResultsTableView)\n        cell.textLabel.text = [searchData objectAtIndex:indexPath.row];\n    else\n        cell.textLabel.text = [originalData objectAtIndex:indexPath.row];\n    \n    return cell;\n}\n```\n\ndidSelectRowAtIndexPath メソッドでは、テーブルのセルがタップされた時の処理を書きます。移動したビュー先のタイトルをセル名にするようにしています。\n\n```\n- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    if (!self.detailViewController) {\n        self.detailViewController = [[[DetailViewController alloc] initWithNibName:@\"DetailViewController\" bundle:nil] autorelease];\n    }\n    \n    if(tableView == self.searchDisplayController.searchResultsTableView)\n        self.detailViewController.title = [searchData objectAtIndex:indexPath.row];\n    else\n        self.detailViewController.title = [originalData objectAtIndex:indexPath.row];\n    \n    [self.navigationController pushViewController:self.detailViewController animated:YES];\n}\n```\n\nここからは、実際に検索して絞り込んでいく処理を行っています。\n\nfor(NSString *label in originalData) 内で、検索結果を絞り込んでいます。ここでは、曖昧（大・小文字、文字位置を区別しない）な検索を行っています。\n\n```\n- (void)filterContentForSearchText:(NSString*)searchString scope:(NSString*)scope {\n    [searchData removeAllObjects];\n\n    for(NSString *label in originalData) {\n        NSRange range = [label rangeOfString:searchString \n                                     options:NSCaseInsensitiveSearch];\n        if(range.length > 0)\n            [searchData addObject:label];\n    }\n}\n\n- (BOOL)searchDisplayController:(UISearchDisplayController*)controller shouldReloadTableForSearchString:(NSString*)searchString {\n    [self filterContentForSearchText: searchString\n                               scope: [[self.searchDisplayController.searchBar scopeButtonTitles] objectAtIndex:[self.searchDisplayController.searchBar selectedScopeButtonIndex]]];\n    return YES;\n}\n```\n\nこれで、実行すると動くはずです。\n\n## Special Thanks !\n\n* [[iOS] Interface Builder を使わないで UISearchBar を追加してみた | しゃけログ](http://syake-web.com/blog/2011/07/14/ios-uisearchbar/)\n* [iOS SDK] Add UISearchBar to UITableView programmatically | minuX",
  "bodyHtml": "<p>UITableView にセットしたデータを UISearchBar で、検索するプログラムを組んでみました。</p>\n<p>動作確認：Xcode 4.3.1, 非 ARC</p>\n<p><img src=\"/images/2012/03/3030_1.png\" alt=\"\"></p>\n<p>このように、文字を入力していくと、検索結果がリアルタイムで絞られます。Cancel ボタンをタップすると検索が終了します。</p>\n<p><img src=\"/images/2012/03/3030_2.png\" alt=\"\"></p>\n<h2>新規プロジェクトの作成</h2>\n<p>「File」→「New」→「Project...」と移動します。</p>\n<p>ここでは、UITableView が始めから用意されている「Master-Detail Application」を選択します。</p>\n<p>ここでは、Use Storyboards, Use Core Data, Use Automatic Reference Counting, Include Unit Tests すべてのチェックを外しておきます。</p>\n<p>Product Name は、お好きな名前で。</p>\n<h2>MasterViewController.h を変更</h2>\n<p>SearchDisplay, SearchBar の delegate を追加しておきます。</p>\n<p>UITableView に表示させるデータを持たせる配列 originalData と、検索でマッチするデータを持たせる動的配列 searchData を用意します。</p>\n<pre><code>#import &lt;UIKit/UIKit.h&gt;\n\n@class DetailViewController;\n\n@interface MasterViewController : UITableViewController &lt;UISearchDisplayDelegate, UISearchBarDelegate&gt; {\n    NSArray *originalData;\n    NSMutableArray *searchData;\n}\n\n@property (strong, nonatomic) DetailViewController *detailViewController;\n\n@end\n</code></pre>\n<h2>MasterViewController.m を変更</h2>\n<p>ここからは、各メソッドごとに解説していきます。</p>\n<p>viewDidLoad では、検索バーの実装とデータ配列の初期化を行います。「Master-Detail Application」で元から用意されている editButton, addButton は、必要ないので削除しています。</p>\n<pre><code>- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    // Do any additional setup after loading the view, typically from a nib.\n\n    UISearchBar *searchBar = [[[UISearchBar alloc] initWithFrame:CGRectMake(0, 0, self.view.bounds.size.width, 44.0f)] autorelease];\n    UISearchDisplayController *searchDisplayController = [[UISearchDisplayController alloc] initWithSearchBar:searchBar contentsController:self];\n    searchDisplayController.delegate = self;\n    searchDisplayController.searchResultsDelegate = self;\n    searchDisplayController.searchResultsDataSource = self;\n    self.tableView.tableHeaderView = searchBar;\n\n    originalData = [[NSArray alloc] initWithObjects: @&quot;iPhone&quot;, @&quot;iPod&quot;, @&quot;iPod touch&quot;, @&quot;iMac&quot;, @&quot;Mac Pro&quot;, @&quot;iBook&quot;, @&quot;MacBook&quot;, @&quot;MacBook Pro&quot;, @&quot;PowerBook&quot;, nil];\n    searchData = [[NSMutableArray arrayWithCapacity: originalData.count] retain];\n}\n</code></pre>\n<p>numberOfRowsInSection メソッドは、UITableView のセル数を管理しています。検索状態か否かで分岐させて、返す値を変更しています。</p>\n<pre><code>- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section\n{\n    if(tableView == self.searchDisplayController.searchResultsTableView)\n        return searchData.count;\n    return originalData.count;\n}\n</code></pre>\n<p>cellForRowAtIndexPath メソッドも同様に、検索状態か否かで分岐させて、cell.textLabel.text に代入する値を変更させています。</p>\n<pre><code>- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    static NSString *CellIdentifier = @&quot;Cell&quot;;\n    \n    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];\n    if (cell == nil) {\n        cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier] autorelease];\n        cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;\n    }\n\n    if(tableView == self.searchDisplayController.searchResultsTableView)\n        cell.textLabel.text = [searchData objectAtIndex:indexPath.row];\n    else\n        cell.textLabel.text = [originalData objectAtIndex:indexPath.row];\n    \n    return cell;\n}\n</code></pre>\n<p>didSelectRowAtIndexPath メソッドでは、テーブルのセルがタップされた時の処理を書きます。移動したビュー先のタイトルをセル名にするようにしています。</p>\n<pre><code>- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    if (!self.detailViewController) {\n        self.detailViewController = [[[DetailViewController alloc] initWithNibName:@&quot;DetailViewController&quot; bundle:nil] autorelease];\n    }\n    \n    if(tableView == self.searchDisplayController.searchResultsTableView)\n        self.detailViewController.title = [searchData objectAtIndex:indexPath.row];\n    else\n        self.detailViewController.title = [originalData objectAtIndex:indexPath.row];\n    \n    [self.navigationController pushViewController:self.detailViewController animated:YES];\n}\n</code></pre>\n<p>ここからは、実際に検索して絞り込んでいく処理を行っています。</p>\n<p>for(NSString *label in originalData) 内で、検索結果を絞り込んでいます。ここでは、曖昧（大・小文字、文字位置を区別しない）な検索を行っています。</p>\n<pre><code>- (void)filterContentForSearchText:(NSString*)searchString scope:(NSString*)scope {\n    [searchData removeAllObjects];\n\n    for(NSString *label in originalData) {\n        NSRange range = [label rangeOfString:searchString \n                                     options:NSCaseInsensitiveSearch];\n        if(range.length &gt; 0)\n            [searchData addObject:label];\n    }\n}\n\n- (BOOL)searchDisplayController:(UISearchDisplayController*)controller shouldReloadTableForSearchString:(NSString*)searchString {\n    [self filterContentForSearchText: searchString\n                               scope: [[self.searchDisplayController.searchBar scopeButtonTitles] objectAtIndex:[self.searchDisplayController.searchBar selectedScopeButtonIndex]]];\n    return YES;\n}\n</code></pre>\n<p>これで、実行すると動くはずです。</p>\n<h2>Special Thanks !</h2>\n<ul>\n<li><a href=\"http://syake-web.com/blog/2011/07/14/ios-uisearchbar/\">[iOS] Interface Builder を使わないで UISearchBar を追加してみた | しゃけログ</a></li>\n<li>[iOS SDK] Add UISearchBar to UITableView programmatically | minuX</li>\n</ul>\n",
  "dir": "static/content/archives",
  "base": "2012-03-22-3030.json",
  "ext": ".json",
  "sourceBase": "2012-03-22-3030.md",
  "sourceExt": ".md"
}