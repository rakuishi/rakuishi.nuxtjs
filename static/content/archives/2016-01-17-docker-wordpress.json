{
  "categories": [
    "WordPress"
  ],
  "date": "2016-01-17T05:53:50.000Z",
  "draft": false,
  "slug": "docker-wordpress",
  "title": "Docker で WordPress サイト開発を始める",
  "bodyContent": "以前、WordPress のローカル仮想環境の構築を Vagrant を利用した [VCCW](http://vccw.cc/) で試したことがあるのですが、以下の理由から使うのを諦めたことがありました。\n\n* 仮想環境の起動が遅かった\n* 恐らくパーミッション設定が間違えているのかメディアがアップロードできなかった\n* 開発しているテーマとプラグインをどのように Git で管理するのか、サンプル記事をどのように共有するのか、イメージが湧かなかった\n\n仕方なくこれまで通りに [MAMP](https://www.mamp.info/en/) でローカル仮想環境を構築していた折、[Docker で WordPress サイトを開発してみよう](http://www.slideshare.net/mookjp/dockerword-press) というスライドを見かけて、Docker を始めてみました。上記の悩みを見事に解決出来たので（特に起動と破棄が一瞬だったのに感動した！）、今後は Docker を使っていくことにしました。\n\nこの記事は上記のスライドを参考に、Docker で WordPress サイトを動かし、さらにテーマとプラグインを管理できるところまでを書きました。\n\n## Mac OS X：Docker での作業の流れ\n\n[VirtualBox](https://www.virtualbox.org/) と [Docker Toolbox](https://www.docker.com/docker-toolbox) をインストールしておきます。\n\n1. Dockerfile に設定を書く\n1. Dockerfile をビルドしてイメージ（Docker images）を作る（例えば、 Ubuntu や、Apache、作成した Web アプリケーションを含む)\n1. イメージからコンテナ（Docker containers）を立ち上げる\n\n## Docker Machine を起動する\n\nDocker Toolbox のインストール時に、アプリケーションフォルダに追加される Docker Quickstart Terminal.app を起動し、`default` という名前で用意された Linux 環境を立ち上げます。起動に成功するとコンテナを積んでいる Moby Dock くんが表示されます。\n\n```\n                        ##         .\n                  ## ## ##        ==\n               ## ## ## ## ##    ===\n           /\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\\___/ ===\n      ~~~ {~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~\n           \\______ o           __/\n             \\    \\         __/\n              \\____\\_______/\n\n\ndocker is configured to use the default machine with IP 192.168.99.100\nFor help getting started, check out the docs at https://docs.docker.com\n```\n\n## Dockerfile をビルドしてイメージを作成する\n\nGitHub 上に置いたレポジトリ [rakuishi/wordpress: Wordpress Docker image](https://github.com/rakuishi/wordpress) から Dockerfile を持ってきます。Dockerfile をビルドすると、必要なファイルがダウンロードされイメージが作成されます。\n\nこの [Dockerfile](https://github.com/rakuishi/wordpress/blob/master/Dockerfile) には、LAMP 環境（Linux, Apache, MySQL, PHP）を元に WordPress に必要な作業の手順が書かれています。\n\n```\n$ git clone https://github.com/rakuishi/wordpress.git docker-wordpress\n$ cd docker-wordpress\n$ docker build -t docker-wordpress .\n```\n\nイメージの一覧は、以下のコマンドで確認できます。\n\n```\n$ docker images\nREPOSITORY        TAG     IMAGE ID      CREATED         VIRTUAL SIZE\ndocker-wordpress  latest  38ebdeeaeb7e  10 seconds ago  475.4 MB\ntutum/lamp        latest  f02090877f42  4 weeks ago     426.5 MB\n```\n\n## イメージからコンテナを立ち上げる\n\nイメージからコンテナを立ち上げます。`-v $(pwd):/data-share` のオプションは必須ではありませんが、次の作業でコンテナ内とローカルのファイルを共有するために書いています。ブラウザに初回設定画面が表示されるので、アカウントの作成まで済ませておきます。\n\n```\n$ docker run -d -p 80:80 -v $(pwd):/data-share --name=docker-wordpress docker-wordpress\n$ docker-machine ip default\n192.168.99.100\n$ open http://192.168.99.100/\n```\n\nまた、コンテナの一覧は、以下のコマンドで確認できます。\n\n```\n$ docker ps\nCONTAINER ID  IMAGE             COMMAND    CREATED         STATUS         PORTS                         NAMES\nc5f1ba815676  docker-wordpress  \"/run.sh\"  28 seconds ago  Up 27 seconds  0.0.0.0:80->80/tcp, 3306/tcp  docker-wordpress\n```\n\n## データベースとテーマ・プラグインを dump する\n\nWordPress サイトを管理できるように、データベースの内容をまるごとと、テーマ・プラグインを含む wp-content/ をコンテナから dump します。これらのファイルを含めてバージョン管理することで、他の人と同じ環境を共有できます。\n\n```\n$ docker exec docker-wordpress sh -c \"mysqldump -u root wordpress > /data-share/dump.sql\"\n$ mkdir public_html\n$ docker exec docker-wordpress sh -c \"cp -r /app/wp-content/ /data-share/public_html/\"\n```\n\n## dump したデータをもとに WordPress を立ち上げる\n\nDockerfile に記述している以下のコメントアウトを外します。\n\n```\n# ADD public_html/wp-content /app/wp-content\n```\n\nmysql-setup.sh に記述している以下のコメントアウトを外します。\n\n```\n# mysql -uroot wordpress < /dump.sql\n```\n\n一度、立ち上がっているコンテナを削除し、再度、Dockerfile からイメージを作成し、コンテナを立ち上げます。wp-content/ をコンテナ内と共有しているので、ローカルでテーマ・プラグインを編集すると反映されます。\n\n```\n$ docker rm -f docker-wordpress\n$ docker build -t docker-wordpress .\n$ docker run -d -p 80:80 -v $(pwd)/public_html/wp-content:/app/wp-content/ -v $(pwd)/dump.sql:/dump.sql --name=docker-wordpress docker-wordpress\n```\n\n## 参考\n\n* [Installation on Mac OS X](https://docs.docker.com/engine/installation/mac/)\n* [tutumcloud/lamp: LAMP base docker image](https://github.com/tutumcloud/lamp)\n* [tutumcloud/wordpress: Wordpress docker image with bundled MySQL server (only for testing purposes)](https://github.com/tutumcloud/wordpress)",
  "bodyHtml": "<p>以前、WordPress のローカル仮想環境の構築を Vagrant を利用した <a href=\"http://vccw.cc/\">VCCW</a> で試したことがあるのですが、以下の理由から使うのを諦めたことがありました。</p>\n<ul>\n<li>仮想環境の起動が遅かった</li>\n<li>恐らくパーミッション設定が間違えているのかメディアがアップロードできなかった</li>\n<li>開発しているテーマとプラグインをどのように Git で管理するのか、サンプル記事をどのように共有するのか、イメージが湧かなかった</li>\n</ul>\n<p>仕方なくこれまで通りに <a href=\"https://www.mamp.info/en/\">MAMP</a> でローカル仮想環境を構築していた折、<a href=\"http://www.slideshare.net/mookjp/dockerword-press\">Docker で WordPress サイトを開発してみよう</a> というスライドを見かけて、Docker を始めてみました。上記の悩みを見事に解決出来たので（特に起動と破棄が一瞬だったのに感動した！）、今後は Docker を使っていくことにしました。</p>\n<p>この記事は上記のスライドを参考に、Docker で WordPress サイトを動かし、さらにテーマとプラグインを管理できるところまでを書きました。</p>\n<h2>Mac OS X：Docker での作業の流れ</h2>\n<p><a href=\"https://www.virtualbox.org/\">VirtualBox</a> と <a href=\"https://www.docker.com/docker-toolbox\">Docker Toolbox</a> をインストールしておきます。</p>\n<ol>\n<li>Dockerfile に設定を書く</li>\n<li>Dockerfile をビルドしてイメージ（Docker images）を作る（例えば、 Ubuntu や、Apache、作成した Web アプリケーションを含む)</li>\n<li>イメージからコンテナ（Docker containers）を立ち上げる</li>\n</ol>\n<h2>Docker Machine を起動する</h2>\n<p>Docker Toolbox のインストール時に、アプリケーションフォルダに追加される Docker Quickstart Terminal.app を起動し、<code>default</code> という名前で用意された Linux 環境を立ち上げます。起動に成功するとコンテナを積んでいる Moby Dock くんが表示されます。</p>\n<pre><code>                        ##         .\n                  ## ## ##        ==\n               ## ## ## ## ##    ===\n           /&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\\___/ ===\n      ~~~ {~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~\n           \\______ o           __/\n             \\    \\         __/\n              \\____\\_______/\n\n\ndocker is configured to use the default machine with IP 192.168.99.100\nFor help getting started, check out the docs at https://docs.docker.com\n</code></pre>\n<h2>Dockerfile をビルドしてイメージを作成する</h2>\n<p>GitHub 上に置いたレポジトリ <a href=\"https://github.com/rakuishi/wordpress\">rakuishi/wordpress: Wordpress Docker image</a> から Dockerfile を持ってきます。Dockerfile をビルドすると、必要なファイルがダウンロードされイメージが作成されます。</p>\n<p>この <a href=\"https://github.com/rakuishi/wordpress/blob/master/Dockerfile\">Dockerfile</a> には、LAMP 環境（Linux, Apache, MySQL, PHP）を元に WordPress に必要な作業の手順が書かれています。</p>\n<pre><code>$ git clone https://github.com/rakuishi/wordpress.git docker-wordpress\n$ cd docker-wordpress\n$ docker build -t docker-wordpress .\n</code></pre>\n<p>イメージの一覧は、以下のコマンドで確認できます。</p>\n<pre><code>$ docker images\nREPOSITORY        TAG     IMAGE ID      CREATED         VIRTUAL SIZE\ndocker-wordpress  latest  38ebdeeaeb7e  10 seconds ago  475.4 MB\ntutum/lamp        latest  f02090877f42  4 weeks ago     426.5 MB\n</code></pre>\n<h2>イメージからコンテナを立ち上げる</h2>\n<p>イメージからコンテナを立ち上げます。<code>-v $(pwd):/data-share</code> のオプションは必須ではありませんが、次の作業でコンテナ内とローカルのファイルを共有するために書いています。ブラウザに初回設定画面が表示されるので、アカウントの作成まで済ませておきます。</p>\n<pre><code>$ docker run -d -p 80:80 -v $(pwd):/data-share --name=docker-wordpress docker-wordpress\n$ docker-machine ip default\n192.168.99.100\n$ open http://192.168.99.100/\n</code></pre>\n<p>また、コンテナの一覧は、以下のコマンドで確認できます。</p>\n<pre><code>$ docker ps\nCONTAINER ID  IMAGE             COMMAND    CREATED         STATUS         PORTS                         NAMES\nc5f1ba815676  docker-wordpress  &quot;/run.sh&quot;  28 seconds ago  Up 27 seconds  0.0.0.0:80-&gt;80/tcp, 3306/tcp  docker-wordpress\n</code></pre>\n<h2>データベースとテーマ・プラグインを dump する</h2>\n<p>WordPress サイトを管理できるように、データベースの内容をまるごとと、テーマ・プラグインを含む wp-content/ をコンテナから dump します。これらのファイルを含めてバージョン管理することで、他の人と同じ環境を共有できます。</p>\n<pre><code>$ docker exec docker-wordpress sh -c &quot;mysqldump -u root wordpress &gt; /data-share/dump.sql&quot;\n$ mkdir public_html\n$ docker exec docker-wordpress sh -c &quot;cp -r /app/wp-content/ /data-share/public_html/&quot;\n</code></pre>\n<h2>dump したデータをもとに WordPress を立ち上げる</h2>\n<p>Dockerfile に記述している以下のコメントアウトを外します。</p>\n<pre><code># ADD public_html/wp-content /app/wp-content\n</code></pre>\n<p>mysql-setup.sh に記述している以下のコメントアウトを外します。</p>\n<pre><code># mysql -uroot wordpress &lt; /dump.sql\n</code></pre>\n<p>一度、立ち上がっているコンテナを削除し、再度、Dockerfile からイメージを作成し、コンテナを立ち上げます。wp-content/ をコンテナ内と共有しているので、ローカルでテーマ・プラグインを編集すると反映されます。</p>\n<pre><code>$ docker rm -f docker-wordpress\n$ docker build -t docker-wordpress .\n$ docker run -d -p 80:80 -v $(pwd)/public_html/wp-content:/app/wp-content/ -v $(pwd)/dump.sql:/dump.sql --name=docker-wordpress docker-wordpress\n</code></pre>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://docs.docker.com/engine/installation/mac/\">Installation on Mac OS X</a></li>\n<li><a href=\"https://github.com/tutumcloud/lamp\">tutumcloud/lamp: LAMP base docker image</a></li>\n<li><a href=\"https://github.com/tutumcloud/wordpress\">tutumcloud/wordpress: Wordpress docker image with bundled MySQL server (only for testing purposes)</a></li>\n</ul>\n",
  "dir": "static/content/archives",
  "base": "2016-01-17-docker-wordpress.json",
  "ext": ".json",
  "sourceBase": "2016-01-17-docker-wordpress.md",
  "sourceExt": ".md"
}