{
  "categories": [
    "CSS"
  ],
  "date": "2014-04-06T11:58:03.000Z",
  "draft": false,
  "slug": 6519,
  "title": "スタイルシートを楽しくする Sass & Compass を導入してみる",
  "bodyContent": "最近は HTML/CSS を書くのが仕事になった。CSS は、半年前までは何となくで書いてきたが、この頃は、マークアップされた HTML に思い通りのデザインを CSS で載せられるようになった。\n\nその日々の CSS コーディングをする中で繰り返し作業が多くなってきたことに気付いた。例えば、CSS リセットとかレスポンシブサイトのグリッドの記述、`header nav, header nav ul, header nav ul li` のようなセレクタの重複表現。なんかこういうのを解決する方法ないのんと思っていたら、Sass とか Compass とかが便利で流行りみたいだ。\n\n## Sass & Compass\n\n## Sass\n\n[Sass: Syntactically Awesome Style Sheets](http://sass-lang.com/) は、CSS を効率よく書ける拡張機能。プログラム言語みたいに、16進数の色を変数として持てたり、繰り返しの記述がなるべく減るように再利用可能なパーツを取り扱える。\n\nCSS と同じように書けて、それに便利な機能追加されているイメージ（だと思う）。Sass は、`.scss` という拡張子である。html ファイルはこれを扱えないので `.scss` から `.css` にコンパイルする必要がある。面倒だけれど、使われるからには便利なのだろう。\n\nSass はプログラミング言語 Ruby で書かれているので利用する環境に Ruby がインストールされていることが前提となりますが、Mac OS X にはもともとインストールされている。ターミナルで、次のコマンドを実行すれば、インストールされます（パスワードが求められます）。\n\n```\n$ sudo gem install sass\n```\n\n## Compass\n\nCompass は、Sass 用の便利なツールが詰まったフレームワーク。Sass のミックスイン（少ない記述で異なるブラウザ間に対応した CSS や、再利用可能でパラメータによって変更可能な要素を出力してくれる便利な関数）などをライブラリ化している。\n\n画像ファイルの幅や高さを自動計算してくれたり、画像のスプライト化を自動でやってくれる機能もある。Compass で Sass をコンパイルして実際の CSS を作成する。インストールするには、次のコマンドを実行すれば OK です。\n\n```\n$ sudo gem install compass\n```\n\n## Compass プロジェクトを作成\n\n適当な場所で次のコマンドを実行します。\n\n```\n$ compass create sample\ndirectory sample/ \ndirectory sample/sass/ \ndirectory sample/stylesheets/ \n   create sample/config.rb \n   create sample/sass/screen.scss \n   create sample/sass/print.scss \n   create sample/sass/ie.scss \n   create sample/stylesheets/ie.css \n   create sample/stylesheets/print.css \n   create sample/stylesheets/screen.css\n\n...\n\nTo import your new stylesheets add the following lines of HTML (or equivalent) to your webpage:\n<head>\n  <link href=\"/stylesheets/screen.css\" media=\"screen, projection\" rel=\"stylesheet\" type=\"text/css\" />\n  <link href=\"/stylesheets/print.css\" media=\"print\" rel=\"stylesheet\" type=\"text/css\" />\n  <!--[if IE]>\n      <link href=\"/stylesheets/ie.css\" media=\"screen, projection\" rel=\"stylesheet\" type=\"text/css\" />\n  <![endif]-->\n</head>\n```\n\nsass フォルダに、これから編集する sass ファイルが、stylesheets フォルダにコンパイル後の css が格納されています。\n\nsample フォルダに移動して、`compass compile` コマンドでコンパイル出来る。ここでは、まだ何も変更していないので unchanged と言われた。\n\n```\n$ cd sample\n$ compass compile\nunchanged sass/ie.scss\nunchanged sass/print.scss\nunchanged sass/screen.scss\n```\n\n## Sass を実際に書いてみる \n変数の利用とネスト化を試してみます。`sass/screen.scss` に以下の内容を記述しました。\n\n`@import \"compass/reset\";` が「CSS リセット」の宣言に当たります（1）。また、色と値を変数で持ってみました（2）。Sass 変数は、`$` が冒頭に付きます。また、Sass では、セレクタのネスト化が出来ます。このサイトの一部分を Sass のネスト化で記述してみました（3）。\n\n```\n@import \"compass/reset\"; // 1\n@include reset-html5;\n\n$border-color: #DDD; // 2\n$margin-right-value: 6px;\nnav { // 3\n  border-bottom: 1px solid $border-color;\n  background-color: #F7F8FB;\n  margin: 0 auto;\n  ul {\n    text-align: center;\n    li {\n      margin-right: $margin-right-value;\n      display: inline;\n      &:last-child { margin-right: 0; }\n      img { margin-right: $margin-right-value; }\n      a { color: #2B2B2B; }\n    }\n  }\n}\n```\n\n`compass compile` でコンパイルすると `stylesheets/screen.css` に先ほどの変更が出力されます。\n\n```\n/* CSS リセット箇所を省略 */\n\nnav {\n  border-bottom: 1px solid #dddddd;\n  background-color: #F7F8FB;\n  margin: 0 auto;\n}\nnav ul {\n  text-align: center;\n}\nnav ul li {\n  margin-right: 6px;\n  display: inline;\n}\nnav ul li:last-child {\n  margin-right: 0;\n}\nnav ul li img {\n  margin-right: 6px;\n}\nnav ul li a {\n  color: #2B2B2B;\n}\n```\n\nこのように、Sass を使えば、セレクタの繰り返しのような入力作業を大幅に減らし、読みやすさが得られています。慣れるには時間が掛かりそうですが、Sass のミックスインが便利そうなので勉強していきたいと思います。スタイルシートを楽しくしよう！\n\n## 参考\n\n{{<amazon id=\"4798132446\" title=\"Sass&Compass徹底入門 CSSのベストプラクティスを効率よく実現するために (DESIGN & WEB TECHNOLOGY)\" src=\"https://images-na.ssl-images-amazon.com/images/I/51aeeQBbfhL._SL160_.jpg\">}}",
  "bodyHtml": "<p>最近は HTML/CSS を書くのが仕事になった。CSS は、半年前までは何となくで書いてきたが、この頃は、マークアップされた HTML に思い通りのデザインを CSS で載せられるようになった。</p>\n<p>その日々の CSS コーディングをする中で繰り返し作業が多くなってきたことに気付いた。例えば、CSS リセットとかレスポンシブサイトのグリッドの記述、<code>header nav, header nav ul, header nav ul li</code> のようなセレクタの重複表現。なんかこういうのを解決する方法ないのんと思っていたら、Sass とか Compass とかが便利で流行りみたいだ。</p>\n<h2>Sass &amp; Compass</h2>\n<h2>Sass</h2>\n<p><a href=\"http://sass-lang.com/\">Sass: Syntactically Awesome Style Sheets</a> は、CSS を効率よく書ける拡張機能。プログラム言語みたいに、16進数の色を変数として持てたり、繰り返しの記述がなるべく減るように再利用可能なパーツを取り扱える。</p>\n<p>CSS と同じように書けて、それに便利な機能追加されているイメージ（だと思う）。Sass は、<code>.scss</code> という拡張子である。html ファイルはこれを扱えないので <code>.scss</code> から <code>.css</code> にコンパイルする必要がある。面倒だけれど、使われるからには便利なのだろう。</p>\n<p>Sass はプログラミング言語 Ruby で書かれているので利用する環境に Ruby がインストールされていることが前提となりますが、Mac OS X にはもともとインストールされている。ターミナルで、次のコマンドを実行すれば、インストールされます（パスワードが求められます）。</p>\n<pre><code>$ sudo gem install sass\n</code></pre>\n<h2>Compass</h2>\n<p>Compass は、Sass 用の便利なツールが詰まったフレームワーク。Sass のミックスイン（少ない記述で異なるブラウザ間に対応した CSS や、再利用可能でパラメータによって変更可能な要素を出力してくれる便利な関数）などをライブラリ化している。</p>\n<p>画像ファイルの幅や高さを自動計算してくれたり、画像のスプライト化を自動でやってくれる機能もある。Compass で Sass をコンパイルして実際の CSS を作成する。インストールするには、次のコマンドを実行すれば OK です。</p>\n<pre><code>$ sudo gem install compass\n</code></pre>\n<h2>Compass プロジェクトを作成</h2>\n<p>適当な場所で次のコマンドを実行します。</p>\n<pre><code>$ compass create sample\ndirectory sample/ \ndirectory sample/sass/ \ndirectory sample/stylesheets/ \n   create sample/config.rb \n   create sample/sass/screen.scss \n   create sample/sass/print.scss \n   create sample/sass/ie.scss \n   create sample/stylesheets/ie.css \n   create sample/stylesheets/print.css \n   create sample/stylesheets/screen.css\n\n...\n\nTo import your new stylesheets add the following lines of HTML (or equivalent) to your webpage:\n&lt;head&gt;\n  &lt;link href=&quot;/stylesheets/screen.css&quot; media=&quot;screen, projection&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;\n  &lt;link href=&quot;/stylesheets/print.css&quot; media=&quot;print&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;\n  &lt;!--[if IE]&gt;\n      &lt;link href=&quot;/stylesheets/ie.css&quot; media=&quot;screen, projection&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;\n  &lt;![endif]--&gt;\n&lt;/head&gt;\n</code></pre>\n<p>sass フォルダに、これから編集する sass ファイルが、stylesheets フォルダにコンパイル後の css が格納されています。</p>\n<p>sample フォルダに移動して、<code>compass compile</code> コマンドでコンパイル出来る。ここでは、まだ何も変更していないので unchanged と言われた。</p>\n<pre><code>$ cd sample\n$ compass compile\nunchanged sass/ie.scss\nunchanged sass/print.scss\nunchanged sass/screen.scss\n</code></pre>\n<h2>Sass を実際に書いてみる</h2>\n<p>変数の利用とネスト化を試してみます。<code>sass/screen.scss</code> に以下の内容を記述しました。</p>\n<p><code>@import &quot;compass/reset&quot;;</code> が「CSS リセット」の宣言に当たります（1）。また、色と値を変数で持ってみました（2）。Sass 変数は、<code>$</code> が冒頭に付きます。また、Sass では、セレクタのネスト化が出来ます。このサイトの一部分を Sass のネスト化で記述してみました（3）。</p>\n<pre><code>@import &quot;compass/reset&quot;; // 1\n@include reset-html5;\n\n$border-color: #DDD; // 2\n$margin-right-value: 6px;\nnav { // 3\n  border-bottom: 1px solid $border-color;\n  background-color: #F7F8FB;\n  margin: 0 auto;\n  ul {\n    text-align: center;\n    li {\n      margin-right: $margin-right-value;\n      display: inline;\n      &amp;:last-child { margin-right: 0; }\n      img { margin-right: $margin-right-value; }\n      a { color: #2B2B2B; }\n    }\n  }\n}\n</code></pre>\n<p><code>compass compile</code> でコンパイルすると <code>stylesheets/screen.css</code> に先ほどの変更が出力されます。</p>\n<pre><code>/* CSS リセット箇所を省略 */\n\nnav {\n  border-bottom: 1px solid #dddddd;\n  background-color: #F7F8FB;\n  margin: 0 auto;\n}\nnav ul {\n  text-align: center;\n}\nnav ul li {\n  margin-right: 6px;\n  display: inline;\n}\nnav ul li:last-child {\n  margin-right: 0;\n}\nnav ul li img {\n  margin-right: 6px;\n}\nnav ul li a {\n  color: #2B2B2B;\n}\n</code></pre>\n<p>このように、Sass を使えば、セレクタの繰り返しのような入力作業を大幅に減らし、読みやすさが得られています。慣れるには時間が掛かりそうですが、Sass のミックスインが便利そうなので勉強していきたいと思います。スタイルシートを楽しくしよう！</p>\n<h2>参考</h2>\n<p>{{&lt;amazon id=&quot;4798132446&quot; title=&quot;Sass&amp;Compass徹底入門 CSSのベストプラクティスを効率よく実現するために (DESIGN &amp; WEB TECHNOLOGY)&quot; src=&quot;https://images-na.ssl-images-amazon.com/images/I/51aeeQBbfhL.<em>SL160</em>.jpg&quot;&gt;}}</p>\n",
  "dir": "static/content/archives",
  "base": "2014-04-06-6519.json",
  "ext": ".json",
  "sourceBase": "2014-04-06-6519.md",
  "sourceExt": ".md"
}