{
  "categories": [
    "Web Service"
  ],
  "date": "2016-01-31T12:04:03.000Z",
  "draft": false,
  "slug": "sakura-vps",
  "title": "さくらの VPS：環境設定から Web ページの表示まで",
  "bodyContent": "こういうのは数日後に確実に忘れるのでメモしておきます。\n\nさくらの VPS（メモリ 1 GB, SSD ストレージ 30 GB, 月額 900 円）を借りたので、割り当てられた IP アドレスにアクセスして、Hello World! と表示するところまでがゴールです。\n\n今回、以下のように設定されています（しましたが）、適宜読み替えてください。\n\n* ホスト名: host.vs.sakura.ne.jp（割り当てられたホスト名）\n* IP アドレス（割り当てられた IP アドレス）\n* 作業用ユーザー名: apps（任意）\n* 変更する ssh ポート番号: 61203（1024~65535  の範囲で任意）\n\n作業中にローカルとリモートの環境を行き来しています。どこでどのユーザーが作業しているかは、以下のように見方を知っておくと便利です。\n\n```bash\napps:~ apps$ # <= Mac 側での作業\n[root@host ~]# # <= VPS ルートログイン\n[apps@host ~]$ # <= VPS apps ユーザーログイン\n```\n\n## VPS 起動\n\n申し込み後に送られてくる「[さくらのVPS] 仮登録完了のお知らせ」に書かれているコントロールパネルにアクセスし、申し込んだサーバーを起動します。\n\n* [さくらのVPSコントロールパネル](https://secure.sakura.ad.jp/vps/#/login)\n\n## ssh 接続\n\nサーバー起動後すぐは `Connection refused` のエラーがでましたが、コーヒー豆を挽いてドリップしている間に接続できるようになりました。繋がらない場合は再起動すると良いみたい。これでルートユーザーでログインできました。\n\n```bash\napps:~ apps$ ssh root@${ip_address}\nssh: connect to host ${ip_address} port 22: Connection refused\napps:~ apps$ ssh root@${ip_address}\nThe authenticity of host '${ip_address} (${ip_address})' can't be established.\nAre you sure you want to continue connecting (yes/no)? # yes を入力\nroot@${ip_address}'s password: # メールに記載されていたパスワードを入力\n\nSAKURA Internet [Virtual Private Server SERVICE]\n\n[root@host ~]# \n```\n\n## yum update\n\nシステムのアップデートをしておきます。\n\n```bash\n[root@host ~]# yum update\n読み込んだプラグイン:fastestmirror, security\n更新処理の設定をしています\nLoading mirror speeds from cached hostfile\n * base: ftp.tsukuba.wide.ad.jp\n * epel: ftp.kddilabs.jp\n * extras: ftp.tsukuba.wide.ad.jp\n * updates: ftp.tsukuba.wide.ad.jp\n更新と設定されたパッケージがありません。\n```\n\n## 言語設定を日本語化\n\n```bash\n[root@host ~]# vim /etc/sysconfig/i18n\n```\n\n```sh\nLANG=\"C\"\n↓\nLANG=\"ja_JP.UTF-8\"\n```\n\n変更後、一度ログアウトし再度ログインすると言語設定が日本語になります。\n\n```bash\n[root@host ~]# exit\napps:~ apps$ ssh root@${ip_address}\n[root@host ~]# date\n2016年  1月 31日 日曜日 16:13:13 JST\n```\n\n## 作業用ユーザーの設定\n\n```bash\n[root@host ~]# useradd apps\n[root@host ~]# passwd apps\nユーザー apps のパスワードを変更。\n新しいパスワード:\n新しいパスワードを再入力してください:\npasswd: 全ての認証トークンが正しく更新できました。\n```\n\n一般ユーザーであってもルート権限で作業できるコマンド `sudo` を使えるようにします。\n\n```bash\n[root@host ~]# usermod -G wheel apps\n[root@host ~]# visudo\n```\n\nvim エディタが開くので `/wheel` と打ち込んで以下の部分を検索し、コメントアウトを外す。\n\n```sh\n# %wheel  ALL=(ALL)       ALL\n↓\n%wheel  ALL=(ALL)       ALL\n```\n\n試しに一度ログアウトして、ログインしてみます。\n\n```bash\napps:~ apps$ ssh apps@${ip_address}\napps@${ip_address}'s password: # 先ほど設定したパスワード\n\nSAKURA Internet [Virtual Private Server SERVICE]\n\n[apps@host ~]$\n```\n\n## パスワードから鍵認証に切り替える\n\nssh 用のディレクトリを作成し、権限を 700 に変更します（自分には読み書き実行できるが、他人にはできない）。\n\n```bash\n[apps@host ~]$ mkdir ~/.ssh\n[apps@host ~]$ chmod 700 ~/.ssh\n```\n\n既にssh 公開鍵を作っているから、鍵を作成する手順をスキップしました。以前に[この手順](https://help.github.com/articles/generating-a-new-ssh-key/)に従って作成しました。\n\n```bash\napps:~ apps$ ls -a .ssh/ | grep 'id_rsa'\nid_rsa\nid_rsa.pub\n```\n\n公開鍵を `authorized_keys` という名前で転送します。\n\n```bash\napps:~ apps$ scp ~/.ssh/id_rsa.pub apps@${ip_address}:~/.ssh/authorized_keys\napps@${ip_address}'s password: \nid_rsa.pub 100% 744 0.7KB/s 00:00 \n```\n\nすると転送後は、パスフレーズ無しでログインできるようになります。\n\n```bash\napps:~ apps$ ssh apps@${ip_address}\n```\n\n## ポート番号の変更\n\nssh の接続ポートはデフォルト TCP 22 番が割り当てられていますが、攻撃されやすいので任意の番号（1024~65535  の範囲）に変えておきます。\n\n以後、ルート権限の処理が続くため、以下のコマンドを打ち込んでルートに成り代わっておきます。\n\n```bash\n[apps@host ~]$ sudo -s\n\nWe trust you have received the usual lecture from the local System\nAdministrator. It usually boils down to these three things:\n\n    #1) Respect the privacy of others.\n    #2) Think before you type.\n    #3) With great power comes great responsibility.\n\n[sudo] password for apps: \n[root@host apps]# \n```\n\n```bash\n[root@host apps]# cp /etc/ssh/sshd_config /etc/ssh/sshd_config.org\n[root@host apps]# vim /etc/ssh/sshd_config\n```\n\nPort 番号を任意の数字（1024~65535  の範囲）に変更します。また、その他 2 点変更します。\n\n```sh\n#Port 22\n↓ # コメントアウトを外し、任意の数字にする\nPort 61203\n—\nPasswordAuthentication no\n↓ # no を yes にする\nPasswordAuthentication yes\n—\n#PermitRootLogin yes\n↓ # コメントアウトを外し、yes を no にする\nPermitRootLogin no\n```\n\n`diff` コマンドで変更内容を確認します。\n\n```bash\n[root@host apps]# diff /etc/ssh/sshd_config /etc/ssh/sshd_config.org\n13c13\n< Port 61203\n---\n> #Port 22\n42c42\n< PermitRootLogin no\n---\n> #PermitRootLogin yes\n66c66\n< PasswordAuthentication no\n---\n> PasswordAuthentication yes\n```\n\n```bash\n[root@host apps]# /usr/sbin/sshd -t # 記述が正しいかテスト\n[root@host apps]# service sshd restart\nsshd を停止中: [  OK  ]\nsshd を起動中: [  OK  ]\n```\n\n一度ログアウトしてポート番号が変更されているか確認します。`-p 61203` のように任意の番号を付けないと入れないようになっているのを確認できます。\n\n```bash\n[apps@host ~]$ exit\napps:~ apps$ ssh apps@${ip_address}\nssh: connect to host ${ip_address} port 22: Connection refused\napps:~ apps$ ssh -p 61203 apps@${ip_address}\nLast login: Sun Jan 31 17:08:03 2016 from 124x32x8x139.ap124.ftth.ucom.ne.jp\n\nSAKURA Internet [Virtual Private Server SERVICE]\n```\n\n## ファイアウォールの設定\n\n引き続きルート権限での処理が続きます。ファイアウォール機能である iptables は、サーバへ接続させる通信のルールを設定できます。 \n\n```bash\n[root@host apps]# vim /etc/sysconfig/iptables\n```\n\n以下のように記述します。\n\n```sh\n*filter\n:INPUT          DROP    [0:0]\n:FORWARD        DROP    [0:0]\n:OUTPUT         ACCEPT  [0:0]\n:SERVICES       -       [0:0]\n-A INPUT -i lo -j ACCEPT\n-A INPUT -p icmp --icmp-type echo-request -m limit --limit 1/s --limit-burst 4 -j ACCEPT\n-A INPUT -p tcp -m state --state ESTABLISHED,RELATED -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -j SERVICES\n-A INPUT -p udp --sport 53 -j ACCEPT\n-A INPUT -p udp --sport 123 --dport 123 -j ACCEPT\n-A SERVICES -p tcp --dport 61203 -j ACCEPT\n-A SERVICES -p tcp --dport 80 -j ACCEPT\n-A SERVICES -p tcp --dport 443 -j ACCEPT\nCOMMIT\n```\n\n```bash\n[root@host apps]# service iptables start\niptables: ファイアウォールルールを適用中: [  OK  ]\n[root@host apps]# iptables -L # 確認用\n```\n\n## Web サーバーの設定\n\nWeb サーバー Apache httpd をインストールします。\n\n```bash\n[root@host apps]# yum install httpd\n[root@host apps]# chkconfig httpd on # 再起動の時に、自動的に立ち上げる\n```\n\n設定ファイルを念の為にコピーしておきます。\n\n```bash\n[root@host apps]# cp /etc/httpd/conf/httpd.conf /etc/httpd/conf/httpd.conf.bk\n[root@host apps]# vim /etc/httpd/conf/httpd.conf\n```\n\n以下のように 3 箇所書き換えます。\n\n```sh\nServerTokens OS\n↓\nServerTokens Prod\n—\nServerSignature On\n↓\nServerSignature Off\n—\nOptions Indexes FollowSymLinks\n↓\nOptions -Indexes FollowSymLinks\n```\n\n`diff` コマンドで変更内容を確認します。\n\n```bash\n[root@host apps]# diff /etc/httpd/conf/httpd.conf /etc/httpd/conf/httpd.conf.bk\n44c44\n< ServerTokens Prod\n---\n> ServerTokens OS\n331c331\n<     Options -Indexes FollowSymLinks\n---\n>     Options Indexes FollowSymLinks\n536c536\n< ServerSignature Off\n---\n> ServerSignature On\n```\n\nWeb サーバーを立ち上げます。\n\n```bash\n[root@host apps]# service httpd configtest\nSyntax OK\n[root@host apps]# service httpd start\nhttpd を起動中: [  OK  ]\n```\n\nデフォルトの DocumentRoot の場所に html ファイルを置いて確認してみます。作業用ユーザーでファイルを作成しました。http://${ip_address}/ にアクセスして見えていれば、成功です。\n\n```bash\n[root@host apps]# chown -R apps:apps /var/www/html/\n[root@host apps]# exit\n[apps@host ~]$ echo 'Hello World!' >> /var/www/html/index.html\n```\n\n## 参考\n\n* [さくらのVPS入門 (全21回) - プログラミングならドットインストール](http://dotinstall.com/lessons/basic_sakura_vps)",
  "bodyHtml": "<p>こういうのは数日後に確実に忘れるのでメモしておきます。</p>\n<p>さくらの VPS（メモリ 1 GB, SSD ストレージ 30 GB, 月額 900 円）を借りたので、割り当てられた IP アドレスにアクセスして、Hello World! と表示するところまでがゴールです。</p>\n<p>今回、以下のように設定されています（しましたが）、適宜読み替えてください。</p>\n<ul>\n<li>ホスト名: host.vs.sakura.ne.jp（割り当てられたホスト名）</li>\n<li>IP アドレス（割り当てられた IP アドレス）</li>\n<li>作業用ユーザー名: apps（任意）</li>\n<li>変更する ssh ポート番号: 61203（1024~65535  の範囲で任意）</li>\n</ul>\n<p>作業中にローカルとリモートの環境を行き来しています。どこでどのユーザーが作業しているかは、以下のように見方を知っておくと便利です。</p>\n<pre><code class=\"hljs\">apps:~ apps$ <span class=\"hljs-comment\"># &lt;= Mac 側での作業</span>\n[root@host ~]<span class=\"hljs-comment\"># # &lt;= VPS ルートログイン</span>\n[apps@host ~]$ <span class=\"hljs-comment\"># &lt;= VPS apps ユーザーログイン</span></code></pre><h2>VPS 起動</h2>\n<p>申し込み後に送られてくる「[さくらのVPS] 仮登録完了のお知らせ」に書かれているコントロールパネルにアクセスし、申し込んだサーバーを起動します。</p>\n<ul>\n<li><a href=\"https://secure.sakura.ad.jp/vps/#/login\">さくらのVPSコントロールパネル</a></li>\n</ul>\n<h2>ssh 接続</h2>\n<p>サーバー起動後すぐは <code>Connection refused</code> のエラーがでましたが、コーヒー豆を挽いてドリップしている間に接続できるようになりました。繋がらない場合は再起動すると良いみたい。これでルートユーザーでログインできました。</p>\n<pre><code class=\"hljs\">apps:~ apps$ ssh root@<span class=\"hljs-variable\">${ip_address}</span>\nssh: connect to host <span class=\"hljs-variable\">${ip_address}</span> port 22: Connection refused\napps:~ apps$ ssh root@<span class=\"hljs-variable\">${ip_address}</span>\nThe authenticity of host <span class=\"hljs-string\">'${ip_address} (${ip_address})'</span> can<span class=\"hljs-string\">'t be established.\nAre you sure you want to continue connecting (yes/no)? # yes を入力\nroot@${ip_address}'</span>s password: <span class=\"hljs-comment\"># メールに記載されていたパスワードを入力</span>\n\nSAKURA Internet [Virtual Private Server SERVICE]\n\n[root@host ~]<span class=\"hljs-comment\">#</span></code></pre><h2>yum update</h2>\n<p>システムのアップデートをしておきます。</p>\n<pre><code class=\"hljs\">[root@host ~]<span class=\"hljs-comment\"># yum update</span>\n読み込んだプラグイン:fastestmirror, security\n更新処理の設定をしています\nLoading mirror speeds from cached hostfile\n * base: ftp.tsukuba.wide.ad.jp\n * epel: ftp.kddilabs.jp\n * extras: ftp.tsukuba.wide.ad.jp\n * updates: ftp.tsukuba.wide.ad.jp\n更新と設定されたパッケージがありません。</code></pre><h2>言語設定を日本語化</h2>\n<pre><code class=\"hljs\">[root@host ~]<span class=\"hljs-comment\"># vim /etc/sysconfig/i18n</span></code></pre><pre><code class=\"hljs\">LANG=<span class=\"hljs-string\">\"C\"</span>\n↓\nLANG=<span class=\"hljs-string\">\"ja_JP.UTF-8\"</span></code></pre><p>変更後、一度ログアウトし再度ログインすると言語設定が日本語になります。</p>\n<pre><code class=\"hljs\">[root@host ~]<span class=\"hljs-comment\"># exit</span>\napps:~ apps$ ssh root@<span class=\"hljs-variable\">${ip_address}</span>\n[root@host ~]<span class=\"hljs-comment\"># date</span>\n2016年  1月 31日 日曜日 16:13:13 JST</code></pre><h2>作業用ユーザーの設定</h2>\n<pre><code class=\"hljs\">[root@host ~]<span class=\"hljs-comment\"># useradd apps</span>\n[root@host ~]<span class=\"hljs-comment\"># passwd apps</span>\nユーザー apps のパスワードを変更。\n新しいパスワード:\n新しいパスワードを再入力してください:\npasswd: 全ての認証トークンが正しく更新できました。</code></pre><p>一般ユーザーであってもルート権限で作業できるコマンド <code>sudo</code> を使えるようにします。</p>\n<pre><code class=\"hljs\">[root@host ~]<span class=\"hljs-comment\"># usermod -G wheel apps</span>\n[root@host ~]<span class=\"hljs-comment\"># visudo</span></code></pre><p>vim エディタが開くので <code>/wheel</code> と打ち込んで以下の部分を検索し、コメントアウトを外す。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\"># %wheel  ALL=(ALL)       ALL</span>\n↓\n%wheel  ALL=(ALL)       ALL</code></pre><p>試しに一度ログアウトして、ログインしてみます。</p>\n<pre><code class=\"hljs\">apps:~ apps$ ssh apps@<span class=\"hljs-variable\">${ip_address}</span>\napps@<span class=\"hljs-variable\">${ip_address}</span><span class=\"hljs-string\">'s password: # 先ほど設定したパスワード\n\nSAKURA Internet [Virtual Private Server SERVICE]\n\n[apps@host ~]$</span></code></pre><h2>パスワードから鍵認証に切り替える</h2>\n<p>ssh 用のディレクトリを作成し、権限を 700 に変更します（自分には読み書き実行できるが、他人にはできない）。</p>\n<pre><code class=\"hljs\">[apps@host ~]$ mkdir ~/.ssh\n[apps@host ~]$ chmod 700 ~/.ssh</code></pre><p>既にssh 公開鍵を作っているから、鍵を作成する手順をスキップしました。以前に<a href=\"https://help.github.com/articles/generating-a-new-ssh-key/\">この手順</a>に従って作成しました。</p>\n<pre><code class=\"hljs\">apps:~ apps$ ls -a .ssh/ | grep <span class=\"hljs-string\">'id_rsa'</span>\nid_rsa\nid_rsa.pub</code></pre><p>公開鍵を <code>authorized_keys</code> という名前で転送します。</p>\n<pre><code class=\"hljs\">apps:~ apps$ scp ~/.ssh/id_rsa.pub apps@<span class=\"hljs-variable\">${ip_address}</span>:~/.ssh/authorized_keys\napps@<span class=\"hljs-variable\">${ip_address}</span><span class=\"hljs-string\">'s password: \nid_rsa.pub 100% 744 0.7KB/s 00:00</span></code></pre><p>すると転送後は、パスフレーズ無しでログインできるようになります。</p>\n<pre><code class=\"hljs\">apps:~ apps$ ssh apps@<span class=\"hljs-variable\">${ip_address}</span></code></pre><h2>ポート番号の変更</h2>\n<p>ssh の接続ポートはデフォルト TCP 22 番が割り当てられていますが、攻撃されやすいので任意の番号（1024~65535  の範囲）に変えておきます。</p>\n<p>以後、ルート権限の処理が続くため、以下のコマンドを打ち込んでルートに成り代わっておきます。</p>\n<pre><code class=\"hljs\">[apps@host ~]$ sudo -s\n\nWe trust you have received the usual lecture from the <span class=\"hljs-built_in\">local</span> System\nAdministrator. It usually boils down to these three things:\n\n    <span class=\"hljs-comment\">#1) Respect the privacy of others.</span>\n    <span class=\"hljs-comment\">#2) Think before you type.</span>\n    <span class=\"hljs-comment\">#3) With great power comes great responsibility.</span>\n\n[sudo] password <span class=\"hljs-keyword\">for</span> apps: \n[root@host apps]<span class=\"hljs-comment\">#</span></code></pre><pre><code class=\"hljs\">[root@host apps]<span class=\"hljs-comment\"># cp /etc/ssh/sshd_config /etc/ssh/sshd_config.org</span>\n[root@host apps]<span class=\"hljs-comment\"># vim /etc/ssh/sshd_config</span></code></pre><p>Port 番号を任意の数字（1024~65535  の範囲）に変更します。また、その他 2 点変更します。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">#Port 22</span>\n↓ <span class=\"hljs-comment\"># コメントアウトを外し、任意の数字にする</span>\nPort 61203\n—\nPasswordAuthentication no\n↓ <span class=\"hljs-comment\"># no を yes にする</span>\nPasswordAuthentication yes\n—\n<span class=\"hljs-comment\">#PermitRootLogin yes</span>\n↓ <span class=\"hljs-comment\"># コメントアウトを外し、yes を no にする</span>\nPermitRootLogin no</code></pre><p><code>diff</code> コマンドで変更内容を確認します。</p>\n<pre><code class=\"hljs\">[root@host apps]<span class=\"hljs-comment\"># diff /etc/ssh/sshd_config /etc/ssh/sshd_config.org</span>\n13c13\n&lt; Port 61203\n---\n&gt; <span class=\"hljs-comment\">#Port 22</span>\n42c42\n&lt; PermitRootLogin no\n---\n&gt; <span class=\"hljs-comment\">#PermitRootLogin yes</span>\n66c66\n&lt; PasswordAuthentication no\n---\n&gt; PasswordAuthentication yes</code></pre><pre><code class=\"hljs\">[root@host apps]<span class=\"hljs-comment\"># /usr/sbin/sshd -t # 記述が正しいかテスト</span>\n[root@host apps]<span class=\"hljs-comment\"># service sshd restart</span>\nsshd を停止中: [  OK  ]\nsshd を起動中: [  OK  ]</code></pre><p>一度ログアウトしてポート番号が変更されているか確認します。<code>-p 61203</code> のように任意の番号を付けないと入れないようになっているのを確認できます。</p>\n<pre><code class=\"hljs\">[apps@host ~]$ <span class=\"hljs-built_in\">exit</span>\napps:~ apps$ ssh apps@<span class=\"hljs-variable\">${ip_address}</span>\nssh: connect to host <span class=\"hljs-variable\">${ip_address}</span> port 22: Connection refused\napps:~ apps$ ssh -p 61203 apps@<span class=\"hljs-variable\">${ip_address}</span>\nLast login: Sun Jan 31 17:08:03 2016 from 124x32x8x139.ap124.ftth.ucom.ne.jp\n\nSAKURA Internet [Virtual Private Server SERVICE]</code></pre><h2>ファイアウォールの設定</h2>\n<p>引き続きルート権限での処理が続きます。ファイアウォール機能である iptables は、サーバへ接続させる通信のルールを設定できます。</p>\n<pre><code class=\"hljs\">[root@host apps]<span class=\"hljs-comment\"># vim /etc/sysconfig/iptables</span></code></pre><p>以下のように記述します。</p>\n<pre><code class=\"hljs\">*filter\n:INPUT          DROP    [0:0]\n:FORWARD        DROP    [0:0]\n:OUTPUT         ACCEPT  [0:0]\n:SERVICES       -       [0:0]\n-A INPUT -i lo -j ACCEPT\n-A INPUT -p icmp --icmp-type <span class=\"hljs-built_in\">echo</span>-request -m <span class=\"hljs-built_in\">limit</span> --<span class=\"hljs-built_in\">limit</span> 1/s --<span class=\"hljs-built_in\">limit</span>-burst 4 -j ACCEPT\n-A INPUT -p tcp -m state --state ESTABLISHED,RELATED -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -j SERVICES\n-A INPUT -p udp --sport 53 -j ACCEPT\n-A INPUT -p udp --sport 123 --dport 123 -j ACCEPT\n-A SERVICES -p tcp --dport 61203 -j ACCEPT\n-A SERVICES -p tcp --dport 80 -j ACCEPT\n-A SERVICES -p tcp --dport 443 -j ACCEPT\nCOMMIT</code></pre><pre><code class=\"hljs\">[root@host apps]<span class=\"hljs-comment\"># service iptables start</span>\niptables: ファイアウォールルールを適用中: [  OK  ]\n[root@host apps]<span class=\"hljs-comment\"># iptables -L # 確認用</span></code></pre><h2>Web サーバーの設定</h2>\n<p>Web サーバー Apache httpd をインストールします。</p>\n<pre><code class=\"hljs\">[root@host apps]<span class=\"hljs-comment\"># yum install httpd</span>\n[root@host apps]<span class=\"hljs-comment\"># chkconfig httpd on # 再起動の時に、自動的に立ち上げる</span></code></pre><p>設定ファイルを念の為にコピーしておきます。</p>\n<pre><code class=\"hljs\">[root@host apps]<span class=\"hljs-comment\"># cp /etc/httpd/conf/httpd.conf /etc/httpd/conf/httpd.conf.bk</span>\n[root@host apps]<span class=\"hljs-comment\"># vim /etc/httpd/conf/httpd.conf</span></code></pre><p>以下のように 3 箇所書き換えます。</p>\n<pre><code class=\"hljs\">ServerTokens OS\n↓\nServerTokens Prod\n—\nServerSignature On\n↓\nServerSignature Off\n—\nOptions Indexes FollowSymLinks\n↓\nOptions -Indexes FollowSymLinks</code></pre><p><code>diff</code> コマンドで変更内容を確認します。</p>\n<pre><code class=\"hljs\">[root@host apps]<span class=\"hljs-comment\"># diff /etc/httpd/conf/httpd.conf /etc/httpd/conf/httpd.conf.bk</span>\n44c44\n&lt; ServerTokens Prod\n---\n&gt; ServerTokens OS\n331c331\n&lt;     Options -Indexes FollowSymLinks\n---\n&gt;     Options Indexes FollowSymLinks\n536c536\n&lt; ServerSignature Off\n---\n&gt; ServerSignature On</code></pre><p>Web サーバーを立ち上げます。</p>\n<pre><code class=\"hljs\">[root@host apps]<span class=\"hljs-comment\"># service httpd configtest</span>\nSyntax OK\n[root@host apps]<span class=\"hljs-comment\"># service httpd start</span>\nhttpd を起動中: [  OK  ]</code></pre><p>デフォルトの DocumentRoot の場所に html ファイルを置いて確認してみます。作業用ユーザーでファイルを作成しました。http://${ip_address}/ にアクセスして見えていれば、成功です。</p>\n<pre><code class=\"hljs\">[root@host apps]<span class=\"hljs-comment\"># chown -R apps:apps /var/www/html/</span>\n[root@host apps]<span class=\"hljs-comment\"># exit</span>\n[apps@host ~]$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'Hello World!'</span> &gt;&gt; /var/www/html/index.html</code></pre><h2>参考</h2>\n<ul>\n<li><a href=\"http://dotinstall.com/lessons/basic_sakura_vps\">さくらのVPS入門 (全21回) - プログラミングならドットインストール</a></li>\n</ul>\n",
  "dir": "static/content/archives",
  "base": "2016-01-31-sakura-vps.json",
  "ext": ".json",
  "sourceBase": "2016-01-31-sakura-vps.md",
  "sourceExt": ".md"
}