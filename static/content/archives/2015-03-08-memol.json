{
  "categories": [
    "Polymer"
  ],
  "date": "2015-03-08T06:06:40.000Z",
  "draft": false,
  "slug": "memol",
  "title": "Web Components フレームワーク Polymer を使って付箋メモアプリを作ってみた",
  "bodyContent": "この一週間ぐらい [Polymer](https://www.polymer-project.org/) という Google が作っている Web Components のフレームワークを試してみた。Web Components と Polymer のざっくりとした説明と、作った付箋メモアプリについて紹介します。\n\n## Web Components とは\n\nPolymer サイトからの引用だけれど、例えば Google Map をサイトに表示したかったら以下のように書ける。\n\n\t<!-- Polyfill Web Components support for older browsers -->\n\t<script src=\"components/webcomponentsjs/webcomponents.min.js\"></script>\n\n\t<!-- Import element -->\n\t<link rel=\"import\" href=\"google-map.html\">\n\n\t<!-- Use element -->\n\t<google-map lat=\"37.790\" long=\"-122.390\"></google-map>\n\nこれだけで表示されるのか不思議に思うけれど、実際のマップ部分は `link` でインポートしている [google-map.html](https://github.com/GoogleWebComponents/google-map/blob/master/google-map.html) に、`google-map` 要素の定義、それを実現する HTML/CSS/JavaScript が書かれていて、それが呼び出されている形になっている。\n\ngoogle-map.html で定義されている CSS スタイル、JavaScript オブジェクトなどはルールに則って書かれているならば、他の Web Components で記述したスタイルや関数名が衝突するのを心配する必要がなくなる。\n\nこういうのをどんどこ足していって、ウェブ・アプリケーションを構築できるというのが、Web Components がメジャとなった未来。\n\n## Polymer と Web Components の違い\n\nPolymer に含まれている [webcomponents.js](https://github.com/WebComponents/webcomponentsjs) は、まだ Web Components をサポートしていない環境でも動作させるために必要です。純粋な Web Components を使いたかったら、その JavaScript を読み込むだけで OK です。\n\nPolymer はその Web Components の扱い難い部分をラップしていて、さらに Android 5 に搭載されている Material Design を実装したカスタム要素が使える。`core-toolbar` とか `paper-button` という名前が付いている。また、`core-ajax` などは、見た目には関与しない Ajax を簡単に使える要素です。\n\n難しいのは、どこまでが Web Components の機能で、どこからが Polymer か、というのがわかりにくいという点です。下記の記事が分かりやすいのですが、Polymer が便利すぎるというのもあって、なかなか純粋な Web Components への理解が進まない。\n\n* [Polymer と Web Components の違い9選（もとい Polymer の便利機能）](http://havelog.ayumusato.com/develop/webcomponents/e603-diff_of_polymer_and_webcomponents.html)\n\n## 付箋メモアプリ memol\n\nというわけで、付箋メモアプリを練習がてら作ってみた。Polymer と indexedDB とフレキシブルレイアウト（CSS3 の Flexbox）については、初めて触ってみた。Material Design 的な要素はあまり使っていない。\n\n* [GitHub] [rakuishi/memol](https://github.com/rakuishi/memol)\n* [Demo] [http://rakuishi.github.io/memol/](http://rakuishi.github.io/memol/)\n\n![memol](https://raw.githubusercontent.com/rakuishi/static/master/images/memol.png)\n\n## 実装する上で躓いた箇所\n\n* カスタム要素の命名ルール「一文字以上のハイフンを含むこと」を知らずに 1 時間ぐらい無駄にした。memol-card.html のように命名したら読み込めるようになった。\n* 異なるカスタム要素をまたぐ通知をどのように書けば良いのか分からなかった。`fire()` すれば良いのだけれど、親→子のように通知する場合は、`<polymer-element name=\"memol-card-list\" on-insert=\"{{insert}}\">` のように `on-*` を定義する。\n* indexedDB の非同期さの取り扱いに躓いた。途中までラッパーライブラリを作っていて、`return new Promise(function(resolve, reject) {});` を使えば同期処理的に書けそうだというところまで勉強したが、諦めて先人の知恵を使うことにした。→ [agektmr/polymer-idb](https://github.com/agektmr/polymer-idb)\n\n## おわりに\n\n全体的に情報が少なく、躓いた箇所が Polymer なのか、Web Components によるものなのか分からないのが総じて辛かった。学習コストは高めだと感じた。\n\nいわゆる普通のサイトはソースを見れば大体のことはわかるが、Web Components が主流となったサイトは読み解くのにかなりの労力がいるのかなと思った。昔は、メモ帳でサイトを更新していたのだけれど、思えば遠くまで来たものだ。",
  "bodyHtml": "<p>この一週間ぐらい <a href=\"https://www.polymer-project.org/\">Polymer</a> という Google が作っている Web Components のフレームワークを試してみた。Web Components と Polymer のざっくりとした説明と、作った付箋メモアプリについて紹介します。</p>\n<h2>Web Components とは</h2>\n<p>Polymer サイトからの引用だけれど、例えば Google Map をサイトに表示したかったら以下のように書ける。</p>\n<pre><code>&lt;!-- Polyfill Web Components support for older browsers --&gt;\n&lt;script src=&quot;components/webcomponentsjs/webcomponents.min.js&quot;&gt;&lt;/script&gt;\n\n&lt;!-- Import element --&gt;\n&lt;link rel=&quot;import&quot; href=&quot;google-map.html&quot;&gt;\n\n&lt;!-- Use element --&gt;\n&lt;google-map lat=&quot;37.790&quot; long=&quot;-122.390&quot;&gt;&lt;/google-map&gt;\n</code></pre>\n<p>これだけで表示されるのか不思議に思うけれど、実際のマップ部分は <code>link</code> でインポートしている <a href=\"https://github.com/GoogleWebComponents/google-map/blob/master/google-map.html\">google-map.html</a> に、<code>google-map</code> 要素の定義、それを実現する HTML/CSS/JavaScript が書かれていて、それが呼び出されている形になっている。</p>\n<p>google-map.html で定義されている CSS スタイル、JavaScript オブジェクトなどはルールに則って書かれているならば、他の Web Components で記述したスタイルや関数名が衝突するのを心配する必要がなくなる。</p>\n<p>こういうのをどんどこ足していって、ウェブ・アプリケーションを構築できるというのが、Web Components がメジャとなった未来。</p>\n<h2>Polymer と Web Components の違い</h2>\n<p>Polymer に含まれている <a href=\"https://github.com/WebComponents/webcomponentsjs\">webcomponents.js</a> は、まだ Web Components をサポートしていない環境でも動作させるために必要です。純粋な Web Components を使いたかったら、その JavaScript を読み込むだけで OK です。</p>\n<p>Polymer はその Web Components の扱い難い部分をラップしていて、さらに Android 5 に搭載されている Material Design を実装したカスタム要素が使える。<code>core-toolbar</code> とか <code>paper-button</code> という名前が付いている。また、<code>core-ajax</code> などは、見た目には関与しない Ajax を簡単に使える要素です。</p>\n<p>難しいのは、どこまでが Web Components の機能で、どこからが Polymer か、というのがわかりにくいという点です。下記の記事が分かりやすいのですが、Polymer が便利すぎるというのもあって、なかなか純粋な Web Components への理解が進まない。</p>\n<ul>\n<li><a href=\"http://havelog.ayumusato.com/develop/webcomponents/e603-diff_of_polymer_and_webcomponents.html\">Polymer と Web Components の違い9選（もとい Polymer の便利機能）</a></li>\n</ul>\n<h2>付箋メモアプリ memol</h2>\n<p>というわけで、付箋メモアプリを練習がてら作ってみた。Polymer と indexedDB とフレキシブルレイアウト（CSS3 の Flexbox）については、初めて触ってみた。Material Design 的な要素はあまり使っていない。</p>\n<ul>\n<li>[GitHub] <a href=\"https://github.com/rakuishi/memol\">rakuishi/memol</a></li>\n<li>[Demo] <a href=\"http://rakuishi.github.io/memol/\">http://rakuishi.github.io/memol/</a></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/rakuishi/static/master/images/memol.png\" alt=\"memol\"></p>\n<h2>実装する上で躓いた箇所</h2>\n<ul>\n<li>カスタム要素の命名ルール「一文字以上のハイフンを含むこと」を知らずに 1 時間ぐらい無駄にした。memol-card.html のように命名したら読み込めるようになった。</li>\n<li>異なるカスタム要素をまたぐ通知をどのように書けば良いのか分からなかった。<code>fire()</code> すれば良いのだけれど、親→子のように通知する場合は、<code>&lt;polymer-element name=&quot;memol-card-list&quot; on-insert=&quot;{{insert}}&quot;&gt;</code> のように <code>on-*</code> を定義する。</li>\n<li>indexedDB の非同期さの取り扱いに躓いた。途中までラッパーライブラリを作っていて、<code>return new Promise(function(resolve, reject) {});</code> を使えば同期処理的に書けそうだというところまで勉強したが、諦めて先人の知恵を使うことにした。→ <a href=\"https://github.com/agektmr/polymer-idb\">agektmr/polymer-idb</a></li>\n</ul>\n<h2>おわりに</h2>\n<p>全体的に情報が少なく、躓いた箇所が Polymer なのか、Web Components によるものなのか分からないのが総じて辛かった。学習コストは高めだと感じた。</p>\n<p>いわゆる普通のサイトはソースを見れば大体のことはわかるが、Web Components が主流となったサイトは読み解くのにかなりの労力がいるのかなと思った。昔は、メモ帳でサイトを更新していたのだけれど、思えば遠くまで来たものだ。</p>\n",
  "dir": "static/content/archives",
  "base": "2015-03-08-memol.json",
  "ext": ".json",
  "sourceBase": "2015-03-08-memol.md",
  "sourceExt": ".md"
}