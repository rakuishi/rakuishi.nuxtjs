{
  "categories": [
    "iOS"
  ],
  "date": "2013-04-08T11:08:20.000Z",
  "draft": false,
  "slug": 5641,
  "title": "[iOS] Nend SDK 2.0 に含まれている SBJson が重複する時の解決方法（duplicate symbols エラーを回避する方法）",
  "bodyContent": "広告ネットワーク Nend の SDK がバージョン2.0 にアップデートされました。広告識別子の利用開始と、ターゲティング広告をユーザー側が拒否できる（オプトアウト）できる仕組みが用意されたようですね。\n\n## 主な変更点\n\n主な変更点は、以下となります。\n\n> ■必須フレームワークの追加  \n> ・AdSupport.framework  \n> \n> ■メソッド、プロパティの追加\n> 【追加】  \n> @property (nonatomic) BOOL isOutputLog;  \n> エラーログや警告ログを、NSLog として出力するかどうかの指定（任意）\n> \n> 【廃止予定】  \n> @property (nonatomic, assign) UIViewController *rootViewController;  \n> モーダルビュー表示元のビューコントローラの指定(任意)\n> → 2.0.0時点では廃止しておりません。利用している場合は警告ログが出ますので、今後は利用しないようにしてください。\n> \n> ■スレッド  \n> ver2.0.0 より、delegate メソッドでの通知の際、一律メインスレッドで通知を行うよう変更されました。  \n> 以前のバージョンからの入れ替えの際、サブスレッドで通知を受ける前提での実装がある場合には十分にご注意ください。\n\nまた、上記に加えて SDK の静的ファイル libNendAd.a には、SBJson が含まれるようになったようです。\n\nプロジェクト上の他のファイルで、SBJson を利用している場合や、他の静的ファイルにも SBJson が含まれている場合、以下の様なエラーが出ます。\n\n```\nld: 6 duplicate symbols for architecture armv7\n```\n\nこの SBJson が重複する際の回避方法として、libNendAd.a から SBJson を取り除く方法を紹介します。\n\n## SBJson が重複する問題を解決する\n\nXcode のエラーを再度見返してみると libNendAd.a に含まれている以下の2つのファイルが重複しているみたいです。この2つのファイルを静的ファイル libNendAd.a から削除します。\n\n```\nlibNendAd.a(SBJsonParser.o)\nlibNendAd.a(SBJsonWriter.o)\n```\n\nまずは、\"lipo -info\" 命令でどのアーキテクチャに対応しているかを確認します。\n\n```\n$ lipo -info libNendAd.a\nArchitectures in the fat file: libNendAd.a are: armv7 (cputype (12) cpusubtype (11)) i386\n```\n\narmv7, i386 をそれぞれ分解します（作業フォルダ内でファイルが生成されます）。\n\n```\n$ lipo -thin armv7 libNendAd.a -output libNendAd.a_armv7\n$ lipo -thin i386 libNendAd.a -output libNendAd.a_i386\n```\n\nSBJson が含まれているファイルを検索します。\n\n```\n$ ar -t libNendAd.a_armv7|grep SBJson\nNSObject+SBJson.o\nSBJsonParser.o\nSBJsonStreamParser.o\nSBJsonStreamParserAccumulator.o\nSBJsonStreamParserAdapter.o\nSBJsonStreamParserState.o\nSBJsonStreamWriter.o\nSBJsonStreamWriterAccumulator.o\nSBJsonStreamWriterState.o\nSBJsonTokeniser.o\nSBJsonUTF8Stream.o\nSBJsonWriter.o\n```\n\nここに含まれている SBJsonParser.o, SBJsonWriter.o を削除します\n\n```\n$ ar -dv libNendAd.a_armv7 SBJsonParser.o SBJsonWriter.o\nd - SBJsonParser.o\nd - SBJsonWriter.o\n\n$ ar -dv libNendAd.a_i386 SBJsonParser.o SBJsonWriter.o\nd - SBJsonParser.o\nd - SBJsonWriter.o\n```\n\n最後に結合して、新しい libNendAd.a の出来上がりです。\n\n```\n$ lipo -create libNendAd.a_i386 libNendAd.a_armv7 -output libNendAd.a\n```\n\nこれを今までエラーが出ていたプロジェクトに突っ込むとエラーが消えているはずです。\n\n参考：[Xcodeでビルドした時の”duplicate symbols”エラーを回避する #Objective-C #Xcode #iOS - Qiita](http://qiita.com/items/af7c88f2d16d97985387)",
  "bodyHtml": "<p>広告ネットワーク Nend の SDK がバージョン2.0 にアップデートされました。広告識別子の利用開始と、ターゲティング広告をユーザー側が拒否できる（オプトアウト）できる仕組みが用意されたようですね。</p>\n<h2>主な変更点</h2>\n<p>主な変更点は、以下となります。</p>\n<blockquote>\n<p>■必須フレームワークの追加<br>\n・AdSupport.framework</p>\n<p>■メソッド、プロパティの追加\n【追加】<br>\n@property (nonatomic) BOOL isOutputLog;<br>\nエラーログや警告ログを、NSLog として出力するかどうかの指定（任意）</p>\n<p>【廃止予定】<br>\n@property (nonatomic, assign) UIViewController *rootViewController;<br>\nモーダルビュー表示元のビューコントローラの指定(任意)\n→ 2.0.0時点では廃止しておりません。利用している場合は警告ログが出ますので、今後は利用しないようにしてください。</p>\n<p>■スレッド<br>\nver2.0.0 より、delegate メソッドでの通知の際、一律メインスレッドで通知を行うよう変更されました。<br>\n以前のバージョンからの入れ替えの際、サブスレッドで通知を受ける前提での実装がある場合には十分にご注意ください。</p>\n</blockquote>\n<p>また、上記に加えて SDK の静的ファイル libNendAd.a には、SBJson が含まれるようになったようです。</p>\n<p>プロジェクト上の他のファイルで、SBJson を利用している場合や、他の静的ファイルにも SBJson が含まれている場合、以下の様なエラーが出ます。</p>\n<pre><code>ld: 6 duplicate symbols for architecture armv7\n</code></pre>\n<p>この SBJson が重複する際の回避方法として、libNendAd.a から SBJson を取り除く方法を紹介します。</p>\n<h2>SBJson が重複する問題を解決する</h2>\n<p>Xcode のエラーを再度見返してみると libNendAd.a に含まれている以下の2つのファイルが重複しているみたいです。この2つのファイルを静的ファイル libNendAd.a から削除します。</p>\n<pre><code>libNendAd.a(SBJsonParser.o)\nlibNendAd.a(SBJsonWriter.o)\n</code></pre>\n<p>まずは、&quot;lipo -info&quot; 命令でどのアーキテクチャに対応しているかを確認します。</p>\n<pre><code>$ lipo -info libNendAd.a\nArchitectures in the fat file: libNendAd.a are: armv7 (cputype (12) cpusubtype (11)) i386\n</code></pre>\n<p>armv7, i386 をそれぞれ分解します（作業フォルダ内でファイルが生成されます）。</p>\n<pre><code>$ lipo -thin armv7 libNendAd.a -output libNendAd.a_armv7\n$ lipo -thin i386 libNendAd.a -output libNendAd.a_i386\n</code></pre>\n<p>SBJson が含まれているファイルを検索します。</p>\n<pre><code>$ ar -t libNendAd.a_armv7|grep SBJson\nNSObject+SBJson.o\nSBJsonParser.o\nSBJsonStreamParser.o\nSBJsonStreamParserAccumulator.o\nSBJsonStreamParserAdapter.o\nSBJsonStreamParserState.o\nSBJsonStreamWriter.o\nSBJsonStreamWriterAccumulator.o\nSBJsonStreamWriterState.o\nSBJsonTokeniser.o\nSBJsonUTF8Stream.o\nSBJsonWriter.o\n</code></pre>\n<p>ここに含まれている SBJsonParser.o, SBJsonWriter.o を削除します</p>\n<pre><code>$ ar -dv libNendAd.a_armv7 SBJsonParser.o SBJsonWriter.o\nd - SBJsonParser.o\nd - SBJsonWriter.o\n\n$ ar -dv libNendAd.a_i386 SBJsonParser.o SBJsonWriter.o\nd - SBJsonParser.o\nd - SBJsonWriter.o\n</code></pre>\n<p>最後に結合して、新しい libNendAd.a の出来上がりです。</p>\n<pre><code>$ lipo -create libNendAd.a_i386 libNendAd.a_armv7 -output libNendAd.a\n</code></pre>\n<p>これを今までエラーが出ていたプロジェクトに突っ込むとエラーが消えているはずです。</p>\n<p>参考：<a href=\"http://qiita.com/items/af7c88f2d16d97985387\">Xcodeでビルドした時の”duplicate symbols”エラーを回避する #Objective-C #Xcode #iOS - Qiita</a></p>\n",
  "dir": "static/content/archives",
  "base": "2013-04-08-5641.json",
  "ext": ".json",
  "sourceBase": "2013-04-08-5641.md",
  "sourceExt": ".md"
}