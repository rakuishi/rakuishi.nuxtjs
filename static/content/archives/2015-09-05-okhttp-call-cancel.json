{
  "categories": [
    "Android"
  ],
  "date": "2015-09-05T13:02:53.000Z",
  "draft": false,
  "slug": "okhttp-call-cancel",
  "title": "OkHttp: Call.cancel が MainThread で実行されてクラッシュする",
  "bodyContent": "会社で開発している Android アプリで、通信に Square の [OkHttp](https://github.com/square/okhttp) ライブラリを使っているのだけれど、HTTPS 通信時 `Call.cancel()` が MainThread を触ってクラッシュすることがあった。Android 3（API Level 11）以降、同期的な通信は OS によって許されていないためだ。\n\n    android.os.NetworkOnMainThreadException\n           at android.os.StrictMode$AndroidBlockGuardPolicy.onNetwork(StrictMode.java:1126)\n           at org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.close(OpenSSLSocketImpl.java:908)\n           at com.squareup.okhttp.Connection.closeIfOwnedBy()\n           at com.squareup.okhttp.OkHttpClient$1.newTransport()\n           at com.squareup.okhttp.internal.http.HttpConnection.setTimeouts()\n           at com.squareup.okhttp.internal.http.HttpTransport.createRequestBody()\n           at com.squareup.okhttp.internal.http.HttpEngine.disconnect()\n           at com.squareup.okhttp.Call.cancel()\n\n以下のようなコードを書いて対処した：\n\n    public void cancel(final String tag) {\n        Executor executor = mOkHttpClient.getDispatcher().getExecutorService();\n        if (Looper.myLooper() != Looper.getMainLooper()) {\n            mOkHttpClient.cancel(tag);\n        } else {\n            executor.execute(new Runnable() {\n                @Override\n                public void run() {\n                    mOkHttpClient.cancel(tag);\n                }\n            });\n        }\n    }\n\nMainThread にいる場合は、非同期的に `Call.cancel()` を呼んでいる。上記の例では、`OkHttpClient.cancel()` と書いているが、最終的に `Call.cancel()` を呼び出している。\n\nこれがクラッシュレポートの大半を占めていたのだが、アップデート後はピタリと止んだので、期待通りに動いていると思う。\n\nこの OkHttp のバグは、3.0 に修正されるようだ。→ [Call.cancel shouldn&#39;t offend strict mode · Issue #1592 · square/okhttp](https://github.com/square/okhttp/issues/1592)",
  "bodyHtml": "<p>会社で開発している Android アプリで、通信に Square の <a href=\"https://github.com/square/okhttp\">OkHttp</a> ライブラリを使っているのだけれど、HTTPS 通信時 <code>Call.cancel()</code> が MainThread を触ってクラッシュすることがあった。Android 3（API Level 11）以降、同期的な通信は OS によって許されていないためだ。</p>\n<pre><code>android.os.NetworkOnMainThreadException\n       at android.os.StrictMode$AndroidBlockGuardPolicy.onNetwork(StrictMode.java:1126)\n       at org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.close(OpenSSLSocketImpl.java:908)\n       at com.squareup.okhttp.Connection.closeIfOwnedBy()\n       at com.squareup.okhttp.OkHttpClient$1.newTransport()\n       at com.squareup.okhttp.internal.http.HttpConnection.setTimeouts()\n       at com.squareup.okhttp.internal.http.HttpTransport.createRequestBody()\n       at com.squareup.okhttp.internal.http.HttpEngine.disconnect()\n       at com.squareup.okhttp.Call.cancel()\n</code></pre>\n<p>以下のようなコードを書いて対処した：</p>\n<pre><code>public void cancel(final String tag) {\n    Executor executor = mOkHttpClient.getDispatcher().getExecutorService();\n    if (Looper.myLooper() != Looper.getMainLooper()) {\n        mOkHttpClient.cancel(tag);\n    } else {\n        executor.execute(new Runnable() {\n            @Override\n            public void run() {\n                mOkHttpClient.cancel(tag);\n            }\n        });\n    }\n}\n</code></pre>\n<p>MainThread にいる場合は、非同期的に <code>Call.cancel()</code> を呼んでいる。上記の例では、<code>OkHttpClient.cancel()</code> と書いているが、最終的に <code>Call.cancel()</code> を呼び出している。</p>\n<p>これがクラッシュレポートの大半を占めていたのだが、アップデート後はピタリと止んだので、期待通りに動いていると思う。</p>\n<p>この OkHttp のバグは、3.0 に修正されるようだ。→ <a href=\"https://github.com/square/okhttp/issues/1592\">Call.cancel shouldn't offend strict mode · Issue #1592 · square/okhttp</a></p>\n",
  "dir": "static/content/archives",
  "base": "2015-09-05-okhttp-call-cancel.json",
  "ext": ".json",
  "sourceBase": "2015-09-05-okhttp-call-cancel.md",
  "sourceExt": ".md"
}