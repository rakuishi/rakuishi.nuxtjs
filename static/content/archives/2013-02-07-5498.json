{
  "categories": [
    "iOS"
  ],
  "date": "2013-02-07T13:12:05.000Z",
  "draft": false,
  "slug": 5498,
  "title": "[iOS SDK] プライバシー設定に対応したカレンダーへのアクセスを行う方法（iOS5, iOS6 両対応）",
  "bodyContent": "iOS6 以降では、連絡帳やカレンダーへのアクセスが厳しくなり、アクセスへの許可をユーザーに求める必要があります。こんな感じのアラートが表示されるのを見たことがあるはずです。\n\n![](/images/2013/02/5498_1.png)\n\nこの記事では、iOS5 と iOS6 における処理の切り分け、iOS6 以降でのカレンダーへのアクセスの許可の取り扱い、地雷ポイントの回避方法について実際のコードを貼り付けて紹介します。\n\n## プライバシー設定に対応したカレンダーへのアクセスを行う方法\n\nEventKit.framework を読み込みます。\n\n```\n#import <EventKit/EventKit.h>\n```\n\n以下に、プライバシー設定に対応したカレンダーへのアクセスの流れを貼り付けます。地雷ポイントが結構ありますが、うまく回避できていると思います。\n\nsaveNewEvent: というのは、僕が独自に実装しているメソッドで、ここで予定の追加を行なっています。\n\n```\nEKEventStore *eventStore = [[EKEventStore alloc] init];\n\n// iOS6 と iOS5 で処理を分ける\nfloat version = [[[UIDevice currentDevice] systemVersion] floatValue];\n// iOS5: ユーザーに許可を求める必要がない\nif (version < 6.0) {\n    [self saveNewEvent:eventStore];\n    return;\n}\n\n// iOS6: ユーザーに許可を求める必要がある\nEKAuthorizationStatus status = [EKEventStore authorizationStatusForEntityType:EKEntityTypeEvent];\nswitch (status) {\n    case EKAuthorizationStatusNotDetermined: {\n        __weak id weakSelf = self;\n        // ユーザーにまだアクセスの許可を求めていない場合\n        // 「このアプリがカレンダーへのアクセスを求めています」というアラートが表示される\n        [eventStore requestAccessToEntityType:EKEntityTypeEvent\n                                   completion:^(BOOL granted, NSError *error)\n        {\n            if (granted) {\n                // 「OK」をタップ\n                [weakSelf saveNewEvent:eventStore];\n            } else {\n                // 「許可しない」をタップ\n                // UIAlertView の表示を main thread で行う\n                dispatch_async(dispatch_get_main_queue(), ^{\n                    [[[UIAlertView alloc] initWithTitle:@\"確認\"\n                                                message:@\"このアプリのカレンダーへのアクセスを許可するには、プライバシーから設定する必要があります。\"\n                                               delegate:nil\n                                      cancelButtonTitle:@\"OK\"\n                                      otherButtonTitles:nil]\n                     show];\n                });\n            }\n        }];\n    }\n        break;\n    case EKAuthorizationStatusAuthorized:\n        // ユーザーから許可されている\n        [self saveNewEvent:eventStore];\n        break;\n    case EKAuthorizationStatusRestricted:\n        // 「設定」→「一般」→「機能制限」→「カレンダー」→\n        // 「変更を許可しない」が選択されている\n    case EKAuthorizationStatusDenied:\n        // ユーザーから拒否されている\n        // ユーザーにアクセスの許可を求めた後、「許可しない」をタップするとこれが呼ばれる\n        // 「設定」→「プライバシー」→「カレンダー」からアプリを許可してもらう必要がある\n        [[[UIAlertView alloc] initWithTitle:@\"確認\"\n                                    message:@\"カレンダーに対する変更を機能制限されているか、プライバシーから許可されていません。\"\n                                   delegate:nil\n                          cancelButtonTitle:@\"OK\"\n                          otherButtonTitles:nil]\n         show];\n        \n        break;\n    default:\n        break;\n}\n```\n\nユーザーにまだアクセスの許可を求めていない場合は、先の画像のようにアラートが表示されます。\n\nここで「許可しない」を選ぶと、アプリを再インストールしない限り、アラートが再び表示されることはありません（たぶん）。そのためユーザーは、設定アプリをたどって、プライバシーからオンにする必要があります。\n\nそれをユーザーに告知させるために、許可されていない時に呼ばれる status で、アラートを表示して、許可を促す必要があります。\n\nrequestAccessToEntityType:completion: は、block で許可されたか（granted）を返しますが、ここで実行される thread は main thread ではありません（iOS では、main thread 以外で見た目の変更を行うと死にます）。\n\nそこで main thread で行うようにコードを書いてあげる必要があります。\n\n```\ndispatch_async(dispatch_get_main_queue(), ^{\n    [[[UIAlertView alloc] initWithTitle:@\"確認\"\n                                message:@\"このアプリのカレンダーへのアクセスを許可するには、プライバシーから設定する必要があります。\"\n                               delegate:nil\n                      cancelButtonTitle:@\"OK\"\n                      otherButtonTitles:nil]\n     show];\n});\n```\n\nちなみに、プライバシーからアプリをオン・オフするとバックグラウンドで動いていたアプリは強制的に落とされます。プライバシー設定を利用するアプリは、強制的に落とされる可能性も考慮する必要があります。\n\n参考：[EKEventStore Class Reference](http://developer.apple.com/library/ios/#documentation/EventKit/Reference/EKEventStoreClassRef/Reference/Reference.html)",
  "bodyHtml": "<p>iOS6 以降では、連絡帳やカレンダーへのアクセスが厳しくなり、アクセスへの許可をユーザーに求める必要があります。こんな感じのアラートが表示されるのを見たことがあるはずです。</p>\n<p><img src=\"/images/2013/02/5498_1.png\" alt=\"\"></p>\n<p>この記事では、iOS5 と iOS6 における処理の切り分け、iOS6 以降でのカレンダーへのアクセスの許可の取り扱い、地雷ポイントの回避方法について実際のコードを貼り付けて紹介します。</p>\n<h2>プライバシー設定に対応したカレンダーへのアクセスを行う方法</h2>\n<p>EventKit.framework を読み込みます。</p>\n<pre><code>#import &lt;EventKit/EventKit.h&gt;\n</code></pre>\n<p>以下に、プライバシー設定に対応したカレンダーへのアクセスの流れを貼り付けます。地雷ポイントが結構ありますが、うまく回避できていると思います。</p>\n<p>saveNewEvent: というのは、僕が独自に実装しているメソッドで、ここで予定の追加を行なっています。</p>\n<pre><code>EKEventStore *eventStore = [[EKEventStore alloc] init];\n\n// iOS6 と iOS5 で処理を分ける\nfloat version = [[[UIDevice currentDevice] systemVersion] floatValue];\n// iOS5: ユーザーに許可を求める必要がない\nif (version &lt; 6.0) {\n    [self saveNewEvent:eventStore];\n    return;\n}\n\n// iOS6: ユーザーに許可を求める必要がある\nEKAuthorizationStatus status = [EKEventStore authorizationStatusForEntityType:EKEntityTypeEvent];\nswitch (status) {\n    case EKAuthorizationStatusNotDetermined: {\n        __weak id weakSelf = self;\n        // ユーザーにまだアクセスの許可を求めていない場合\n        // 「このアプリがカレンダーへのアクセスを求めています」というアラートが表示される\n        [eventStore requestAccessToEntityType:EKEntityTypeEvent\n                                   completion:^(BOOL granted, NSError *error)\n        {\n            if (granted) {\n                // 「OK」をタップ\n                [weakSelf saveNewEvent:eventStore];\n            } else {\n                // 「許可しない」をタップ\n                // UIAlertView の表示を main thread で行う\n                dispatch_async(dispatch_get_main_queue(), ^{\n                    [[[UIAlertView alloc] initWithTitle:@&quot;確認&quot;\n                                                message:@&quot;このアプリのカレンダーへのアクセスを許可するには、プライバシーから設定する必要があります。&quot;\n                                               delegate:nil\n                                      cancelButtonTitle:@&quot;OK&quot;\n                                      otherButtonTitles:nil]\n                     show];\n                });\n            }\n        }];\n    }\n        break;\n    case EKAuthorizationStatusAuthorized:\n        // ユーザーから許可されている\n        [self saveNewEvent:eventStore];\n        break;\n    case EKAuthorizationStatusRestricted:\n        // 「設定」→「一般」→「機能制限」→「カレンダー」→\n        // 「変更を許可しない」が選択されている\n    case EKAuthorizationStatusDenied:\n        // ユーザーから拒否されている\n        // ユーザーにアクセスの許可を求めた後、「許可しない」をタップするとこれが呼ばれる\n        // 「設定」→「プライバシー」→「カレンダー」からアプリを許可してもらう必要がある\n        [[[UIAlertView alloc] initWithTitle:@&quot;確認&quot;\n                                    message:@&quot;カレンダーに対する変更を機能制限されているか、プライバシーから許可されていません。&quot;\n                                   delegate:nil\n                          cancelButtonTitle:@&quot;OK&quot;\n                          otherButtonTitles:nil]\n         show];\n        \n        break;\n    default:\n        break;\n}\n</code></pre>\n<p>ユーザーにまだアクセスの許可を求めていない場合は、先の画像のようにアラートが表示されます。</p>\n<p>ここで「許可しない」を選ぶと、アプリを再インストールしない限り、アラートが再び表示されることはありません（たぶん）。そのためユーザーは、設定アプリをたどって、プライバシーからオンにする必要があります。</p>\n<p>それをユーザーに告知させるために、許可されていない時に呼ばれる status で、アラートを表示して、許可を促す必要があります。</p>\n<p>requestAccessToEntityType:completion: は、block で許可されたか（granted）を返しますが、ここで実行される thread は main thread ではありません（iOS では、main thread 以外で見た目の変更を行うと死にます）。</p>\n<p>そこで main thread で行うようにコードを書いてあげる必要があります。</p>\n<pre><code>dispatch_async(dispatch_get_main_queue(), ^{\n    [[[UIAlertView alloc] initWithTitle:@&quot;確認&quot;\n                                message:@&quot;このアプリのカレンダーへのアクセスを許可するには、プライバシーから設定する必要があります。&quot;\n                               delegate:nil\n                      cancelButtonTitle:@&quot;OK&quot;\n                      otherButtonTitles:nil]\n     show];\n});\n</code></pre>\n<p>ちなみに、プライバシーからアプリをオン・オフするとバックグラウンドで動いていたアプリは強制的に落とされます。プライバシー設定を利用するアプリは、強制的に落とされる可能性も考慮する必要があります。</p>\n<p>参考：<a href=\"http://developer.apple.com/library/ios/#documentation/EventKit/Reference/EKEventStoreClassRef/Reference/Reference.html\">EKEventStore Class Reference</a></p>\n",
  "dir": "static/content/archives",
  "base": "2013-02-07-5498.json",
  "ext": ".json",
  "sourceBase": "2013-02-07-5498.md",
  "sourceExt": ".md"
}